
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  08007f8c  08007f8c  00008f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800872c  0800872c  0000a088  2**0
                  CONTENTS
  4 .ARM          00000008  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008734  08008734  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008734  08008734  00009734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008738  08008738  00009738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800873c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000088  080087c4  0000a088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a0  080087c4  0000a9a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001162b  00000000  00000000  0000a0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003788  00000000  00000000  0001b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2b  00000000  00000000  0001fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fcc  00000000  00000000  00020653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d01  00000000  00000000  0004361f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9eca  00000000  00000000  00056320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001101ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  00110230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00114118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000088 	.word	0x20000088
 8000200:	00000000 	.word	0x00000000
 8000204:	08007f74 	.word	0x08007f74

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000008c 	.word	0x2000008c
 8000220:	08007f74 	.word	0x08007f74

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fa68 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f80a 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8a2 	bl	8000664 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000520:	f006 fb02 	bl	8006b28 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8000524:	f000 f868 	bl	80005f8 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000528:	f006 fb24 	bl	8006b74 <MX_USB_HOST_Process>
 800052c:	e7fc      	b.n	8000528 <main+0x18>
	...

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b09c      	sub	sp, #112	@ 0x70
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800053a:	2238      	movs	r2, #56	@ 0x38
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 ff6f 	bl	8007422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2220      	movs	r2, #32
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 ff61 	bl	8007422 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000568:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000572:	2300      	movs	r3, #0
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000580:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000584:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000586:	2300      	movs	r3, #0
 8000588:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fa2c 	bl	80029ec <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800059a:	f000 f8a1 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fd2c 	bl	8003018 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f88b 	bl	80006e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ca:	2310      	movs	r3, #16
 80005cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 ff1b 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e0:	f000 f87e 	bl	80006e0 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <SystemClock_Config+0xc4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3770      	adds	r7, #112	@ 0x70
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	42420070 	.word	0x42420070

080005f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_SPI1_Init+0x64>)
 80005fe:	4a18      	ldr	r2, [pc, #96]	@ (8000660 <MX_SPI1_Init+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <MX_SPI1_Init+0x64>)
 8000604:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <MX_SPI1_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_SPI1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_SPI1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_SPI1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_SPI1_Init+0x64>)
 8000624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000628:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_SPI1_Init+0x64>)
 800062c:	2208      	movs	r2, #8
 800062e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_SPI1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_SPI1_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_SPI1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_SPI1_Init+0x64>)
 8000644:	220a      	movs	r2, #10
 8000646:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_SPI1_Init+0x64>)
 800064a:	f003 f813 	bl	8003674 <HAL_SPI_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000654:	f000 f844 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000a4 	.word	0x200000a4
 8000660:	40013000 	.word	0x40013000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_GPIO_Init+0x74>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <MX_GPIO_Init+0x74>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_GPIO_Init+0x74>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0320 	and.w	r3, r3, #32
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0x74>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <MX_GPIO_Init+0x74>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_GPIO_Init+0x74>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2102      	movs	r1, #2
 80006ac:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_GPIO_Init+0x78>)
 80006ae:	f000 fcb3 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4619      	mov	r1, r3
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_GPIO_Init+0x78>)
 80006ca:	f000 fb21 	bl	8000d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <HAL_MspInit+0x5c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <HAL_MspInit+0x5c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <HAL_MspInit+0x60>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <HAL_MspInit+0x60>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000
 800074c:	40010000 	.word	0x40010000

08000750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <HAL_SPI_MspInit+0x88>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d12f      	bne.n	80007d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <HAL_SPI_MspInit+0x8c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_SPI_MspInit+0x8c>)
 8000776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <HAL_SPI_MspInit+0x8c>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_SPI_MspInit+0x8c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <HAL_SPI_MspInit+0x8c>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_SPI_MspInit+0x8c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a0:	23a0      	movs	r3, #160	@ 0xa0
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <HAL_SPI_MspInit+0x90>)
 80007b4:	f000 faac 	bl	8000d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007b8:	2340      	movs	r3, #64	@ 0x40
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <HAL_SPI_MspInit+0x90>)
 80007cc:	f000 faa0 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013000 	.word	0x40013000
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f91e 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000840:	4802      	ldr	r0, [pc, #8]	@ (800084c <OTG_FS_IRQHandler+0x10>)
 8000842:	f000 feaf 	bl	80015a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000510 	.word	0x20000510

08000850 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e00a      	b.n	8000878 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000862:	f3af 8000 	nop.w
 8000866:	4601      	mov	r1, r0
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	b2ca      	uxtb	r2, r1
 8000870:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf0      	blt.n	8000862 <_read+0x12>
  }

  return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x12>
  }
  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_close>:

int _close(int file)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e8:	605a      	str	r2, [r3, #4]
  return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <_isatty>:

int _isatty(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090a:	b480      	push	{r7}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
	...

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f006 fdc4 	bl	80074e0 <__errno>
 8000958:	4603      	mov	r3, r0
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <_sbrk+0x64>)
 8000974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20010000 	.word	0x20010000
 8000984:	00000400 	.word	0x00000400
 8000988:	200000fc 	.word	0x200000fc
 800098c:	200009a0 	.word	0x200009a0

08000990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800099c:	f7ff fff8 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009a2:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b8:	4c09      	ldr	r4, [pc, #36]	@ (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80009c6:	f006 fd91 	bl	80074ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fda1 	bl	8000510 <main>
  bx lr
 80009ce:	4770      	bx	lr
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80009d8:	0800873c 	.word	0x0800873c
  ldr r2, =_sbss
 80009dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80009e0:	200009a0 	.word	0x200009a0

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f947 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe72 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f95f 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f927 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a03      	ldr	r2, [pc, #12]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000100 	.word	0x20000100

08000a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	@ (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000100 	.word	0x20000100

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fff0 	bl	8000a98 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_Delay+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffe0 	bl	8000a98 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4906      	ldr	r1, [pc, #24]	@ (8000b8c <__NVIC_EnableIRQ+0x34>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	@ (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	@ (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	@ 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	@ 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff90 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff2d 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff42 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff90 	bl	8000be4 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5f 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff35 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b08b      	sub	sp, #44	@ 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e169      	b.n	8000ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d24:	2201      	movs	r2, #1
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 8158 	bne.w	8000ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a9a      	ldr	r2, [pc, #616]	@ (8000fb0 <HAL_GPIO_Init+0x2a0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d05e      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d4c:	4a98      	ldr	r2, [pc, #608]	@ (8000fb0 <HAL_GPIO_Init+0x2a0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d875      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d52:	4a98      	ldr	r2, [pc, #608]	@ (8000fb4 <HAL_GPIO_Init+0x2a4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d058      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d58:	4a96      	ldr	r2, [pc, #600]	@ (8000fb4 <HAL_GPIO_Init+0x2a4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d86f      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d5e:	4a96      	ldr	r2, [pc, #600]	@ (8000fb8 <HAL_GPIO_Init+0x2a8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d052      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d64:	4a94      	ldr	r2, [pc, #592]	@ (8000fb8 <HAL_GPIO_Init+0x2a8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d869      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d6a:	4a94      	ldr	r2, [pc, #592]	@ (8000fbc <HAL_GPIO_Init+0x2ac>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d04c      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d70:	4a92      	ldr	r2, [pc, #584]	@ (8000fbc <HAL_GPIO_Init+0x2ac>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d863      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d76:	4a92      	ldr	r2, [pc, #584]	@ (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d046      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d7c:	4a90      	ldr	r2, [pc, #576]	@ (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d85d      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d82a      	bhi.n	8000ddc <HAL_GPIO_Init+0xcc>
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d859      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d90 <HAL_GPIO_Init+0x80>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000e0b 	.word	0x08000e0b
 8000d94:	08000de5 	.word	0x08000de5
 8000d98:	08000df7 	.word	0x08000df7
 8000d9c:	08000e39 	.word	0x08000e39
 8000da0:	08000e3f 	.word	0x08000e3f
 8000da4:	08000e3f 	.word	0x08000e3f
 8000da8:	08000e3f 	.word	0x08000e3f
 8000dac:	08000e3f 	.word	0x08000e3f
 8000db0:	08000e3f 	.word	0x08000e3f
 8000db4:	08000e3f 	.word	0x08000e3f
 8000db8:	08000e3f 	.word	0x08000e3f
 8000dbc:	08000e3f 	.word	0x08000e3f
 8000dc0:	08000e3f 	.word	0x08000e3f
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000e3f 	.word	0x08000e3f
 8000dcc:	08000e3f 	.word	0x08000e3f
 8000dd0:	08000e3f 	.word	0x08000e3f
 8000dd4:	08000ded 	.word	0x08000ded
 8000dd8:	08000e01 	.word	0x08000e01
 8000ddc:	4a79      	ldr	r2, [pc, #484]	@ (8000fc4 <HAL_GPIO_Init+0x2b4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000de2:	e02c      	b.n	8000e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e029      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	3304      	adds	r3, #4
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e024      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e01f      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	330c      	adds	r3, #12
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	e01a      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e12:	2304      	movs	r3, #4
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e013      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d105      	bne.n	8000e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e20:	2308      	movs	r3, #8
 8000e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	611a      	str	r2, [r3, #16]
          break;
 8000e2a:	e009      	b.n	8000e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	615a      	str	r2, [r3, #20]
          break;
 8000e36:	e003      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
          break;
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          break;
 8000e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2bff      	cmp	r3, #255	@ 0xff
 8000e44:	d801      	bhi.n	8000e4a <HAL_GPIO_Init+0x13a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	e001      	b.n	8000e4e <HAL_GPIO_Init+0x13e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2bff      	cmp	r3, #255	@ 0xff
 8000e54:	d802      	bhi.n	8000e5c <HAL_GPIO_Init+0x14c>
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x152>
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	3b08      	subs	r3, #8
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	210f      	movs	r1, #15
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	6a39      	ldr	r1, [r7, #32]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80b1 	beq.w	8000ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e90:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea8:	4a48      	ldr	r2, [pc, #288]	@ (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a40      	ldr	r2, [pc, #256]	@ (8000fd0 <HAL_GPIO_Init+0x2c0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x1ec>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd4 <HAL_GPIO_Init+0x2c4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e8>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd8 <HAL_GPIO_Init+0x2c8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fdc <HAL_GPIO_Init+0x2cc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1e0>
 8000eec:	2303      	movs	r3, #3
 8000eee:	e006      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e004      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000efc:	2300      	movs	r3, #0
 8000efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f00:	f002 0203 	and.w	r2, r2, #3
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	4093      	lsls	r3, r2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f0e:	492f      	ldr	r1, [pc, #188]	@ (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f28:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	492c      	ldr	r1, [pc, #176]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	608b      	str	r3, [r1, #8]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4928      	ldr	r1, [pc, #160]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	4922      	ldr	r1, [pc, #136]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60cb      	str	r3, [r1, #12]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	491e      	ldr	r1, [pc, #120]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4918      	ldr	r1, [pc, #96]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4914      	ldr	r1, [pc, #80]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d021      	beq.n	8000fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	490e      	ldr	r1, [pc, #56]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
 8000fac:	e021      	b.n	8000ff2 <HAL_GPIO_Init+0x2e2>
 8000fae:	bf00      	nop
 8000fb0:	10320000 	.word	0x10320000
 8000fb4:	10310000 	.word	0x10310000
 8000fb8:	10220000 	.word	0x10220000
 8000fbc:	10210000 	.word	0x10210000
 8000fc0:	10120000 	.word	0x10120000
 8000fc4:	10110000 	.word	0x10110000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	40011400 	.word	0x40011400
 8000fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4909      	ldr	r1, [pc, #36]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	f47f ae8e 	bne.w	8000d24 <HAL_GPIO_Init+0x14>
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	372c      	adds	r7, #44	@ 0x2c
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	611a      	str	r2, [r3, #16]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43d9      	mvns	r1, r3
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	400b      	ands	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800107a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107c:	b08f      	sub	sp, #60	@ 0x3c
 800107e:	af0a      	add	r7, sp, #40	@ 0x28
 8001080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e054      	b.n	8001136 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3339 	ldrb.w	r3, [r3, #825]	@ 0x339
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f005 fd9a 	bl	8006be0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fb88 	bl	80037e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	687e      	ldr	r6, [r7, #4]
 80010d8:	466d      	mov	r5, sp
 80010da:	f106 0410 	add.w	r4, r6, #16
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ee:	1d33      	adds	r3, r6, #4
 80010f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f002 fb42 	bl	800377c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fb7e 	bl	8003800 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	687e      	ldr	r6, [r7, #4]
 800110c:	466d      	mov	r5, sp
 800110e:	f106 0410 	add.w	r4, r6, #16
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001122:	1d33      	adds	r3, r6, #4
 8001124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f002 fd1c 	bl	8003b64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800113e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800113e:	b590      	push	{r4, r7, lr}
 8001140:	b089      	sub	sp, #36	@ 0x24
 8001142:	af04      	add	r7, sp, #16
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	4608      	mov	r0, r1
 8001148:	4611      	mov	r1, r2
 800114a:	461a      	mov	r2, r3
 800114c:	4603      	mov	r3, r0
 800114e:	70fb      	strb	r3, [r7, #3]
 8001150:	460b      	mov	r3, r1
 8001152:	70bb      	strb	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8001158:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800115a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_HCD_HC_Init+0x2c>
 8001166:	2302      	movs	r3, #2
 8001168:	e087      	b.n	800127a <HAL_HCD_HC_Init+0x13c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	333d      	adds	r3, #61	@ 0x3d
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	3338      	adds	r3, #56	@ 0x38
 8001196:	787a      	ldrb	r2, [r7, #1]
 8001198:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	440b      	add	r3, r1
 80011a8:	3339      	adds	r3, #57	@ 0x39
 80011aa:	78fa      	ldrb	r2, [r7, #3]
 80011ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	440b      	add	r3, r1
 80011bc:	3340      	adds	r3, #64	@ 0x40
 80011be:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80011c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80011c4:	78fa      	ldrb	r2, [r7, #3]
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011cc:	b2d8      	uxtb	r0, r3
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	440b      	add	r3, r1
 80011da:	333a      	adds	r3, #58	@ 0x3a
 80011dc:	4602      	mov	r2, r0
 80011de:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	4619      	mov	r1, r3
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fb7e 	bl	80018e6 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80011ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da0a      	bge.n	8001208 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	440b      	add	r3, r1
 8001200:	333b      	adds	r3, #59	@ 0x3b
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e009      	b.n	800121c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001208:	78fa      	ldrb	r2, [r7, #3]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	440b      	add	r3, r1
 8001216:	333b      	adds	r3, #59	@ 0x3b
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	333c      	adds	r3, #60	@ 0x3c
 800122c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001230:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001232:	78fa      	ldrb	r2, [r7, #3]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	b298      	uxth	r0, r3
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	440b      	add	r3, r1
 8001244:	3342      	adds	r3, #66	@ 0x42
 8001246:	4602      	mov	r2, r0
 8001248:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	b29b      	uxth	r3, r3
 8001252:	787c      	ldrb	r4, [r7, #1]
 8001254:	78ba      	ldrb	r2, [r7, #2]
 8001256:	78f9      	ldrb	r1, [r7, #3]
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	4623      	mov	r3, r4
 8001268:	f002 fdc2 	bl	8003df0 <USB_HC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 8001278:	7afb      	ldrb	r3, [r7, #11]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bd90      	pop	{r4, r7, pc}

08001282 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_HCD_HC_Halt+0x1e>
 800129c:	2302      	movs	r3, #2
 800129e:	e00f      	b.n	80012c0 <HAL_HCD_HC_Halt+0x3e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ffb1 	bl	8004218 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	70fb      	strb	r3, [r7, #3]
 80012da:	460b      	mov	r3, r1
 80012dc:	70bb      	strb	r3, [r7, #2]
 80012de:	4613      	mov	r3, r2
 80012e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	333b      	adds	r3, #59	@ 0x3b
 80012f2:	78ba      	ldrb	r2, [r7, #2]
 80012f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	440b      	add	r3, r1
 8001304:	3340      	adds	r3, #64	@ 0x40
 8001306:	787a      	ldrb	r2, [r7, #1]
 8001308:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800130a:	7c3b      	ldrb	r3, [r7, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d114      	bne.n	800133a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001310:	78fa      	ldrb	r2, [r7, #3]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	440b      	add	r3, r1
 800131e:	3344      	adds	r3, #68	@ 0x44
 8001320:	2203      	movs	r2, #3
 8001322:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	440b      	add	r3, r1
 8001332:	333d      	adds	r3, #61	@ 0x3d
 8001334:	7f3a      	ldrb	r2, [r7, #28]
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e009      	b.n	800134e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	440b      	add	r3, r1
 8001348:	3344      	adds	r3, #68	@ 0x44
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800134e:	787b      	ldrb	r3, [r7, #1]
 8001350:	2b03      	cmp	r3, #3
 8001352:	f200 80d6 	bhi.w	8001502 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001356:	a201      	add	r2, pc, #4	@ (adr r2, 800135c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	0800136d 	.word	0x0800136d
 8001360:	080014ed 	.word	0x080014ed
 8001364:	080013d9 	.word	0x080013d9
 8001368:	08001463 	.word	0x08001463
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800136c:	7c3b      	ldrb	r3, [r7, #16]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f040 80c9 	bne.w	8001506 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 8001374:	78bb      	ldrb	r3, [r7, #2]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 80c5 	bne.w	8001506 <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 800137c:	8b3b      	ldrh	r3, [r7, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	440b      	add	r3, r1
 8001390:	3359      	adds	r3, #89	@ 0x59
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	3359      	adds	r3, #89	@ 0x59
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10a      	bne.n	80013c2 <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	3344      	adds	r3, #68	@ 0x44
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 80013c0:	e0a1      	b.n	8001506 <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013c2:	78fa      	ldrb	r2, [r7, #3]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	3344      	adds	r3, #68	@ 0x44
 80013d2:	2202      	movs	r2, #2
 80013d4:	701a      	strb	r2, [r3, #0]
      break;
 80013d6:	e096      	b.n	8001506 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80013d8:	78bb      	ldrb	r3, [r7, #2]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d120      	bne.n	8001420 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	440b      	add	r3, r1
 80013ec:	3359      	adds	r3, #89	@ 0x59
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10a      	bne.n	800140a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	3344      	adds	r3, #68	@ 0x44
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001408:	e07e      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	440b      	add	r3, r1
 8001418:	3344      	adds	r3, #68	@ 0x44
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
      break;
 800141e:	e073      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	3358      	adds	r3, #88	@ 0x58
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10a      	bne.n	800144c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001436:	78fa      	ldrb	r2, [r7, #3]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	440b      	add	r3, r1
 8001444:	3344      	adds	r3, #68	@ 0x44
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
      break;
 800144a:	e05d      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	440b      	add	r3, r1
 800145a:	3344      	adds	r3, #68	@ 0x44
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]
      break;
 8001460:	e052      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001462:	78bb      	ldrb	r3, [r7, #2]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d120      	bne.n	80014aa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	440b      	add	r3, r1
 8001476:	3359      	adds	r3, #89	@ 0x59
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10a      	bne.n	8001494 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	440b      	add	r3, r1
 800148c:	3344      	adds	r3, #68	@ 0x44
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001492:	e039      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001494:	78fa      	ldrb	r2, [r7, #3]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	3344      	adds	r3, #68	@ 0x44
 80014a4:	2202      	movs	r2, #2
 80014a6:	701a      	strb	r2, [r3, #0]
      break;
 80014a8:	e02e      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	440b      	add	r3, r1
 80014b8:	3358      	adds	r3, #88	@ 0x58
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10a      	bne.n	80014d6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	440b      	add	r3, r1
 80014ce:	3344      	adds	r3, #68	@ 0x44
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
      break;
 80014d4:	e018      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	440b      	add	r3, r1
 80014e4:	3344      	adds	r3, #68	@ 0x44
 80014e6:	2202      	movs	r2, #2
 80014e8:	701a      	strb	r2, [r3, #0]
      break;
 80014ea:	e00d      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	440b      	add	r3, r1
 80014fa:	3344      	adds	r3, #68	@ 0x44
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
      break;
 8001500:	e002      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001506:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	440b      	add	r3, r1
 8001516:	3348      	adds	r3, #72	@ 0x48
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	8b39      	ldrh	r1, [r7, #24]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4403      	add	r3, r0
 800152c:	3350      	adds	r3, #80	@ 0x50
 800152e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	440b      	add	r3, r1
 800153e:	3364      	adds	r3, #100	@ 0x64
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	440b      	add	r3, r1
 8001552:	3354      	adds	r3, #84	@ 0x54
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	3339      	adds	r3, #57	@ 0x39
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	3365      	adds	r3, #101	@ 0x65
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	3338      	adds	r3, #56	@ 0x38
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f002 fd37 	bl	8004008 <USB_HC_StartXfer>
 800159a:	4603      	mov	r3, r0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fa92 	bl	8003ae4 <USB_GetMode>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	f040 80fa 	bne.w	80017bc <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fa57 	bl	8003a80 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80f0 	beq.w	80017ba <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fa4e 	bl	8003a80 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80015ee:	d104      	bne.n	80015fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80015f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fa3e 	bl	8003a80 <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800160e:	d104      	bne.n	800161a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001618:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fa2e 	bl	8003a80 <USB_ReadInterrupts>
 8001624:	4603      	mov	r3, r0
 8001626:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800162a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800162e:	d104      	bne.n	800163a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fa1e 	bl	8003a80 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b02      	cmp	r3, #2
 800164c:	d103      	bne.n	8001656 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2202      	movs	r2, #2
 8001654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fa10 	bl	8003a80 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800166a:	d120      	bne.n	80016ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001674:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d113      	bne.n	80016ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001686:	2110      	movs	r1, #16
 8001688:	6938      	ldr	r0, [r7, #16]
 800168a:	f002 f905 	bl	8003898 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800168e:	6938      	ldr	r0, [r7, #16]
 8001690:	f002 f936 	bl	8003900 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d105      	bne.n	80016a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fae0 	bl	8003c68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f005 fad9 	bl	8006c60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 f9e4 	bl	8003a80 <USB_ReadInterrupts>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c2:	d102      	bne.n	80016ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f001 f91e 	bl	8002906 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 f9d6 	bl	8003a80 <USB_ReadInterrupts>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d106      	bne.n	80016ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f005 faa2 	bl	8006c28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2208      	movs	r2, #8
 80016ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 f9c5 	bl	8003a80 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001700:	d138      	bne.n	8001774 <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fd76 	bl	80041f8 <USB_HC_ReadInterrupt>
 800170c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e025      	b.n	8001760 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d018      	beq.n	800175a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800173a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800173e:	d106      	bne.n	800174e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f8ed 	bl	8001926 <HCD_HC_IN_IRQHandler>
 800174c:	e005      	b.n	800175a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fd21 	bl	800219c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3d4      	bcc.n	8001714 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 f981 	bl	8003a80 <USB_ReadInterrupts>
 800177e:	4603      	mov	r3, r0
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b10      	cmp	r3, #16
 8001786:	d101      	bne.n	800178c <HAL_HCD_IRQHandler+0x1e8>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_HCD_IRQHandler+0x1ea>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d014      	beq.n	80017bc <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0210 	bic.w	r2, r2, #16
 80017a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 ffd0 	bl	8002748 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0210 	orr.w	r2, r2, #16
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	e000      	b.n	80017bc <HAL_HCD_IRQHandler+0x218>
      return;
 80017ba:	bf00      	nop
    }
  }
}
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_HCD_Start+0x16>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e013      	b.n	8001800 <HAL_HCD_Start+0x3e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 faa4 	bl	8003d34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 ffe5 	bl	80037c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_HCD_Stop+0x16>
 800181a:	2302      	movs	r3, #2
 800181c:	e00d      	b.n	800183a <HAL_HCD_Stop+0x32>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_StopHost(hhcd->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fe13 	bl	8004456 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fa46 	bl	8003ce0 <USB_ResetPort>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	440b      	add	r3, r1
 8001878:	3364      	adds	r3, #100	@ 0x64
 800187a:	781b      	ldrb	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	440b      	add	r3, r1
 80018a0:	3354      	adds	r3, #84	@ 0x54
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fa88 	bl	8003dd0 <USB_GetCurrentFrame>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fa64 	bl	8003da4 <USB_GetHostSpeed>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	440b      	add	r3, r1
 8001900:	333f      	adds	r3, #63	@ 0x3f
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	440b      	add	r3, r1
 8001914:	333e      	adds	r3, #62	@ 0x3e
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f002 f8ad 	bl	8003aa4 <USB_ReadChInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d11a      	bne.n	800198a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	2304      	movs	r3, #4
 8001964:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	440b      	add	r3, r1
 8001974:	3365      	adds	r3, #101	@ 0x65
 8001976:	2207      	movs	r2, #7
 8001978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fc48 	bl	8004218 <USB_HC_Halt>
 8001988:	e09e      	b.n	8001ac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 f886 	bl	8003aa4 <USB_ReadChInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019a2:	d11b      	bne.n	80019dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019b0:	461a      	mov	r2, r3
 80019b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	440b      	add	r3, r1
 80019c6:	3365      	adds	r3, #101	@ 0x65
 80019c8:	2208      	movs	r2, #8
 80019ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fc1f 	bl	8004218 <USB_HC_Halt>
 80019da:	e075      	b.n	8001ac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 f85d 	bl	8003aa4 <USB_ReadChInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d11a      	bne.n	8001a2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a00:	461a      	mov	r2, r3
 8001a02:	2308      	movs	r3, #8
 8001a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	440b      	add	r3, r1
 8001a14:	3365      	adds	r3, #101	@ 0x65
 8001a16:	2206      	movs	r2, #6
 8001a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fbf8 	bl	8004218 <USB_HC_Halt>
 8001a28:	e04e      	b.n	8001ac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 f836 	bl	8003aa4 <USB_ReadChInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d11b      	bne.n	8001a7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a50:	461a      	mov	r2, r3
 8001a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	3365      	adds	r3, #101	@ 0x65
 8001a68:	2209      	movs	r2, #9
 8001a6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fbcf 	bl	8004218 <USB_HC_Halt>
 8001a7a:	e025      	b.n	8001ac8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 f80d 	bl	8003aa4 <USB_ReadChInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a90:	2b80      	cmp	r3, #128	@ 0x80
 8001a92:	d119      	bne.n	8001ac8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3365      	adds	r3, #101	@ 0x65
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fba8 	bl	8004218 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 ffe7 	bl	8003aa4 <USB_ReadChInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae0:	d111      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fb94 	bl	8004218 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001afc:	461a      	mov	r2, r3
 8001afe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b02:	6093      	str	r3, [r2, #8]
 8001b04:	e347      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 ffc8 	bl	8003aa4 <USB_ReadChInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	f040 80d8 	bne.w	8001cd0 <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3365      	adds	r3, #101	@ 0x65
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	440b      	add	r3, r1
 8001b42:	3360      	adds	r3, #96	@ 0x60
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b54:	461a      	mov	r2, r3
 8001b56:	2301      	movs	r3, #1
 8001b58:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	440b      	add	r3, r1
 8001b68:	3340      	adds	r3, #64	@ 0x40
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00a      	beq.n	8001b86 <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3340      	adds	r3, #64	@ 0x40
 8001b80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d110      	bne.n	8001ba8 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fb42 	bl	8004218 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	6093      	str	r3, [r2, #8]
 8001ba6:	e03d      	b.n	8001c24 <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3340      	adds	r3, #64	@ 0x40
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d00a      	beq.n	8001bd4 <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	440b      	add	r3, r1
 8001bcc:	3340      	adds	r3, #64	@ 0x40
 8001bce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d127      	bne.n	8001c24 <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bf2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	440b      	add	r3, r1
 8001c02:	3364      	adds	r3, #100	@ 0x64
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	440b      	add	r3, r1
 8001c16:	3364      	adds	r3, #100	@ 0x64
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f005 f82c 	bl	8006c7c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d13a      	bne.n	8001ca2 <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	440b      	add	r3, r1
 8001c3a:	3354      	adds	r3, #84	@ 0x54
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4403      	add	r3, r0
 8001c4c:	3342      	adds	r3, #66	@ 0x42
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	440b      	add	r3, r1
 8001c52:	1e59      	subs	r1, r3, #1
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4403      	add	r3, r0
 8001c62:	3342      	adds	r3, #66	@ 0x42
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8291 	beq.w	8002196 <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	440b      	add	r3, r1
 8001c82:	3358      	adds	r3, #88	@ 0x58
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	f083 0301 	eor.w	r3, r3, #1
 8001c8c:	b2d8      	uxtb	r0, r3
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	440b      	add	r3, r1
 8001c9a:	3358      	adds	r3, #88	@ 0x58
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e279      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	440b      	add	r3, r1
 8001cb0:	3358      	adds	r3, #88	@ 0x58
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2d8      	uxtb	r0, r3
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3358      	adds	r3, #88	@ 0x58
 8001cca:	4602      	mov	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e262      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fee3 	bl	8003aa4 <USB_ReadChInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d109      	bne.n	8001cfc <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	6093      	str	r3, [r2, #8]
 8001cfa:	e24c      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fecd 	bl	8003aa4 <USB_ReadChInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	f040 81a0 	bne.w	8002056 <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d22:	461a      	mov	r2, r3
 8001d24:	2302      	movs	r3, #2
 8001d26:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	440b      	add	r3, r1
 8001d36:	3365      	adds	r3, #101	@ 0x65
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d114      	bne.n	8001d68 <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3365      	adds	r3, #101	@ 0x65
 8001d4e:	2202      	movs	r2, #2
 8001d50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	440b      	add	r3, r1
 8001d60:	3364      	adds	r3, #100	@ 0x64
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e167      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	440b      	add	r3, r1
 8001d76:	3365      	adds	r3, #101	@ 0x65
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d114      	bne.n	8001da8 <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3365      	adds	r3, #101	@ 0x65
 8001d8e:	2202      	movs	r2, #2
 8001d90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	3364      	adds	r3, #100	@ 0x64
 8001da2:	2205      	movs	r2, #5
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e147      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	440b      	add	r3, r1
 8001db6:	3365      	adds	r3, #101	@ 0x65
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d00a      	beq.n	8001dd4 <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	440b      	add	r3, r1
 8001dcc:	3365      	adds	r3, #101	@ 0x65
 8001dce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d176      	bne.n	8001ec2 <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	440b      	add	r3, r1
 8001de2:	3365      	adds	r3, #101	@ 0x65
 8001de4:	2202      	movs	r2, #2
 8001de6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	440b      	add	r3, r1
 8001df6:	3360      	adds	r3, #96	@ 0x60
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	1c59      	adds	r1, r3, #1
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	4403      	add	r3, r0
 8001e08:	3360      	adds	r3, #96	@ 0x60
 8001e0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	3360      	adds	r3, #96	@ 0x60
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d914      	bls.n	8001e4c <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	440b      	add	r3, r1
 8001e30:	3360      	adds	r3, #96	@ 0x60
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	440b      	add	r3, r1
 8001e44:	3364      	adds	r3, #100	@ 0x64
 8001e46:	2204      	movs	r2, #4
 8001e48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e4a:	e0f4      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	440b      	add	r3, r1
 8001e5a:	3364      	adds	r3, #100	@ 0x64
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3340      	adds	r3, #64	@ 0x40
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	440b      	add	r3, r1
 8001e84:	3340      	adds	r3, #64	@ 0x40
 8001e86:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	f040 80d4 	bne.w	8002036 <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ea4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001eac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001ec0:	e0b9      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	440b      	add	r3, r1
 8001ed0:	3365      	adds	r3, #101	@ 0x65
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10a      	bne.n	8001eee <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3365      	adds	r3, #101	@ 0x65
 8001ee8:	2202      	movs	r2, #2
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e0a4      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	440b      	add	r3, r1
 8001efc:	3365      	adds	r3, #101	@ 0x65
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d10a      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	440b      	add	r3, r1
 8001f12:	3365      	adds	r3, #101	@ 0x65
 8001f14:	2202      	movs	r2, #2
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e08e      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	440b      	add	r3, r1
 8001f28:	3365      	adds	r3, #101	@ 0x65
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d143      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3365      	adds	r3, #101	@ 0x65
 8001f40:	2202      	movs	r2, #2
 8001f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	3364      	adds	r3, #100	@ 0x64
 8001f54:	2202      	movs	r2, #2
 8001f56:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	440b      	add	r3, r1
 8001f66:	3340      	adds	r3, #64	@ 0x40
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3340      	adds	r3, #64	@ 0x40
 8001f7e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d159      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f9a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fa2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e03f      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3365      	adds	r3, #101	@ 0x65
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d126      	bne.n	800201c <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	440b      	add	r3, r1
 8001fdc:	3365      	adds	r3, #101	@ 0x65
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	440b      	add	r3, r1
 8001ff0:	3360      	adds	r3, #96	@ 0x60
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1c59      	adds	r1, r3, #1
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4403      	add	r3, r0
 8002002:	3360      	adds	r3, #96	@ 0x60
 8002004:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	440b      	add	r3, r1
 8002014:	3364      	adds	r3, #100	@ 0x64
 8002016:	2204      	movs	r2, #4
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e00d      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	440b      	add	r3, r1
 800202a:	3365      	adds	r3, #101	@ 0x65
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	f000 80b0 	beq.w	8002194 <HCD_HC_IN_IRQHandler+0x86e>
 8002034:	e000      	b.n	8002038 <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002036:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	440b      	add	r3, r1
 8002046:	3364      	adds	r3, #100	@ 0x64
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f004 fe14 	bl	8006c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002054:	e09f      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f001 fd20 	bl	8003aa4 <USB_ReadChInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206a:	2b40      	cmp	r3, #64	@ 0x40
 800206c:	d124      	bne.n	80020b8 <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207a:	461a      	mov	r2, r3
 800207c:	2340      	movs	r3, #64	@ 0x40
 800207e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	440b      	add	r3, r1
 800208e:	3365      	adds	r3, #101	@ 0x65
 8002090:	2205      	movs	r2, #5
 8002092:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	440b      	add	r3, r1
 80020a2:	3360      	adds	r3, #96	@ 0x60
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 f8b1 	bl	8004218 <USB_HC_Halt>
 80020b6:	e06e      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 fcef 	bl	8003aa4 <USB_ReadChInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d162      	bne.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	440b      	add	r3, r1
 80020de:	3340      	adds	r3, #64	@ 0x40
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d11b      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	3360      	adds	r3, #96	@ 0x60
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	440b      	add	r3, r1
 8002108:	3365      	adds	r3, #101	@ 0x65
 800210a:	2204      	movs	r2, #4
 800210c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f002 f87e 	bl	8004218 <USB_HC_Halt>
 800211c:	e030      	b.n	8002180 <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	440b      	add	r3, r1
 800212c:	3340      	adds	r3, #64	@ 0x40
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	440b      	add	r3, r1
 8002142:	3340      	adds	r3, #64	@ 0x40
 8002144:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002146:	2b02      	cmp	r3, #2
 8002148:	d11a      	bne.n	8002180 <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	440b      	add	r3, r1
 8002158:	3360      	adds	r3, #96	@ 0x60
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	440b      	add	r3, r1
 800216c:	3365      	adds	r3, #101	@ 0x65
 800216e:	2204      	movs	r2, #4
 8002170:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f002 f84c 	bl	8004218 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	2310      	movs	r3, #16
 8002190:	6093      	str	r3, [r2, #8]
 8002192:	e000      	b.n	8002196 <HCD_HC_IN_IRQHandler+0x870>
        return;
 8002194:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fc72 	bl	8003aa4 <USB_ReadChInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d11a      	bne.n	8002200 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2304      	movs	r3, #4
 80021da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	440b      	add	r3, r1
 80021ea:	3365      	adds	r3, #101	@ 0x65
 80021ec:	2207      	movs	r2, #7
 80021ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 f80d 	bl	8004218 <USB_HC_Halt>
 80021fe:	e2a0      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fc4b 	bl	8003aa4 <USB_ReadChInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b20      	cmp	r3, #32
 8002216:	d109      	bne.n	800222c <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	2320      	movs	r3, #32
 8002228:	6093      	str	r3, [r2, #8]
 800222a:	e28a      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f001 fc35 	bl	8003aa4 <USB_ReadChInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002244:	d111      	bne.n	800226a <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002258:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f001 ffd8 	bl	8004218 <USB_HC_Halt>
 8002268:	e26b      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fc16 	bl	8003aa4 <USB_ReadChInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d124      	bne.n	80022cc <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	440b      	add	r3, r1
 8002290:	3360      	adds	r3, #96	@ 0x60
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	440b      	add	r3, r1
 80022b6:	3365      	adds	r3, #101	@ 0x65
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 ffa7 	bl	8004218 <USB_HC_Halt>
 80022ca:	e23a      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 fbe5 	bl	8003aa4 <USB_ReadChInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11a      	bne.n	800231a <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	2308      	movs	r3, #8
 80022f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	440b      	add	r3, r1
 8002304:	3365      	adds	r3, #101	@ 0x65
 8002306:	2206      	movs	r2, #6
 8002308:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f001 ff80 	bl	8004218 <USB_HC_Halt>
 8002318:	e213      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fbbe 	bl	8003aa4 <USB_ReadChInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b10      	cmp	r3, #16
 8002330:	d124      	bne.n	800237c <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	440b      	add	r3, r1
 8002340:	3360      	adds	r3, #96	@ 0x60
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	440b      	add	r3, r1
 8002354:	3365      	adds	r3, #101	@ 0x65
 8002356:	2204      	movs	r2, #4
 8002358:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f001 ff58 	bl	8004218 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002374:	461a      	mov	r2, r3
 8002376:	2310      	movs	r3, #16
 8002378:	6093      	str	r3, [r2, #8]
 800237a:	e1e2      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fb8d 	bl	8003aa4 <USB_ReadChInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002390:	2b80      	cmp	r3, #128	@ 0x80
 8002392:	d11a      	bne.n	80023ca <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	440b      	add	r3, r1
 80023a2:	3365      	adds	r3, #101	@ 0x65
 80023a4:	2207      	movs	r2, #7
 80023a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 ff31 	bl	8004218 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	6093      	str	r3, [r2, #8]
 80023c8:	e1bb      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fb66 	bl	8003aa4 <USB_ReadChInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e2:	d11b      	bne.n	800241c <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	440b      	add	r3, r1
 80023f2:	3365      	adds	r3, #101	@ 0x65
 80023f4:	2209      	movs	r2, #9
 80023f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f001 ff09 	bl	8004218 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	e192      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fb3d 	bl	8003aa4 <USB_ReadChInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	f040 8183 	bne.w	800273c <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	2302      	movs	r3, #2
 8002446:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	440b      	add	r3, r1
 8002456:	3365      	adds	r3, #101	@ 0x65
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 8093 	bne.w	8002586 <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	440b      	add	r3, r1
 800246e:	3365      	adds	r3, #101	@ 0x65
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	440b      	add	r3, r1
 8002482:	3364      	adds	r3, #100	@ 0x64
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	440b      	add	r3, r1
 8002496:	3340      	adds	r3, #64	@ 0x40
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d00b      	beq.n	80024b6 <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	440b      	add	r3, r1
 80024ac:	3340      	adds	r3, #64	@ 0x40
 80024ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	f040 8134 	bne.w	800271e <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	440b      	add	r3, r1
 80024cc:	3359      	adds	r3, #89	@ 0x59
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2d8      	uxtb	r0, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	440b      	add	r3, r1
 80024e4:	3359      	adds	r3, #89	@ 0x59
 80024e6:	4602      	mov	r2, r0
 80024e8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	f040 8115 	bne.w	800271e <HCD_HC_OUT_IRQHandler+0x582>
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	440b      	add	r3, r1
 8002502:	3350      	adds	r3, #80	@ 0x50
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8109 	beq.w	800271e <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	440b      	add	r3, r1
 800251a:	3350      	adds	r3, #80	@ 0x50
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	4403      	add	r3, r0
 800252c:	3342      	adds	r3, #66	@ 0x42
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	440b      	add	r3, r1
 8002532:	1e59      	subs	r1, r3, #1
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4403      	add	r3, r0
 8002542:	3342      	adds	r3, #66	@ 0x42
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	fbb1 f3f3 	udiv	r3, r1, r3
 800254a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80e3 	beq.w	800271e <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	440b      	add	r3, r1
 8002566:	3359      	adds	r3, #89	@ 0x59
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2d8      	uxtb	r0, r3
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	440b      	add	r3, r1
 800257e:	3359      	adds	r3, #89	@ 0x59
 8002580:	4602      	mov	r2, r0
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e0cb      	b.n	800271e <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	440b      	add	r3, r1
 8002594:	3365      	adds	r3, #101	@ 0x65
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d10a      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	440b      	add	r3, r1
 80025aa:	3365      	adds	r3, #101	@ 0x65
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e0b5      	b.n	800271e <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	440b      	add	r3, r1
 80025c0:	3365      	adds	r3, #101	@ 0x65
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d114      	bne.n	80025f2 <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	440b      	add	r3, r1
 80025d6:	3365      	adds	r3, #101	@ 0x65
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	440b      	add	r3, r1
 80025ea:	3364      	adds	r3, #100	@ 0x64
 80025ec:	2202      	movs	r2, #2
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e095      	b.n	800271e <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	440b      	add	r3, r1
 8002600:	3365      	adds	r3, #101	@ 0x65
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d114      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	440b      	add	r3, r1
 8002616:	3365      	adds	r3, #101	@ 0x65
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	440b      	add	r3, r1
 800262a:	3364      	adds	r3, #100	@ 0x64
 800262c:	2205      	movs	r2, #5
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e075      	b.n	800271e <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	440b      	add	r3, r1
 8002640:	3365      	adds	r3, #101	@ 0x65
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b07      	cmp	r3, #7
 8002646:	d00a      	beq.n	800265e <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	3365      	adds	r3, #101	@ 0x65
 8002658:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800265a:	2b09      	cmp	r3, #9
 800265c:	d170      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	440b      	add	r3, r1
 800266c:	3365      	adds	r3, #101	@ 0x65
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	440b      	add	r3, r1
 8002680:	3360      	adds	r3, #96	@ 0x60
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1c59      	adds	r1, r3, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4403      	add	r3, r0
 8002692:	3360      	adds	r3, #96	@ 0x60
 8002694:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	440b      	add	r3, r1
 80026a4:	3360      	adds	r3, #96	@ 0x60
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d914      	bls.n	80026d6 <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	440b      	add	r3, r1
 80026ba:	3360      	adds	r3, #96	@ 0x60
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	440b      	add	r3, r1
 80026ce:	3364      	adds	r3, #100	@ 0x64
 80026d0:	2204      	movs	r2, #4
 80026d2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026d4:	e022      	b.n	800271c <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	440b      	add	r3, r1
 80026e4:	3364      	adds	r3, #100	@ 0x64
 80026e6:	2202      	movs	r2, #2
 80026e8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002700:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002708:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800271c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	440b      	add	r3, r1
 800272c:	3364      	adds	r3, #100	@ 0x64
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f004 faa1 	bl	8006c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 800273a:	e002      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800273c:	bf00      	nop
 800273e:	e000      	b.n	8002742 <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 8002740:	bf00      	nop
  }
}
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	0c5b      	lsrs	r3, r3, #17
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d004      	beq.n	800278e <HCD_RXQLVL_IRQHandler+0x46>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b05      	cmp	r3, #5
 8002788:	f000 80b6 	beq.w	80028f8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800278c:	e0b7      	b.n	80028fe <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80b3 	beq.w	80028fc <HCD_RXQLVL_IRQHandler+0x1b4>
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	440b      	add	r3, r1
 80027a4:	3348      	adds	r3, #72	@ 0x48
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a7 	beq.w	80028fc <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	440b      	add	r3, r1
 80027bc:	3354      	adds	r3, #84	@ 0x54
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	18d1      	adds	r1, r2, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4403      	add	r3, r0
 80027d2:	3350      	adds	r3, #80	@ 0x50
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4299      	cmp	r1, r3
 80027d8:	f200 8083 	bhi.w	80028e2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	440b      	add	r3, r1
 80027ee:	3348      	adds	r3, #72	@ 0x48
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	b292      	uxth	r2, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f001 f8eb 	bl	80039d2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	440b      	add	r3, r1
 800280a:	3348      	adds	r3, #72	@ 0x48
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	18d1      	adds	r1, r2, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4403      	add	r3, r0
 8002820:	3348      	adds	r3, #72	@ 0x48
 8002822:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	3354      	adds	r3, #84	@ 0x54
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	18d1      	adds	r1, r2, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4403      	add	r3, r0
 8002848:	3354      	adds	r3, #84	@ 0x54
 800284a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	0cdb      	lsrs	r3, r3, #19
 800285c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002860:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	440b      	add	r3, r1
 8002870:	3342      	adds	r3, #66	@ 0x42
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4293      	cmp	r3, r2
 800287a:	d13f      	bne.n	80028fc <HCD_RXQLVL_IRQHandler+0x1b4>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03c      	beq.n	80028fc <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002898:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	440b      	add	r3, r1
 80028c2:	3358      	adds	r3, #88	@ 0x58
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2d8      	uxtb	r0, r3
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	440b      	add	r3, r1
 80028da:	3358      	adds	r3, #88	@ 0x58
 80028dc:	4602      	mov	r2, r0
 80028de:	701a      	strb	r2, [r3, #0]
      break;
 80028e0:	e00c      	b.n	80028fc <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	440b      	add	r3, r1
 80028f0:	3364      	adds	r3, #100	@ 0x64
 80028f2:	2204      	movs	r2, #4
 80028f4:	701a      	strb	r2, [r3, #0]
      break;
 80028f6:	e001      	b.n	80028fc <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80028fc:	bf00      	nop
  }
}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	@ 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002932:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d10b      	bne.n	8002956 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f004 f97b 	bl	8006c44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b08      	cmp	r3, #8
 800295e:	d132      	bne.n	80029c6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d126      	bne.n	80029c0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d113      	bne.n	80029a2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002980:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002984:	d106      	bne.n	8002994 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2102      	movs	r1, #2
 800298c:	4618      	mov	r0, r3
 800298e:	f001 f96b 	bl	8003c68 <USB_InitFSLSPClkSel>
 8002992:	e011      	b.n	80029b8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f964 	bl	8003c68 <USB_InitFSLSPClkSel>
 80029a0:	e00a      	b.n	80029b8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029b0:	461a      	mov	r2, r3
 80029b2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80029b6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f004 f96c 	bl	8006c96 <HAL_HCD_PortEnabled_Callback>
 80029be:	e002      	b.n	80029c6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f004 f976 	bl	8006cb2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d103      	bne.n	80029d8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e304      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8087 	beq.w	8002b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0c:	4b92      	ldr	r3, [pc, #584]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d00c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a18:	4b8f      	ldr	r3, [pc, #572]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d112      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5e>
 8002a24:	4b8c      	ldr	r3, [pc, #560]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a30:	d10b      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a32:	4b89      	ldr	r3, [pc, #548]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x12c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d168      	bne.n	8002b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e2de      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x76>
 8002a54:	4b80      	ldr	r3, [pc, #512]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7f      	ldr	r2, [pc, #508]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e02e      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x98>
 8002a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b78      	ldr	r3, [pc, #480]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a77      	ldr	r2, [pc, #476]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xbc>
 8002a8e:	4b72      	ldr	r3, [pc, #456]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a71      	ldr	r2, [pc, #452]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b68      	ldr	r3, [pc, #416]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a67      	ldr	r2, [pc, #412]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fd ffe6 	bl	8000a98 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fd ffe2 	bl	8000a98 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e292      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe4>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fd ffd2 	bl	8000a98 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fd ffce 	bl	8000a98 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e27e      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x10c>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b26:	4b4c      	ldr	r3, [pc, #304]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b32:	4b49      	ldr	r3, [pc, #292]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x18c>
 8002b3e:	4b46      	ldr	r3, [pc, #280]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b43      	ldr	r3, [pc, #268]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x176>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e252      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4939      	ldr	r1, [pc, #228]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e03a      	b.n	8002bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fd ff87 	bl	8000a98 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fd ff83 	bl	8000a98 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e233      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4927      	ldr	r1, [pc, #156]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b26      	ldr	r3, [pc, #152]	@ (8002c5c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fd ff66 	bl	8000a98 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fd ff62 	bl	8000a98 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e212      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03a      	beq.n	8002c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d019      	beq.n	8002c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <HAL_RCC_OscConfig+0x274>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7fd ff46 	bl	8000a98 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fd ff42 	bl	8000a98 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1f2      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f000 fbd0 	bl	80033d4 <RCC_Delay>
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_RCC_OscConfig+0x274>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7fd ff2c 	bl	8000a98 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c42:	e00f      	b.n	8002c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fd ff28 	bl	8000a98 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d908      	bls.n	8002c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1d8      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	42420000 	.word	0x42420000
 8002c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	4b9b      	ldr	r3, [pc, #620]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e9      	bne.n	8002c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a6 	beq.w	8002dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b94      	ldr	r3, [pc, #592]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b91      	ldr	r3, [pc, #580]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a90      	ldr	r2, [pc, #576]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	61d3      	str	r3, [r2, #28]
 8002c9a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b8b      	ldr	r3, [pc, #556]	@ (8002ed8 <HAL_RCC_OscConfig+0x4ec>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b88      	ldr	r3, [pc, #544]	@ (8002ed8 <HAL_RCC_OscConfig+0x4ec>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a87      	ldr	r2, [pc, #540]	@ (8002ed8 <HAL_RCC_OscConfig+0x4ec>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fd fee9 	bl	8000a98 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fd fee5 	bl	8000a98 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	@ 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e195      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ed8 <HAL_RCC_OscConfig+0x4ec>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x312>
 8002cf0:	4b78      	ldr	r3, [pc, #480]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a77      	ldr	r2, [pc, #476]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	e02d      	b.n	8002d5a <HAL_RCC_OscConfig+0x36e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x334>
 8002d06:	4b73      	ldr	r3, [pc, #460]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a72      	ldr	r2, [pc, #456]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4b70      	ldr	r3, [pc, #448]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a6f      	ldr	r2, [pc, #444]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	e01c      	b.n	8002d5a <HAL_RCC_OscConfig+0x36e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x356>
 8002d28:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a69      	ldr	r2, [pc, #420]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	4b67      	ldr	r3, [pc, #412]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a66      	ldr	r2, [pc, #408]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e00b      	b.n	8002d5a <HAL_RCC_OscConfig+0x36e>
 8002d42:	4b64      	ldr	r3, [pc, #400]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a63      	ldr	r2, [pc, #396]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6213      	str	r3, [r2, #32]
 8002d4e:	4b61      	ldr	r3, [pc, #388]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a60      	ldr	r2, [pc, #384]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fd fe99 	bl	8000a98 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fe95 	bl	8000a98 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e143      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	4b54      	ldr	r3, [pc, #336]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCC_OscConfig+0x37e>
 8002d8c:	e014      	b.n	8002db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fd fe83 	bl	8000a98 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fd fe7f 	bl	8000a98 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e12d      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	4b49      	ldr	r3, [pc, #292]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b45      	ldr	r3, [pc, #276]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a44      	ldr	r2, [pc, #272]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 808c 	beq.w	8002eec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de0:	d10e      	bne.n	8002e00 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002de2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002dee:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e103      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d14e      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e08:	4b32      	ldr	r3, [pc, #200]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002e14:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0ef      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <HAL_RCC_OscConfig+0x4f0>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fd fe33 	bl	8000a98 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e36:	f7fd fe2f 	bl	8000a98 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	@ 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0df      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e48:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e60:	491c      	ldr	r1, [pc, #112]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	4918      	ldr	r1, [pc, #96]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002e78:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <HAL_RCC_OscConfig+0x4f0>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fd fe0b 	bl	8000a98 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e86:	f7fd fe07 	bl	8000a98 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	@ 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e0b7      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x49a>
 8002ea4:	e022      	b.n	8002eec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <HAL_RCC_OscConfig+0x4e8>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_RCC_OscConfig+0x4f0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd fdee 	bl	8000a98 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002ebe:	e00f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002ec0:	f7fd fdea 	bl	8000a98 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d908      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e09a      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e9      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8088 	beq.w	8003006 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef6:	4b46      	ldr	r3, [pc, #280]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d068      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d14d      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b42      	ldr	r3, [pc, #264]	@ (8003014 <HAL_RCC_OscConfig+0x628>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd fdc2 	bl	8000a98 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fd fdbe 	bl	8000a98 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e06e      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2a:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3e:	d10f      	bne.n	8002f60 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002f40:	4b33      	ldr	r3, [pc, #204]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4931      	ldr	r1, [pc, #196]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4e:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	492d      	ldr	r1, [pc, #180]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	430b      	orrs	r3, r1
 8002f72:	4927      	ldr	r1, [pc, #156]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b26      	ldr	r3, [pc, #152]	@ (8003014 <HAL_RCC_OscConfig+0x628>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd fd8b 	bl	8000a98 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fd fd87 	bl	8000a98 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e037      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x59a>
 8002fa4:	e02f      	b.n	8003006 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x628>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fd fd74 	bl	8000a98 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fd fd70 	bl	8000a98 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e020      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c8>
 8002fd2:	e018      	b.n	8003006 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e013      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_OscConfig+0x624>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	42420060 	.word	0x42420060

08003018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d0      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b6a      	ldr	r3, [pc, #424]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d910      	bls.n	800305c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b67      	ldr	r3, [pc, #412]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	4965      	ldr	r1, [pc, #404]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a58      	ldr	r2, [pc, #352]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800307e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a52      	ldr	r2, [pc, #328]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d040      	beq.n	8003138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d115      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e073      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b3d      	ldr	r3, [pc, #244]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4936      	ldr	r1, [pc, #216]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003108:	f7fd fcc6 	bl	8000a98 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fd fcc2 	bl	8000a98 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e053      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b27      	ldr	r3, [pc, #156]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d210      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4922      	ldr	r1, [pc, #136]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003192:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f821 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490a      	ldr	r1, [pc, #40]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	@ (80031e4 <HAL_RCC_ClockConfig+0x1cc>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <HAL_RCC_ClockConfig+0x1d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fc24 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40022000 	.word	0x40022000
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08008318 	.word	0x08008318
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b092      	sub	sp, #72	@ 0x48
 80031f2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f8:	2300      	movs	r3, #0
 80031fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031fc:	2300      	movs	r3, #0
 80031fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003200:	2300      	movs	r3, #0
 8003202:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	633b      	str	r3, [r7, #48]	@ 0x30
 800320c:	2300      	movs	r3, #0
 800320e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003210:	4b6b      	ldr	r3, [pc, #428]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d002      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x3a>
 8003220:	2b08      	cmp	r3, #8
 8003222:	d003      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x40>
 8003224:	e0c3      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003226:	4b67      	ldr	r3, [pc, #412]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800322a:	e0c3      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800322c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	4b64      	ldr	r3, [pc, #400]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800323a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80ac 	beq.w	800339e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003246:	4b5e      	ldr	r3, [pc, #376]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x1e0>)
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003254:	4b5a      	ldr	r3, [pc, #360]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 808c 	beq.w	800337a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003262:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	3301      	adds	r3, #1
 800326e:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003270:	4b53      	ldr	r3, [pc, #332]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3302      	adds	r3, #2
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	2200      	movs	r2, #0
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	627a      	str	r2, [r7, #36]	@ 0x24
 8003286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003288:	2200      	movs	r2, #0
 800328a:	4618      	mov	r0, r3
 800328c:	4611      	mov	r1, r2
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	fb00 f203 	mul.w	r2, r0, r3
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	fb03 f301 	mul.w	r3, r3, r1
 800329a:	4413      	add	r3, r2
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	fba2 4500 	umull	r4, r5, r2, r0
 80032a2:	442b      	add	r3, r5
 80032a4:	461d      	mov	r5, r3
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b8:	0150      	lsls	r0, r2, #5
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	ebb2 0a04 	subs.w	sl, r2, r4
 80032c2:	eb63 0b05 	sbc.w	fp, r3, r5
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032da:	ebb2 080a 	subs.w	r8, r2, sl
 80032de:	eb63 090b 	sbc.w	r9, r3, fp
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f6:	4690      	mov	r8, r2
 80032f8:	4699      	mov	r9, r3
 80032fa:	eb18 0304 	adds.w	r3, r8, r4
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	eb49 0305 	adc.w	r3, r9, r5
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003312:	4629      	mov	r1, r5
 8003314:	024b      	lsls	r3, r1, #9
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	4604      	mov	r4, r0
 800331c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003320:	4601      	mov	r1, r0
 8003322:	024a      	lsls	r2, r1, #9
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	2200      	movs	r2, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	617a      	str	r2, [r7, #20]
 8003330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003332:	2200      	movs	r2, #0
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	60fa      	str	r2, [r7, #12]
 8003338:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800333c:	4622      	mov	r2, r4
 800333e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003342:	4645      	mov	r5, r8
 8003344:	fb05 f202 	mul.w	r2, r5, r2
 8003348:	46cc      	mov	ip, r9
 800334a:	4625      	mov	r5, r4
 800334c:	461c      	mov	r4, r3
 800334e:	4623      	mov	r3, r4
 8003350:	fb03 f30c 	mul.w	r3, r3, ip
 8003354:	4413      	add	r3, r2
 8003356:	4622      	mov	r2, r4
 8003358:	4644      	mov	r4, r8
 800335a:	fba2 2404 	umull	r2, r4, r2, r4
 800335e:	61fc      	str	r4, [r7, #28]
 8003360:	61ba      	str	r2, [r7, #24]
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336c:	f7fc ff5a 	bl	8000224 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4613      	mov	r3, r2
 8003376:	647b      	str	r3, [r7, #68]	@ 0x44
 8003378:	e007      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800337a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800337e:	fb03 f202 	mul.w	r2, r3, r2
 8003382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800338a:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800338c:	7b5b      	ldrb	r3, [r3, #13]
 800338e:	461a      	mov	r2, r3
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	4293      	cmp	r3, r2
 8003394:	d108      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8003396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	647b      	str	r3, [r7, #68]	@ 0x44
 800339c:	e004      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800339e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a0:	4a0b      	ldr	r2, [pc, #44]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 80033a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033aa:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80033b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3748      	adds	r7, #72	@ 0x48
 80033ba:	46bd      	mov	sp, r7
 80033bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	007a1200 	.word	0x007a1200
 80033c8:	08008328 	.word	0x08008328
 80033cc:	08008338 	.word	0x08008338
 80033d0:	003d0900 	.word	0x003d0900

080033d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <RCC_Delay+0x34>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <RCC_Delay+0x38>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0a5b      	lsrs	r3, r3, #9
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f0:	bf00      	nop
  }
  while (Delay --);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	60fa      	str	r2, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f9      	bne.n	80033f0 <RCC_Delay+0x1c>
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000000 	.word	0x20000000
 800340c:	10624dd3 	.word	0x10624dd3

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d07d      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003434:	4b8b      	ldr	r3, [pc, #556]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4a87      	ldr	r2, [pc, #540]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344a:	61d3      	str	r3, [r2, #28]
 800344c:	4b85      	ldr	r3, [pc, #532]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003458:	2301      	movs	r3, #1
 800345a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b82      	ldr	r3, [pc, #520]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d118      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003468:	4b7f      	ldr	r3, [pc, #508]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a7e      	ldr	r2, [pc, #504]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003474:	f7fd fb10 	bl	8000a98 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	e008      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347c:	f7fd fb0c 	bl	8000a98 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	@ 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0e5      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b76      	ldr	r3, [pc, #472]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800349a:	4b72      	ldr	r3, [pc, #456]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02e      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d027      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c2:	4b6a      	ldr	r3, [pc, #424]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c8:	4b68      	ldr	r3, [pc, #416]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ce:	4a65      	ldr	r2, [pc, #404]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d014      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fd fadb 	bl	8000a98 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fd fad7 	bl	8000a98 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0ae      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b59      	ldr	r3, [pc, #356]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003508:	4b56      	ldr	r3, [pc, #344]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4953      	ldr	r1, [pc, #332]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003516:	4313      	orrs	r3, r2
 8003518:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4b50      	ldr	r3, [pc, #320]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	4a4f      	ldr	r2, [pc, #316]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003538:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4947      	ldr	r1, [pc, #284]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003556:	4b43      	ldr	r3, [pc, #268]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4940      	ldr	r1, [pc, #256]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003564:	4313      	orrs	r3, r2
 8003566:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003574:	4b3b      	ldr	r3, [pc, #236]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	4938      	ldr	r1, [pc, #224]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003582:	4313      	orrs	r3, r2
 8003584:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003586:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003592:	4b34      	ldr	r3, [pc, #208]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d148      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d138      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80035b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80035c0:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e042      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4920      	ldr	r1, [pc, #128]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80035e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	491c      	ldr	r1, [pc, #112]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80035f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7fd fa4b 	bl	8000a98 <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003606:	f7fd fa47 	bl	8000a98 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	@ 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e020      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003624:	e009      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003626:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	429a      	cmp	r2, r3
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e00f      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4904      	ldr	r1, [pc, #16]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	42420440 	.word	0x42420440
 8003670:	42420070 	.word	0x42420070

08003674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e076      	b.n	8003774 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003696:	d009      	beq.n	80036ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	61da      	str	r2, [r3, #28]
 800369e:	e005      	b.n	80036ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f842 	bl	8000750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	ea42 0103 	orr.w	r1, r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	0c1a      	lsrs	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f002 0204 	and.w	r2, r2, #4
 8003752:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003762:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800377c:	b084      	sub	sp, #16
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	f107 001c 	add.w	r0, r7, #28
 800378a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9b0 	bl	8003b00 <USB_CoreReset>
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	@ 0x38

  return ret;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037bc:	b004      	add	sp, #16
 80037be:	4770      	bx	lr

080037c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 0201 	bic.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d115      	bne.n	800384e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800382e:	2001      	movs	r0, #1
 8003830:	f7fd f93c 	bl	8000aac <HAL_Delay>
      ms++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f952 	bl	8003ae4 <USB_GetMode>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d01e      	beq.n	8003884 <USB_SetCurrentMode+0x84>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b31      	cmp	r3, #49	@ 0x31
 800384a:	d9f0      	bls.n	800382e <USB_SetCurrentMode+0x2e>
 800384c:	e01a      	b.n	8003884 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d115      	bne.n	8003880 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003860:	2001      	movs	r0, #1
 8003862:	f7fd f923 	bl	8000aac <HAL_Delay>
      ms++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3301      	adds	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f939 	bl	8003ae4 <USB_GetMode>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <USB_SetCurrentMode+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b31      	cmp	r3, #49	@ 0x31
 800387c:	d9f0      	bls.n	8003860 <USB_SetCurrentMode+0x60>
 800387e:	e001      	b.n	8003884 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e005      	b.n	8003890 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b32      	cmp	r3, #50	@ 0x32
 8003888:	d101      	bne.n	800388e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <USB_FlushTxFifo+0x64>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e01b      	b.n	80038f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	daf2      	bge.n	80038a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	019b      	lsls	r3, r3, #6
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a08      	ldr	r2, [pc, #32]	@ (80038fc <USB_FlushTxFifo+0x64>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e006      	b.n	80038f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d0f0      	beq.n	80038d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	00030d40 	.word	0x00030d40

08003900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <USB_FlushRxFifo+0x5c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e018      	b.n	8003950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	daf2      	bge.n	800390c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2210      	movs	r2, #16
 800392e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a08      	ldr	r2, [pc, #32]	@ (800395c <USB_FlushRxFifo+0x5c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e006      	b.n	8003950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d0f0      	beq.n	8003930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	00030d40 	.word	0x00030d40

08003960 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	@ 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4611      	mov	r1, r2
 800396c:	461a      	mov	r2, r3
 800396e:	460b      	mov	r3, r1
 8003970:	71fb      	strb	r3, [r7, #7]
 8003972:	4613      	mov	r3, r2
 8003974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800397e:	88bb      	ldrh	r3, [r7, #4]
 8003980:	3303      	adds	r3, #3
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e018      	b.n	80039be <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	031a      	lsls	r2, r3, #12
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4413      	add	r3, r2
 8003994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003998:	461a      	mov	r2, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6013      	str	r3, [r2, #0]
    pSrc++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3301      	adds	r3, #1
 80039b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	3301      	adds	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3e2      	bcc.n	800398c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3724      	adds	r7, #36	@ 0x24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b08b      	sub	sp, #44	@ 0x2c
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	4613      	mov	r3, r2
 80039de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	e014      	b.n	8003a28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	3301      	adds	r3, #1
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	3301      	adds	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	3301      	adds	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	3301      	adds	r3, #1
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3e6      	bcc.n	80039fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003a30:	8bfb      	ldrh	r3, [r7, #30]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01e      	beq.n	8003a74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a40:	461a      	mov	r2, r3
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	701a      	strb	r2, [r3, #0]
      i++;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	623b      	str	r3, [r7, #32]
      pDest++;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	3301      	adds	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003a68:	8bfb      	ldrh	r3, [r7, #30]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003a6e:	8bfb      	ldrh	r3, [r7, #30]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ea      	bne.n	8003a4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	372c      	adds	r7, #44	@ 0x2c
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0301 	and.w	r3, r3, #1
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
	...

08003b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <USB_CoreReset+0x60>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e01b      	b.n	8003b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	daf2      	bge.n	8003b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <USB_CoreReset+0x60>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e006      	b.n	8003b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d0f0      	beq.n	8003b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	00030d40 	.word	0x00030d40

08003b64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b64:	b084      	sub	sp, #16
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b84:	461a      	mov	r2, r3
 8003b86:	2300      	movs	r3, #0
 8003b88:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fe6d 	bl	8003898 <USB_FlushTxFifo>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fe99 	bl	8003900 <USB_FlushRxFifo>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e015      	b.n	8003c0a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2300      	movs	r3, #0
 8003c02:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	3301      	adds	r3, #1
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3e5      	bcc.n	8003bde <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2280      	movs	r2, #128	@ 0x80
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a0c      	ldr	r2, [pc, #48]	@ (8003c5c <USB_HostInit+0xf8>)
 8003c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c60 <USB_HostInit+0xfc>)
 8003c30:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f043 0210 	orr.w	r2, r3, #16
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	4b07      	ldr	r3, [pc, #28]	@ (8003c64 <USB_HostInit+0x100>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c58:	b004      	add	sp, #16
 8003c5a:	4770      	bx	lr
 8003c5c:	00600080 	.word	0x00600080
 8003c60:	004000e0 	.word	0x004000e0
 8003c64:	a3200008 	.word	0xa3200008

08003c68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003cb6:	6053      	str	r3, [r2, #4]
 8003cb8:	e00c      	b.n	8003cd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d107      	bne.n	8003cd0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8003ccc:	6053      	str	r3, [r2, #4]
 8003cce:	e001      	b.n	8003cd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003d00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003d10:	2064      	movs	r0, #100	@ 0x64
 8003d12:	f7fc fecb 	bl	8000aac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8003d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003d24:	200a      	movs	r0, #10
 8003d26:	f7fc fec1 	bl	8000aac <HAL_Delay>

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003d58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <USB_DriveVbus+0x44>
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8003d72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d82:	d109      	bne.n	8003d98 <USB_DriveVbus+0x64>
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8003d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	0c5b      	lsrs	r3, r3, #17
 8003dc2:	f003 0303 	and.w	r3, r3, #3
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	b29b      	uxth	r3, r3
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	70fb      	strb	r3, [r7, #3]
 8003e02:	460b      	mov	r3, r1
 8003e04:	70bb      	strb	r3, [r7, #2]
 8003e06:	4613      	mov	r3, r2
 8003e08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003e26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d867      	bhi.n	8003efe <USB_HC_Init+0x10e>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <USB_HC_Init+0x44>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003ec1 	.word	0x08003ec1
 8003e3c:	08003e45 	.word	0x08003e45
 8003e40:	08003e83 	.word	0x08003e83
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e50:	461a      	mov	r2, r3
 8003e52:	f240 439d 	movw	r3, #1181	@ 0x49d
 8003e56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003e58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da51      	bge.n	8003f04 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003e80:	e040      	b.n	8003f04 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f240 639d 	movw	r3, #1693	@ 0x69d
 8003e94:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003e96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da34      	bge.n	8003f08 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebc:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003ebe:	e023      	b.n	8003f08 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f240 2325 	movw	r3, #549	@ 0x225
 8003ed2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003ed4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	da17      	bge.n	8003f0c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ef6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8003efa:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003efc:	e006      	b.n	8003f0c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	77fb      	strb	r3, [r7, #31]
      break;
 8003f02:	e004      	b.n	8003f0e <USB_HC_Init+0x11e>
      break;
 8003f04:	bf00      	nop
 8003f06:	e002      	b.n	8003f0e <USB_HC_Init+0x11e>
      break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <USB_HC_Init+0x11e>
      break;
 8003f0c:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	6939      	ldr	r1, [r7, #16]
 8003f44:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003f58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da03      	bge.n	8003f68 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003f60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e001      	b.n	8003f6c <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff19 	bl	8003da4 <USB_GetHostSpeed>
 8003f72:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003f74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d106      	bne.n	8003f8a <USB_HC_Init+0x19a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d003      	beq.n	8003f8a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e001      	b.n	8003f8e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003f8e:	787b      	ldrb	r3, [r7, #1]
 8003f90:	059b      	lsls	r3, r3, #22
 8003f92:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003f96:	78bb      	ldrb	r3, [r7, #2]
 8003f98:	02db      	lsls	r3, r3, #11
 8003f9a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003f9e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003fa0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003fa4:	049b      	lsls	r3, r3, #18
 8003fa6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003faa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8003fac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003fb2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8003fc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003fcc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8003fce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d003      	beq.n	8003fde <USB_HC_Init+0x1ee>
 8003fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10f      	bne.n	8003ffe <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ff8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ffc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	785b      	ldrb	r3, [r3, #1]
 800401a:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800401c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004020:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d018      	beq.n	800405c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	8952      	ldrh	r2, [r2, #10]
 8004032:	4413      	add	r3, r2
 8004034:	3b01      	subs	r3, #1
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	8952      	ldrh	r2, [r2, #10]
 800403a:	fbb3 f3f2 	udiv	r3, r3, r2
 800403e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8004040:	8bfa      	ldrh	r2, [r7, #30]
 8004042:	8a7b      	ldrh	r3, [r7, #18]
 8004044:	429a      	cmp	r2, r3
 8004046:	d90b      	bls.n	8004060 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8004048:	8a7b      	ldrh	r3, [r7, #18]
 800404a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800404c:	8bfb      	ldrh	r3, [r7, #30]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	8952      	ldrh	r2, [r2, #10]
 8004052:	fb03 f202 	mul.w	r2, r3, r2
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	e001      	b.n	8004060 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	78db      	ldrb	r3, [r3, #3]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004068:	8bfb      	ldrh	r3, [r7, #30]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	8952      	ldrh	r2, [r2, #10]
 800406e:	fb03 f202 	mul.w	r2, r3, r2
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	615a      	str	r2, [r3, #20]
 8004076:	e003      	b.n	8004080 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004088:	8bfb      	ldrh	r3, [r7, #30]
 800408a:	04d9      	lsls	r1, r3, #19
 800408c:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <USB_HC_StartXfer+0x1ec>)
 800408e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004090:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	7b1b      	ldrb	r3, [r3, #12]
 8004096:	075b      	lsls	r3, r3, #29
 8004098:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	0148      	lsls	r0, r1, #5
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	4401      	add	r1, r0
 80040a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80040a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80040aa:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80040e2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	7c7b      	ldrb	r3, [r7, #17]
 80040f4:	075b      	lsls	r3, r3, #29
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	0148      	lsls	r0, r1, #5
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	4401      	add	r1, r0
 80040fe:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800411c:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	78db      	ldrb	r3, [r3, #3]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	e003      	b.n	8004138 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004136:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800413e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d147      	bne.n	80041ea <USB_HC_StartXfer+0x1e2>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d043      	beq.n	80041ea <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	7a1b      	ldrb	r3, [r3, #8]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d830      	bhi.n	80041cc <USB_HC_StartXfer+0x1c4>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <USB_HC_StartXfer+0x168>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004181 	.word	0x08004181
 8004174:	080041a5 	.word	0x080041a5
 8004178:	08004181 	.word	0x08004181
 800417c:	080041a5 	.word	0x080041a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	3303      	adds	r3, #3
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800418a:	89fa      	ldrh	r2, [r7, #14]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	b29b      	uxth	r3, r3
 8004192:	429a      	cmp	r2, r3
 8004194:	d91c      	bls.n	80041d0 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80041a2:	e015      	b.n	80041d0 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	3303      	adds	r3, #3
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80041ae:	89fa      	ldrh	r2, [r7, #14]
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d90a      	bls.n	80041d4 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80041ca:	e003      	b.n	80041d4 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <USB_HC_StartXfer+0x1ce>
        break;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <USB_HC_StartXfer+0x1ce>
        break;
 80041d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6919      	ldr	r1, [r3, #16]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	785a      	ldrb	r2, [r3, #1]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fbbb 	bl	8003960 <USB_WritePacket>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	1ff80000 	.word	0x1ff80000

080041f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	b29b      	uxth	r3, r3
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	@ 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	0c9b      	lsrs	r3, r3, #18
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0fdb      	lsrs	r3, r3, #31
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	0fdb      	lsrs	r3, r3, #31
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d10d      	bne.n	800429a <USB_HC_Halt+0x82>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <USB_HC_Halt+0x82>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d002      	beq.n	8004296 <USB_HC_Halt+0x7e>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d101      	bne.n	800429a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e0d8      	b.n	800444c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <USB_HC_Halt+0x8e>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d173      	bne.n	800438e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042c4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d14a      	bne.n	8004368 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d133      	bne.n	8004346 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	440a      	add	r2, r1
 8004314:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004318:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800431c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800432a:	d82e      	bhi.n	800438a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800433e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004342:	d0ec      	beq.n	800431e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004344:	e081      	b.n	800444a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004360:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004364:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004366:	e070      	b.n	800444a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	440a      	add	r2, r1
 800437e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004382:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004386:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004388:	e05f      	b.n	800444a <USB_HC_Halt+0x232>
            break;
 800438a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800438c:	e05d      	b.n	800444a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043ac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d133      	bne.n	8004426 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043fc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3301      	adds	r3, #1
 8004402:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800440a:	d81d      	bhi.n	8004448 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800441e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004422:	d0ec      	beq.n	80043fe <USB_HC_Halt+0x1e6>
 8004424:	e011      	b.n	800444a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	440a      	add	r2, r1
 800443c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004440:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e000      	b.n	800444a <USB_HC_Halt+0x232>
          break;
 8004448:	bf00      	nop
    }
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3724      	adds	r7, #36	@ 0x24
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b088      	sub	sp, #32
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff f9b8 	bl	80037e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004470:	2110      	movs	r1, #16
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fa10 	bl	8003898 <USB_FlushTxFifo>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fa3c 	bl	8003900 <USB_FlushRxFifo>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e01f      	b.n	80044d8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044ae:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044b6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044be:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044cc:	461a      	mov	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d9dc      	bls.n	8004498 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e034      	b.n	800454e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044fa:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800450a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004518:	461a      	mov	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800452a:	d80c      	bhi.n	8004546 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800453e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004542:	d0ec      	beq.n	800451e <USB_StopHost+0xc8>
 8004544:	e000      	b.n	8004548 <USB_StopHost+0xf2>
        break;
 8004546:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	3301      	adds	r3, #1
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b0f      	cmp	r3, #15
 8004552:	d9c7      	bls.n	80044e4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800455a:	461a      	mov	r2, r3
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
 8004560:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f928 	bl	80037c0 <USB_EnableGlobalInt>

  return ret;
 8004570:	7ffb      	ldrb	r3, [r7, #31]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b08b      	sub	sp, #44	@ 0x2c
 8004580:	af04      	add	r7, sp, #16
 8004582:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 800458e:	7919      	ldrb	r1, [r3, #4]
 8004590:	23ff      	movs	r3, #255	@ 0xff
 8004592:	2201      	movs	r2, #1
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 f8a7 	bl	80056e8 <USBH_FindInterface>
 800459a:	4603      	mov	r3, r0
 800459c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800459e:	7dbb      	ldrb	r3, [r7, #22]
 80045a0:	2bff      	cmp	r3, #255	@ 0xff
 80045a2:	d002      	beq.n	80045aa <USBH_HID_InterfaceInit+0x2e>
 80045a4:	7dbb      	ldrb	r3, [r7, #22]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d90f      	bls.n	80045ca <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 80045aa:	489c      	ldr	r0, [pc, #624]	@ (800481c <USBH_HID_InterfaceInit+0x2a0>)
 80045ac:	f002 fedc 	bl	8007368 <iprintf>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	4899      	ldr	r0, [pc, #612]	@ (8004820 <USBH_HID_InterfaceInit+0x2a4>)
 80045bc:	f002 fed4 	bl	8007368 <iprintf>
 80045c0:	200a      	movs	r0, #10
 80045c2:	f002 fee3 	bl	800738c <putchar>
    return USBH_FAIL;
 80045c6:	2302      	movs	r3, #2
 80045c8:	e123      	b.n	8004812 <USBH_HID_InterfaceInit+0x296>
  }

  status = USBH_SelectInterface(phost, interface);
 80045ca:	7dbb      	ldrb	r3, [r7, #22]
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 f822 	bl	8005618 <USBH_SelectInterface>
 80045d4:	4603      	mov	r3, r0
 80045d6:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80045d8:	7d7b      	ldrb	r3, [r7, #21]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 80045de:	2302      	movs	r3, #2
 80045e0:	e117      	b.n	8004812 <USBH_HID_InterfaceInit+0x296>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 4378 	ldr.w	r4, [r3, #888]	@ 0x378
 80045e8:	2034      	movs	r0, #52	@ 0x34
 80045ea:	f002 fd3d 	bl	8007068 <malloc>
 80045ee:	4603      	mov	r3, r0
 80045f0:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8004602:	4886      	ldr	r0, [pc, #536]	@ (800481c <USBH_HID_InterfaceInit+0x2a0>)
 8004604:	f002 feb0 	bl	8007368 <iprintf>
 8004608:	4886      	ldr	r0, [pc, #536]	@ (8004824 <USBH_HID_InterfaceInit+0x2a8>)
 800460a:	f002 fead 	bl	8007368 <iprintf>
 800460e:	200a      	movs	r0, #10
 8004610:	f002 febc 	bl	800738c <putchar>
    return USBH_FAIL;
 8004614:	2302      	movs	r3, #2
 8004616:	e0fc      	b.n	8004812 <USBH_HID_InterfaceInit+0x296>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8004618:	2234      	movs	r2, #52	@ 0x34
 800461a:	2100      	movs	r1, #0
 800461c:	6938      	ldr	r0, [r7, #16]
 800461e:	f002 ff00 	bl	8007422 <memset>

  HID_Handle->state = HID_ERROR;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2207      	movs	r2, #7
 8004626:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004628:	7dbb      	ldrb	r3, [r7, #22]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	211a      	movs	r1, #26
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d109      	bne.n	8004652 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800463e:	487a      	ldr	r0, [pc, #488]	@ (8004828 <USBH_HID_InterfaceInit+0x2ac>)
 8004640:	f002 fe92 	bl	8007368 <iprintf>
 8004644:	200a      	movs	r0, #10
 8004646:	f002 fea1 	bl	800738c <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4a77      	ldr	r2, [pc, #476]	@ (800482c <USBH_HID_InterfaceInit+0x2b0>)
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004650:	e01c      	b.n	800468c <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8004652:	7dbb      	ldrb	r3, [r7, #22]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	211a      	movs	r1, #26
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d109      	bne.n	800467c <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 8004668:	4871      	ldr	r0, [pc, #452]	@ (8004830 <USBH_HID_InterfaceInit+0x2b4>)
 800466a:	f002 fe7d 	bl	8007368 <iprintf>
 800466e:	200a      	movs	r0, #10
 8004670:	f002 fe8c 	bl	800738c <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4a6f      	ldr	r2, [pc, #444]	@ (8004834 <USBH_HID_InterfaceInit+0x2b8>)
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
 800467a:	e007      	b.n	800468c <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800467c:	486e      	ldr	r0, [pc, #440]	@ (8004838 <USBH_HID_InterfaceInit+0x2bc>)
 800467e:	f002 fe73 	bl	8007368 <iprintf>
 8004682:	200a      	movs	r0, #10
 8004684:	f002 fe82 	bl	800738c <putchar>
    return USBH_FAIL;
 8004688:	2302      	movs	r3, #2
 800468a:	e0c2      	b.n	8004812 <USBH_HID_InterfaceInit+0x296>
  }

  HID_Handle->state     = HID_INIT;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2200      	movs	r2, #0
 8004690:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2200      	movs	r2, #0
 8004696:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004698:	7dbb      	ldrb	r3, [r7, #22]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	211a      	movs	r1, #26
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80046ae:	7dbb      	ldrb	r3, [r7, #22]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	211a      	movs	r1, #26
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80046be:	881a      	ldrh	r2, [r3, #0]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80046c4:	7dbb      	ldrb	r3, [r7, #22]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	211a      	movs	r1, #26
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	8b9b      	ldrh	r3, [r3, #28]
 80046e0:	2b09      	cmp	r3, #9
 80046e2:	d802      	bhi.n	80046ea <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	220a      	movs	r2, #10
 80046e8:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80046ea:	7dbb      	ldrb	r3, [r7, #22]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	211a      	movs	r1, #26
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	bf28      	it	cs
 8004700:	2302      	movcs	r3, #2
 8004702:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004704:	2300      	movs	r3, #0
 8004706:	75fb      	strb	r3, [r7, #23]
 8004708:	e07d      	b.n	8004806 <USBH_HID_InterfaceInit+0x28a>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 800470a:	7dbb      	ldrb	r3, [r7, #22]
 800470c:	7df9      	ldrb	r1, [r7, #23]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	3101      	adds	r1, #1
 8004712:	00c9      	lsls	r1, r1, #3
 8004714:	201a      	movs	r0, #26
 8004716:	fb00 f303 	mul.w	r3, r0, r3
 800471a:	440b      	add	r3, r1
 800471c:	4413      	add	r3, r2
 800471e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b25b      	sxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	da35      	bge.n	8004796 <USBH_HID_InterfaceInit+0x21a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800472a:	7dbb      	ldrb	r3, [r7, #22]
 800472c:	7df9      	ldrb	r1, [r7, #23]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	3101      	adds	r1, #1
 8004732:	00c9      	lsls	r1, r1, #3
 8004734:	201a      	movs	r0, #26
 8004736:	fb00 f303 	mul.w	r3, r0, r3
 800473a:	440b      	add	r3, r1
 800473c:	4413      	add	r3, r2
 800473e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	791b      	ldrb	r3, [r3, #4]
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f002 f98d 	bl	8006a6e <USBH_AllocPipe>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	7859      	ldrb	r1, [r3, #1]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	7918      	ldrb	r0, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	8b12      	ldrh	r2, [r2, #24]
 8004774:	9202      	str	r2, [sp, #8]
 8004776:	2203      	movs	r2, #3
 8004778:	9201      	str	r2, [sp, #4]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	4623      	mov	r3, r4
 800477e:	4602      	mov	r2, r0
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f002 f945 	bl	8006a10 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2200      	movs	r2, #0
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f002 fc01 	bl	8006f96 <USBH_LL_SetToggle>
 8004794:	e034      	b.n	8004800 <USBH_HID_InterfaceInit+0x284>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004796:	7dbb      	ldrb	r3, [r7, #22]
 8004798:	7df9      	ldrb	r1, [r7, #23]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	3101      	adds	r1, #1
 800479e:	00c9      	lsls	r1, r1, #3
 80047a0:	201a      	movs	r0, #26
 80047a2:	fb00 f303 	mul.w	r3, r0, r3
 80047a6:	440b      	add	r3, r1
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	78db      	ldrb	r3, [r3, #3]
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 f957 	bl	8006a6e <USBH_AllocPipe>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	7819      	ldrb	r1, [r3, #0]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	78d8      	ldrb	r0, [r3, #3]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	8b12      	ldrh	r2, [r2, #24]
 80047e0:	9202      	str	r2, [sp, #8]
 80047e2:	2203      	movs	r2, #3
 80047e4:	9201      	str	r2, [sp, #4]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4623      	mov	r3, r4
 80047ea:	4602      	mov	r2, r0
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f002 f90f 	bl	8006a10 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f002 fbcb 	bl	8006f96 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	3301      	adds	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
 8004806:	7dfa      	ldrb	r2, [r7, #23]
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	429a      	cmp	r2, r3
 800480c:	f4ff af7d 	bcc.w	800470a <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}
 800481a:	bf00      	nop
 800481c:	08007f90 	.word	0x08007f90
 8004820:	08007f9c 	.word	0x08007f9c
 8004824:	08007fc4 	.word	0x08007fc4
 8004828:	08007fec 	.word	0x08007fec
 800482c:	08004f7d 	.word	0x08004f7d
 8004830:	08008004 	.word	0x08008004
 8004834:	080051cd 	.word	0x080051cd
 8004838:	08008018 	.word	0x08008018

0800483c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00e      	beq.n	8004874 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	785b      	ldrb	r3, [r3, #1]
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f002 f8f6 	bl	8006a4e <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f002 f920 	bl	8006aae <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f002 f8e3 	bl	8006a4e <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f002 f90d 	bl	8006aae <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f002 fbe2 	bl	8007078 <free>
    phost->pActiveClass->pData = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	795b      	ldrb	r3, [r3, #5]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d858      	bhi.n	800499c <USBH_HID_ClassRequest+0xd4>
 80048ea:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <USBH_HID_ClassRequest+0x28>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004909 	.word	0x08004909
 80048f4:	0800499d 	.word	0x0800499d
 80048f8:	08004933 	.word	0x08004933
 80048fc:	08004909 	.word	0x08004909
 8004900:	0800494d 	.word	0x0800494d
 8004904:	08004977 	.word	0x08004977
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      /* Get HID Desc */
      if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE) == USBH_OK)
 8004908:	2109      	movs	r1, #9
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f951 	bl	8004bb2 <USBH_HID_GetHIDDescriptor>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d144      	bne.n	80049a0 <USBH_HID_ClassRequest+0xd8>
      {

        USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 f9d7 	bl	8004cd8 <USBH_HID_ParseHIDDesc>
        HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2202      	movs	r2, #2
 800492e:	715a      	strb	r2, [r3, #5]
      }

      break;
 8004930:	e036      	b.n	80049a0 <USBH_HID_ClassRequest+0xd8>
    case HID_REQ_GET_REPORT_DESC:


      /* Get Report Desc */
      if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f921 	bl	8004b80 <USBH_HID_GetHIDReportDescriptor>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d12f      	bne.n	80049a4 <USBH_HID_ClassRequest+0xdc>
      {
        /* The descriptor is available in phost->device.Data */

        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2204      	movs	r2, #4
 8004948:	715a      	strb	r2, [r3, #5]
      }

      break;
 800494a:	e02b      	b.n	80049a4 <USBH_HID_ClassRequest+0xdc>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	2100      	movs	r1, #0
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f947 	bl	8004be4 <USBH_HID_SetIdle>
 8004956:	4603      	mov	r3, r0
 8004958:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2205      	movs	r2, #5
 8004964:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8004966:	e01f      	b.n	80049a8 <USBH_HID_ClassRequest+0xe0>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d11c      	bne.n	80049a8 <USBH_HID_ClassRequest+0xe0>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2205      	movs	r2, #5
 8004972:	715a      	strb	r2, [r3, #5]
      break;
 8004974:	e018      	b.n	80049a8 <USBH_HID_ClassRequest+0xe0>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      if (USBH_HID_SetProtocol(phost, 0U) == USBH_OK)
 8004976:	2100      	movs	r1, #0
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f987 	bl	8004c8c <USBH_HID_SetProtocol>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d113      	bne.n	80049ac <USBH_HID_ClassRequest+0xe4>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2201      	movs	r2, #1
 8004988:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8004990:	2102      	movs	r1, #2
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
        status = USBH_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499a:	e007      	b.n	80049ac <USBH_HID_ClassRequest+0xe4>

    case HID_REQ_IDLE:
    default:
      break;
 800499c:	bf00      	nop
 800499e:	e006      	b.n	80049ae <USBH_HID_ClassRequest+0xe6>
      break;
 80049a0:	bf00      	nop
 80049a2:	e004      	b.n	80049ae <USBH_HID_ClassRequest+0xe6>
      break;
 80049a4:	bf00      	nop
 80049a6:	e002      	b.n	80049ae <USBH_HID_ClassRequest+0xe6>
      break;
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <USBH_HID_ClassRequest+0xe6>
      break;
 80049ac:	bf00      	nop
  }

  return status;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	789b      	ldrb	r3, [r3, #2]
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	f200 80a9 	bhi.w	8004b2a <USBH_HID_Process+0x172>
 80049d8:	a201      	add	r2, pc, #4	@ (adr r2, 80049e0 <USBH_HID_Process+0x28>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004b2b 	.word	0x08004b2b
 80049ec:	08004b2b 	.word	0x08004b2b
 80049f0:	08004a7d 	.word	0x08004a7d
 80049f4:	08004a67 	.word	0x08004a67
 80049f8:	08004aab 	.word	0x08004aab
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2201      	movs	r2, #1
 8004a08:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004a0a:	e093      	b.n	8004b34 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	8b1b      	ldrh	r3, [r3, #24]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f908 	bl	8004c34 <USBH_HID_GetReport>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2205      	movs	r2, #5
 8004a32:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004a34:	e07e      	b.n	8004b34 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
      break;
 8004a46:	e075      	b.n	8004b34 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d105      	bne.n	8004a5a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2205      	movs	r2, #5
 8004a52:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
      break;
 8004a58:	e06c      	b.n	8004b34 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8004a60:	2302      	movs	r3, #2
 8004a62:	75fb      	strb	r3, [r7, #23]
      break;
 8004a64:	e066      	b.n	8004b34 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05c      	beq.n	8004b2e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2204      	movs	r2, #4
 8004a78:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004a7a:	e058      	b.n	8004b2e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 ffa1 	bl	80069d2 <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2206      	movs	r2, #6
 8004a94:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 23c0 	ldr.w	r2, [r3, #960]	@ 0x3c0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 8004aa8:	e044      	b.n	8004b34 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f002 fa4f 	bl	8006f54 <USBH_LL_GetURBState>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d120      	bne.n	8004afe <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f002 f9b4 	bl	8006e30 <USBH_LL_GetLastXferSize>
 8004ac8:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d12e      	bne.n	8004b32 <USBH_HID_Process+0x17a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02b      	beq.n	8004b32 <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f103 0008 	add.w	r0, r3, #8
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	6959      	ldr	r1, [r3, #20]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	8b1b      	ldrh	r3, [r3, #24]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f000 f9b9 	bl	8004e60 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa06 	bl	8004f08 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8004afc:	e019      	b.n	8004b32 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f002 fa25 	bl	8006f54 <USBH_LL_GetURBState>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d110      	bne.n	8004b32 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	7e9b      	ldrb	r3, [r3, #26]
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 fb69 	bl	80061ee <USBH_ClrFeature>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2204      	movs	r2, #4
 8004b26:	709a      	strb	r2, [r3, #2]
      break;
 8004b28:	e003      	b.n	8004b32 <USBH_HID_Process+0x17a>

    default:
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <USBH_HID_Process+0x17c>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <USBH_HID_Process+0x17c>
      break;
 8004b32:	bf00      	nop
  }

  return status;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	789b      	ldrb	r3, [r3, #2]
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d10c      	bne.n	8004b74 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 23c0 	ldr.w	r2, [r3, #960]	@ 0x3c0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	8b92      	ldrh	r2, [r2, #28]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d302      	bcc.n	8004b74 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2204      	movs	r2, #4
 8004b72:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 fa85 	bl	80060ae <USBH_GetDescriptor>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
                                             uint16_t length)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af02      	add	r7, sp, #8
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID,
                              phost->device.Data,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	f44f 5204 	mov.w	r2, #8448	@ 0x2100
 8004bce:	2101      	movs	r1, #1
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 fa6c 	bl	80060ae <USBH_GetDescriptor>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	73fb      	strb	r3, [r7, #15]
                              length);

  return status;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2221      	movs	r2, #33	@ 0x21
 8004bf8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	78bb      	ldrb	r3, [r7, #2]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fcb6 	bl	8006596 <USBH_CtlReq>
 8004c2a:	4603      	mov	r3, r0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	72fb      	strb	r3, [r7, #11]
 8004c42:	4613      	mov	r3, r2
 8004c44:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	22a1      	movs	r2, #161	@ 0xa1
 8004c4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	7abb      	ldrb	r3, [r7, #10]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8004c6c:	7e3b      	ldrb	r3, [r7, #24]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8004c74:	7e3b      	ldrb	r3, [r7, #24]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f001 fc8a 	bl	8006596 <USBH_CtlReq>
 8004c82:	4603      	mov	r3, r0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2221      	movs	r2, #33	@ 0x21
 8004c9c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	220b      	movs	r2, #11
 8004ca2:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	825a      	strh	r2, [r3, #18]
 8004cb0:	e002      	b.n	8004cb8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 fc64 	bl	8006596 <USBH_CtlReq>
 8004cce:	4603      	mov	r3, r0

}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]

  desc->bLength                  = *(uint8_t *)(buf + 0);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t *)(buf + 1);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	785a      	ldrb	r2, [r3, #1]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16(buf + 2);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	3303      	adds	r3, #3
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	4313      	orrs	r3, r2
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t *)(buf + 4);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	791a      	ldrb	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t *)(buf + 5);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	795a      	ldrb	r2, [r3, #5]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t *)(buf + 6);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	799a      	ldrb	r2, [r3, #6]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16(buf + 7);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	3307      	adds	r3, #7
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4313      	orrs	r3, r2
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	811a      	strh	r2, [r3, #8]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8004d50:	23ff      	movs	r3, #255	@ 0xff
 8004d52:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b0b      	cmp	r3, #11
 8004d5c:	d117      	bne.n	8004d8e <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8004d64:	4619      	mov	r1, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	231a      	movs	r3, #26
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004d78:	7bbb      	ldrb	r3, [r7, #14]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d102      	bne.n	8004d84 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	e004      	b.n	8004d8e <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d101      	bne.n	8004d8e <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	4613      	mov	r3, r2
 8004da6:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	7a9b      	ldrb	r3, [r3, #10]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d131      	bne.n	8004e4e <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	82fb      	strh	r3, [r7, #22]
 8004df4:	e027      	b.n	8004e46 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88da      	ldrh	r2, [r3, #6]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	889b      	ldrh	r3, [r3, #4]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d019      	beq.n	8004e36 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	88d2      	ldrh	r2, [r2, #6]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	6139      	str	r1, [r7, #16]
 8004e12:	7812      	ldrb	r2, [r2, #0]
 8004e14:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88db      	ldrh	r3, [r3, #6]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	88da      	ldrh	r2, [r3, #6]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	891b      	ldrh	r3, [r3, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d108      	bne.n	8004e40 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	80da      	strh	r2, [r3, #6]
 8004e34:	e004      	b.n	8004e40 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	729a      	strb	r2, [r3, #10]
        return i;
 8004e3c:	8afb      	ldrh	r3, [r7, #22]
 8004e3e:	e00a      	b.n	8004e56 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8004e40:	8afb      	ldrh	r3, [r7, #22]
 8004e42:	3301      	adds	r3, #1
 8004e44:	82fb      	strh	r3, [r7, #22]
 8004e46:	8afa      	ldrh	r2, [r7, #22]
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3d3      	bcc.n	8004df6 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8004e54:	88fb      	ldrh	r3, [r7, #6]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	7a9b      	ldrb	r3, [r3, #10]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d13c      	bne.n	8004ef4 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8004e80:	2300      	movs	r3, #0
 8004e82:	82fb      	strh	r3, [r7, #22]
 8004e84:	e032      	b.n	8004eec <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	889b      	ldrh	r3, [r3, #4]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	88d2      	ldrh	r2, [r2, #6]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00a      	beq.n	8004eaa <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	889b      	ldrh	r3, [r3, #4]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	729a      	strb	r2, [r3, #10]
        return i;
 8004eb0:	8afb      	ldrh	r3, [r7, #22]
 8004eb2:	e023      	b.n	8004efc <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	613a      	str	r2, [r7, #16]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	8889      	ldrh	r1, [r1, #4]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	7013      	strb	r3, [r2, #0]
        f->head++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	889b      	ldrh	r3, [r3, #4]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	889a      	ldrh	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	891b      	ldrh	r3, [r3, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d102      	bne.n	8004ee6 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8004ee6:	8afb      	ldrh	r3, [r7, #22]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	82fb      	strh	r3, [r7, #22]
 8004eec:	8afa      	ldrh	r2, [r7, #22]
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3c8      	bcc.n	8004e86 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8004efa:	88fb      	ldrh	r3, [r7, #6]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
	...

08004f08 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)  // if the HID is Mouse
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff19 	bl	8004d48 <USBH_HID_GetDeviceType>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d115      	bne.n	8004f48 <USBH_HID_EventCallback+0x40>
  {
    HID_MOUSE_Info_TypeDef *Mouse_Info;
    Mouse_Info = USBH_HID_GetMouseInfo(phost);  // Get the info
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f99f 	bl	8005260 <USBH_HID_GetMouseInfo>
 8004f22:	61f8      	str	r0, [r7, #28]
    int X_Val = Mouse_Info->x;  // get the x value
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	61bb      	str	r3, [r7, #24]
    int Y_Val = Mouse_Info->y;  // get the y value
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	617b      	str	r3, [r7, #20]
    if (X_Val > 127) X_Val -= 255;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f34:	dd02      	ble.n	8004f3c <USBH_HID_EventCallback+0x34>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	3bff      	subs	r3, #255	@ 0xff
 8004f3a:	61bb      	str	r3, [r7, #24]
    if (Y_Val > 127) Y_Val -= 255;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f40:	dd02      	ble.n	8004f48 <USBH_HID_EventCallback+0x40>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	3bff      	subs	r3, #255	@ 0xff
 8004f46:	617b      	str	r3, [r7, #20]
  }

  if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD)  // if the HID is Mouse
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fefd 	bl	8004d48 <USBH_HID_GetDeviceType>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d10c      	bne.n	8004f6e <USBH_HID_EventCallback+0x66>
  {
    uint8_t key;
    HID_KEYBD_Info_TypeDef *Keyboard_Info;
    Keyboard_Info = USBH_HID_GetKeybdInfo(phost);  // get the info
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f869 	bl	800502c <USBH_HID_GetKeybdInfo>
 8004f5a:	6138      	str	r0, [r7, #16]
    key = USBH_HID_GetASCIICode(Keyboard_Info);  // get the key presse
 8004f5c:	6938      	ldr	r0, [r7, #16]
 8004f5e:	f000 f909 	bl	8005174 <USBH_HID_GetASCIICode>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_1);
 8004f66:	2102      	movs	r1, #2
 8004f68:	4803      	ldr	r0, [pc, #12]	@ (8004f78 <USBH_HID_EventCallback+0x70>)
 8004f6a:	f7fc f86d 	bl	8001048 <HAL_GPIO_TogglePin>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40010800 	.word	0x40010800

08004f7c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	709a      	strb	r2, [r3, #2]
 8004f94:	4b22      	ldr	r3, [pc, #136]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004f96:	789a      	ldrb	r2, [r3, #2]
 8004f98:	4b21      	ldr	r3, [pc, #132]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004f9a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8004f9c:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	711a      	strb	r2, [r3, #4]
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fa4:	791a      	ldrb	r2, [r3, #4]
 8004fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fa8:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8004faa:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	719a      	strb	r2, [r3, #6]
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fb2:	799a      	ldrb	r2, [r3, #6]
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fb6:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	721a      	strb	r2, [r3, #8]
 8004fbe:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fc0:	7a1a      	ldrb	r2, [r3, #8]
 8004fc2:	4b17      	ldr	r3, [pc, #92]	@ (8005020 <USBH_HID_KeybdInit+0xa4>)
 8004fc4:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e00c      	b.n	8004fe6 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8004fcc:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <USBH_HID_KeybdInit+0xa8>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8004fd6:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <USBH_HID_KeybdInit+0xac>)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d9ef      	bls.n	8004fcc <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	8b1b      	ldrh	r3, [r3, #24]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d902      	bls.n	8004ffa <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8005028 <USBH_HID_KeybdInit+0xac>)
 8004ffe:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f103 0008 	add.w	r0, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800500c:	2250      	movs	r2, #80	@ 0x50
 800500e:	4619      	mov	r1, r3
 8005010:	f7ff fec3 	bl	8004d9a <USBH_HID_FifoInit>

  return USBH_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000104 	.word	0x20000104
 8005024:	2000011c 	.word	0x2000011c
 8005028:	20000114 	.word	0x20000114

0800502c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f80d 	bl	8005054 <USBH_HID_KeybdDecode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <USBH_HID_GetKeybdInfo+0x24>)
 8005042:	e000      	b.n	8005046 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8005044:	2300      	movs	r3, #0
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000104 	.word	0x20000104

08005054 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	8b1b      	ldrh	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800506e:	2302      	movs	r3, #2
 8005070:	e066      	b.n	8005140 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f103 0008 	add.w	r0, r3, #8
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	8b1b      	ldrh	r3, [r3, #24]
 800507c:	461a      	mov	r2, r3
 800507e:	4932      	ldr	r1, [pc, #200]	@ (8005148 <USBH_HID_KeybdDecode+0xf4>)
 8005080:	f7ff fea6 	bl	8004dd0 <USBH_HID_FifoRead>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	8b1b      	ldrh	r3, [r3, #24]
 800508c:	429a      	cmp	r2, r3
 800508e:	d156      	bne.n	800513e <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8005090:	2100      	movs	r1, #0
 8005092:	482e      	ldr	r0, [pc, #184]	@ (800514c <USBH_HID_KeybdDecode+0xf8>)
 8005094:	f000 f954 	bl	8005340 <HID_ReadItem>
 8005098:	4603      	mov	r3, r0
 800509a:	b2da      	uxtb	r2, r3
 800509c:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 800509e:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80050a0:	2100      	movs	r1, #0
 80050a2:	482c      	ldr	r0, [pc, #176]	@ (8005154 <USBH_HID_KeybdDecode+0x100>)
 80050a4:	f000 f94c 	bl	8005340 <HID_ReadItem>
 80050a8:	4603      	mov	r3, r0
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 80050ae:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 80050b0:	2100      	movs	r1, #0
 80050b2:	4829      	ldr	r0, [pc, #164]	@ (8005158 <USBH_HID_KeybdDecode+0x104>)
 80050b4:	f000 f944 	bl	8005340 <HID_ReadItem>
 80050b8:	4603      	mov	r3, r0
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 80050be:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 80050c0:	2100      	movs	r1, #0
 80050c2:	4826      	ldr	r0, [pc, #152]	@ (800515c <USBH_HID_KeybdDecode+0x108>)
 80050c4:	f000 f93c 	bl	8005340 <HID_ReadItem>
 80050c8:	4603      	mov	r3, r0
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 80050ce:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 80050d0:	2100      	movs	r1, #0
 80050d2:	4823      	ldr	r0, [pc, #140]	@ (8005160 <USBH_HID_KeybdDecode+0x10c>)
 80050d4:	f000 f934 	bl	8005340 <HID_ReadItem>
 80050d8:	4603      	mov	r3, r0
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 80050de:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 80050e0:	2100      	movs	r1, #0
 80050e2:	4820      	ldr	r0, [pc, #128]	@ (8005164 <USBH_HID_KeybdDecode+0x110>)
 80050e4:	f000 f92c 	bl	8005340 <HID_ReadItem>
 80050e8:	4603      	mov	r3, r0
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	4b18      	ldr	r3, [pc, #96]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 80050ee:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80050f0:	2100      	movs	r1, #0
 80050f2:	481d      	ldr	r0, [pc, #116]	@ (8005168 <USBH_HID_KeybdDecode+0x114>)
 80050f4:	f000 f924 	bl	8005340 <HID_ReadItem>
 80050f8:	4603      	mov	r3, r0
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 80050fe:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8005100:	2100      	movs	r1, #0
 8005102:	481a      	ldr	r0, [pc, #104]	@ (800516c <USBH_HID_KeybdDecode+0x118>)
 8005104:	f000 f91c 	bl	8005340 <HID_ReadItem>
 8005108:	4603      	mov	r3, r0
 800510a:	b2da      	uxtb	r2, r3
 800510c:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 800510e:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005110:	2300      	movs	r3, #0
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	e00e      	b.n	8005134 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	4619      	mov	r1, r3
 800511a:	4815      	ldr	r0, [pc, #84]	@ (8005170 <USBH_HID_KeybdDecode+0x11c>)
 800511c:	f000 f910 	bl	8005340 <HID_ReadItem>
 8005120:	4602      	mov	r2, r0
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	b2d1      	uxtb	r1, r2
 8005126:	4a0a      	ldr	r2, [pc, #40]	@ (8005150 <USBH_HID_KeybdDecode+0xfc>)
 8005128:	4413      	add	r3, r2
 800512a:	460a      	mov	r2, r1
 800512c:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	3301      	adds	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d9ed      	bls.n	8005116 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e000      	b.n	8005140 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 800513e:	2302      	movs	r3, #2
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2000011c 	.word	0x2000011c
 800514c:	08008348 	.word	0x08008348
 8005150:	20000104 	.word	0x20000104
 8005154:	08008368 	.word	0x08008368
 8005158:	08008388 	.word	0x08008388
 800515c:	080083a8 	.word	0x080083a8
 8005160:	080083c8 	.word	0x080083c8
 8005164:	080083e8 	.word	0x080083e8
 8005168:	08008408 	.word	0x08008408
 800516c:	08008428 	.word	0x08008428
 8005170:	08008448 	.word	0x08008448

08005174 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift == 1U) || (info->rshift))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	789b      	ldrb	r3, [r3, #2]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d003      	beq.n	800518c <USBH_HID_GetASCIICode+0x18>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	799b      	ldrb	r3, [r3, #6]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7a5b      	ldrb	r3, [r3, #9]
 8005190:	461a      	mov	r2, r3
 8005192:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <USBH_HID_GetASCIICode+0x4c>)
 8005194:	5c9b      	ldrb	r3, [r3, r2]
 8005196:	461a      	mov	r2, r3
 8005198:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <USBH_HID_GetASCIICode+0x50>)
 800519a:	5c9b      	ldrb	r3, [r3, r2]
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e008      	b.n	80051b2 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7a5b      	ldrb	r3, [r3, #9]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <USBH_HID_GetASCIICode+0x4c>)
 80051a8:	5c9b      	ldrb	r3, [r3, r2]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <USBH_HID_GetASCIICode+0x54>)
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	08008570 	.word	0x08008570
 80051c4:	080084ec 	.word	0x080084ec
 80051c8:	08008468 	.word	0x08008468

080051cc <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80051de:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <USBH_HID_MouseInit+0x88>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <USBH_HID_MouseInit+0x88>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80051ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005254 <USBH_HID_MouseInit+0x88>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80051f0:	4b18      	ldr	r3, [pc, #96]	@ (8005254 <USBH_HID_MouseInit+0x88>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80051f6:	4b17      	ldr	r3, [pc, #92]	@ (8005254 <USBH_HID_MouseInit+0x88>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e00c      	b.n	800521c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8005202:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <USBH_HID_MouseInit+0x8c>)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2100      	movs	r1, #0
 8005208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 800520c:	4a13      	ldr	r2, [pc, #76]	@ (800525c <USBH_HID_MouseInit+0x90>)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2100      	movs	r1, #0
 8005212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d9ef      	bls.n	8005202 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	8b1b      	ldrh	r3, [r3, #24]
 8005226:	2b08      	cmp	r3, #8
 8005228:	d902      	bls.n	8005230 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2208      	movs	r2, #8
 800522e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a0a      	ldr	r2, [pc, #40]	@ (800525c <USBH_HID_MouseInit+0x90>)
 8005234:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f103 0008 	add.w	r0, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005242:	2250      	movs	r2, #80	@ 0x50
 8005244:	4619      	mov	r1, r3
 8005246:	f7ff fda8 	bl	8004d9a <USBH_HID_FifoInit>

  return USBH_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000124 	.word	0x20000124
 8005258:	2000012c 	.word	0x2000012c
 800525c:	20000134 	.word	0x20000134

08005260 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f80d 	bl	8005288 <USBH_HID_MouseDecode>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8005274:	4b03      	ldr	r3, [pc, #12]	@ (8005284 <USBH_HID_GetMouseInfo+0x24>)
 8005276:	e000      	b.n	800527a <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8005278:	2300      	movs	r3, #0
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000124 	.word	0x20000124

08005288 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8b1b      	ldrh	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 80052a2:	2302      	movs	r3, #2
 80052a4:	e039      	b.n	800531a <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f103 0008 	add.w	r0, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8b1b      	ldrh	r3, [r3, #24]
 80052b0:	461a      	mov	r2, r3
 80052b2:	491c      	ldr	r1, [pc, #112]	@ (8005324 <USBH_HID_MouseDecode+0x9c>)
 80052b4:	f7ff fd8c 	bl	8004dd0 <USBH_HID_FifoRead>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8b1b      	ldrh	r3, [r3, #24]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d129      	bne.n	8005318 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 80052c4:	2100      	movs	r1, #0
 80052c6:	4818      	ldr	r0, [pc, #96]	@ (8005328 <USBH_HID_MouseDecode+0xa0>)
 80052c8:	f000 f83a 	bl	8005340 <HID_ReadItem>
 80052cc:	4603      	mov	r3, r0
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	4b16      	ldr	r3, [pc, #88]	@ (800532c <USBH_HID_MouseDecode+0xa4>)
 80052d2:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 80052d4:	2100      	movs	r1, #0
 80052d6:	4816      	ldr	r0, [pc, #88]	@ (8005330 <USBH_HID_MouseDecode+0xa8>)
 80052d8:	f000 f832 	bl	8005340 <HID_ReadItem>
 80052dc:	4603      	mov	r3, r0
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	4b12      	ldr	r3, [pc, #72]	@ (800532c <USBH_HID_MouseDecode+0xa4>)
 80052e2:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 80052e4:	2100      	movs	r1, #0
 80052e6:	4813      	ldr	r0, [pc, #76]	@ (8005334 <USBH_HID_MouseDecode+0xac>)
 80052e8:	f000 f82a 	bl	8005340 <HID_ReadItem>
 80052ec:	4603      	mov	r3, r0
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	4b0e      	ldr	r3, [pc, #56]	@ (800532c <USBH_HID_MouseDecode+0xa4>)
 80052f2:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 80052f4:	2100      	movs	r1, #0
 80052f6:	4810      	ldr	r0, [pc, #64]	@ (8005338 <USBH_HID_MouseDecode+0xb0>)
 80052f8:	f000 f822 	bl	8005340 <HID_ReadItem>
 80052fc:	4603      	mov	r3, r0
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <USBH_HID_MouseDecode+0xa4>)
 8005302:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8005304:	2100      	movs	r1, #0
 8005306:	480d      	ldr	r0, [pc, #52]	@ (800533c <USBH_HID_MouseDecode+0xb4>)
 8005308:	f000 f81a 	bl	8005340 <HID_ReadItem>
 800530c:	4603      	mov	r3, r0
 800530e:	b2da      	uxtb	r2, r3
 8005310:	4b06      	ldr	r3, [pc, #24]	@ (800532c <USBH_HID_MouseDecode+0xa4>)
 8005312:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 8005318:	2302      	movs	r3, #2
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	2000012c 	.word	0x2000012c
 8005328:	080086b8 	.word	0x080086b8
 800532c:	20000124 	.word	0x20000124
 8005330:	080086d8 	.word	0x080086d8
 8005334:	08008658 	.word	0x08008658
 8005338:	08008678 	.word	0x08008678
 800533c:	08008698 	.word	0x08008698

08005340 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7a1b      	ldrb	r3, [r3, #8]
 800535e:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7a5b      	ldrb	r3, [r3, #9]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7a5b      	ldrb	r3, [r3, #9]
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	429a      	cmp	r2, r3
 8005370:	d301      	bcc.n	8005376 <HID_ReadItem+0x36>
    {
      return (0U);
 8005372:	2300      	movs	r3, #0
 8005374:	e076      	b.n	8005464 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6852      	ldr	r2, [r2, #4]
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4413      	add	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e00a      	b.n	80053ba <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HID_ReadItem+0x90>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	08db      	lsrs	r3, r3, #3
 80053cc:	3301      	adds	r3, #1
 80053ce:	e002      	b.n	80053d6 <HID_ReadItem+0x96>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	08db      	lsrs	r3, r3, #3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4293      	cmp	r3, r2
 80053da:	d8e3      	bhi.n	80053a4 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	40da      	lsrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4013      	ands	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d304      	bcc.n	8005406 <HID_ReadItem+0xc6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	429a      	cmp	r2, r3
 8005404:	d901      	bls.n	800540a <HID_ReadItem+0xca>
  {
    return (0U);
 8005406:	2300      	movs	r3, #0
 8005408:	e02c      	b.n	8005464 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7a9b      	ldrb	r3, [r3, #10]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01d      	beq.n	800544e <HID_ReadItem+0x10e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	3b01      	subs	r3, #1
 8005418:	2201      	movs	r2, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d014      	beq.n	800544e <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	425b      	negs	r3, r3
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	4313      	orrs	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	e010      	b.n	8005464 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	fb02 f303 	mul.w	r3, r2, r3
 800544c:	e00a      	b.n	8005464 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HID_ReadItem+0x11a>
    {
      return (val);
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	e004      	b.n	8005464 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8005464:	4618      	mov	r0, r3
 8005466:	3724      	adds	r7, #36	@ 0x24
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
	...

08005470 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8005484:	481c      	ldr	r0, [pc, #112]	@ (80054f8 <USBH_Init+0x88>)
 8005486:	f001 ff6f 	bl	8007368 <iprintf>
 800548a:	481c      	ldr	r0, [pc, #112]	@ (80054fc <USBH_Init+0x8c>)
 800548c:	f001 ff6c 	bl	8007368 <iprintf>
 8005490:	200a      	movs	r0, #10
 8005492:	f001 ff7b 	bl	800738c <putchar>
    return USBH_FAIL;
 8005496:	2302      	movs	r3, #2
 8005498:	e029      	b.n	80054ee <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	79fa      	ldrb	r2, [r7, #7]
 800549e:	f883 23c4 	strb.w	r2, [r3, #964]	@ 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
  phost->ClassNumber = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f824 	bl	8005500 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
  phost->device.is_disconnected = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.is_ReEnumerated = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f001 fbf2 	bl	8006cd0 <USBH_LL_Init>

  return USBH_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08008030 	.word	0x08008030
 80054fc:	08008038 	.word	0x08008038

08005500 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e008      	b.n	8005524 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	32e0      	adds	r2, #224	@ 0xe0
 8005518:	2100      	movs	r1, #0
 800551a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b0e      	cmp	r3, #14
 8005528:	d9f3      	bls.n	8005512 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e009      	b.n	8005544 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800554a:	d3f1      	bcc.n	8005530 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0

  phost->Control.state = CTRL_SETUP;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2240      	movs	r2, #64	@ 0x40
 8005570:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

  return USBH_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d020      	beq.n	80055ea <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10f      	bne.n	80055d2 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	f8c2 137c 	str.w	r1, [r2, #892]	@ 0x37c
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	33dc      	adds	r3, #220	@ 0xdc
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	e016      	b.n	8005600 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 80055d2:	480e      	ldr	r0, [pc, #56]	@ (800560c <USBH_RegisterClass+0x78>)
 80055d4:	f001 fec8 	bl	8007368 <iprintf>
 80055d8:	480d      	ldr	r0, [pc, #52]	@ (8005610 <USBH_RegisterClass+0x7c>)
 80055da:	f001 fec5 	bl	8007368 <iprintf>
 80055de:	200a      	movs	r0, #10
 80055e0:	f001 fed4 	bl	800738c <putchar>
      status = USBH_FAIL;
 80055e4:	2302      	movs	r3, #2
 80055e6:	73fb      	strb	r3, [r7, #15]
 80055e8:	e00a      	b.n	8005600 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 80055ea:	4808      	ldr	r0, [pc, #32]	@ (800560c <USBH_RegisterClass+0x78>)
 80055ec:	f001 febc 	bl	8007368 <iprintf>
 80055f0:	4808      	ldr	r0, [pc, #32]	@ (8005614 <USBH_RegisterClass+0x80>)
 80055f2:	f001 feb9 	bl	8007368 <iprintf>
 80055f6:	200a      	movs	r0, #10
 80055f8:	f001 fec8 	bl	800738c <putchar>
    status = USBH_FAIL;
 80055fc:	2302      	movs	r3, #2
 80055fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	08008030 	.word	0x08008030
 8005610:	0800804c 	.word	0x0800804c
 8005614:	08008068 	.word	0x08008068

08005618 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 333a 	ldrb.w	r3, [r3, #826]	@ 0x33a
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	429a      	cmp	r2, r3
 8005632:	d23c      	bcs.n	80056ae <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	4619      	mov	r1, r3
 8005640:	4823      	ldr	r0, [pc, #140]	@ (80056d0 <USBH_SelectInterface+0xb8>)
 8005642:	f001 fe91 	bl	8007368 <iprintf>
 8005646:	200a      	movs	r0, #10
 8005648:	f001 fea0 	bl	800738c <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	211a      	movs	r1, #26
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	f203 3345 	addw	r3, r3, #837	@ 0x345
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	4619      	mov	r1, r3
 8005660:	481c      	ldr	r0, [pc, #112]	@ (80056d4 <USBH_SelectInterface+0xbc>)
 8005662:	f001 fe81 	bl	8007368 <iprintf>
 8005666:	200a      	movs	r0, #10
 8005668:	f001 fe90 	bl	800738c <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	211a      	movs	r1, #26
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	4815      	ldr	r0, [pc, #84]	@ (80056d8 <USBH_SelectInterface+0xc0>)
 8005682:	f001 fe71 	bl	8007368 <iprintf>
 8005686:	200a      	movs	r0, #10
 8005688:	f001 fe80 	bl	800738c <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	211a      	movs	r1, #26
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	480e      	ldr	r0, [pc, #56]	@ (80056dc <USBH_SelectInterface+0xc4>)
 80056a2:	f001 fe61 	bl	8007368 <iprintf>
 80056a6:	200a      	movs	r0, #10
 80056a8:	f001 fe70 	bl	800738c <putchar>
 80056ac:	e00a      	b.n	80056c4 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 80056ae:	480c      	ldr	r0, [pc, #48]	@ (80056e0 <USBH_SelectInterface+0xc8>)
 80056b0:	f001 fe5a 	bl	8007368 <iprintf>
 80056b4:	480b      	ldr	r0, [pc, #44]	@ (80056e4 <USBH_SelectInterface+0xcc>)
 80056b6:	f001 fe57 	bl	8007368 <iprintf>
 80056ba:	200a      	movs	r0, #10
 80056bc:	f001 fe66 	bl	800738c <putchar>
    status = USBH_FAIL;
 80056c0:	2302      	movs	r3, #2
 80056c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	08008080 	.word	0x08008080
 80056d4:	080080a0 	.word	0x080080a0
 80056d8:	080080b0 	.word	0x080080b0
 80056dc:	080080c0 	.word	0x080080c0
 80056e0:	08008030 	.word	0x08008030
 80056e4:	080080d0 	.word	0x080080d0

080056e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	70fb      	strb	r3, [r7, #3]
 80056fa:	460b      	mov	r3, r1
 80056fc:	70bb      	strb	r3, [r7, #2]
 80056fe:	4613      	mov	r3, r2
 8005700:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8005710:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005712:	e025      	b.n	8005760 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	221a      	movs	r2, #26
 8005718:	fb02 f303 	mul.w	r3, r2, r3
 800571c:	3308      	adds	r3, #8
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	3302      	adds	r3, #2
 8005724:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	795b      	ldrb	r3, [r3, #5]
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	429a      	cmp	r2, r3
 800572e:	d002      	beq.n	8005736 <USBH_FindInterface+0x4e>
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	2bff      	cmp	r3, #255	@ 0xff
 8005734:	d111      	bne.n	800575a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800573a:	78ba      	ldrb	r2, [r7, #2]
 800573c:	429a      	cmp	r2, r3
 800573e:	d002      	beq.n	8005746 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005740:	78bb      	ldrb	r3, [r7, #2]
 8005742:	2bff      	cmp	r3, #255	@ 0xff
 8005744:	d109      	bne.n	800575a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800574a:	787a      	ldrb	r2, [r7, #1]
 800574c:	429a      	cmp	r2, r3
 800574e:	d002      	beq.n	8005756 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005750:	787b      	ldrb	r3, [r7, #1]
 8005752:	2bff      	cmp	r3, #255	@ 0xff
 8005754:	d101      	bne.n	800575a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	e006      	b.n	8005768 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	3301      	adds	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d9d6      	bls.n	8005714 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005766:	23ff      	movs	r3, #255	@ 0xff
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fae0 	bl	8006d40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005780:	2101      	movs	r1, #1
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fbf9 	bl	8006f7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af04      	add	r7, sp, #16
 800579a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800579c:	2302      	movs	r3, #2
 800579e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d102      	bne.n	80057b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2203      	movs	r2, #3
 80057b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b0b      	cmp	r3, #11
 80057be:	f200 81e2 	bhi.w	8005b86 <USBH_Process+0x3f2>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <USBH_Process+0x34>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057f9 	.word	0x080057f9
 80057cc:	08005827 	.word	0x08005827
 80057d0:	08005847 	.word	0x08005847
 80057d4:	08005b15 	.word	0x08005b15
 80057d8:	08005b87 	.word	0x08005b87
 80057dc:	080058e7 	.word	0x080058e7
 80057e0:	08005a87 	.word	0x08005a87
 80057e4:	0800592f 	.word	0x0800592f
 80057e8:	0800594f 	.word	0x0800594f
 80057ec:	08005979 	.word	0x08005979
 80057f0:	080059b3 	.word	0x080059b3
 80057f4:	08005afd 	.word	0x08005afd
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 81c2 	beq.w	8005b8a <USBH_Process+0x3f6>
      {
        USBH_UsrLog("USB Device Connected");
 8005806:	48b1      	ldr	r0, [pc, #708]	@ (8005acc <USBH_Process+0x338>)
 8005808:	f001 fdae 	bl	8007368 <iprintf>
 800580c:	200a      	movs	r0, #10
 800580e:	f001 fdbd 	bl	800738c <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005818:	20c8      	movs	r0, #200	@ 0xc8
 800581a:	f001 fbee 	bl	8006ffa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 faeb 	bl	8006dfa <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005824:	e1b1      	b.n	8005b8a <USBH_Process+0x3f6>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800582c:	2b01      	cmp	r3, #1
 800582e:	f040 81ae 	bne.w	8005b8e <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8005832:	48a7      	ldr	r0, [pc, #668]	@ (8005ad0 <USBH_Process+0x33c>)
 8005834:	f001 fd98 	bl	8007368 <iprintf>
 8005838:	200a      	movs	r0, #10
 800583a:	f001 fda7 	bl	800738c <putchar>
        phost->gState = HOST_DEV_ATTACHED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005844:	e1a3      	b.n	8005b8e <USBH_Process+0x3fa>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <USBH_Process+0xc8>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005856:	2104      	movs	r1, #4
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800585c:	2064      	movs	r0, #100	@ 0x64
 800585e:	f001 fbcc 	bl	8006ffa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 faa2 	bl	8006dac <USBH_LL_GetSpeed>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2205      	movs	r2, #5
 8005876:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005878:	2100      	movs	r1, #0
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 f8f7 	bl	8006a6e <USBH_AllocPipe>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005888:	2180      	movs	r1, #128	@ 0x80
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 f8ef 	bl	8006a6e <USBH_AllocPipe>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	7919      	ldrb	r1, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80058ac:	9202      	str	r2, [sp, #8]
 80058ae:	2200      	movs	r2, #0
 80058b0:	9201      	str	r2, [sp, #4]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	4603      	mov	r3, r0
 80058b6:	2280      	movs	r2, #128	@ 0x80
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 f8a9 	bl	8006a10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7959      	ldrb	r1, [r3, #5]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80058d2:	9202      	str	r2, [sp, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	9201      	str	r2, [sp, #4]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4603      	mov	r3, r0
 80058dc:	2200      	movs	r2, #0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f896 	bl	8006a10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80058e4:	e160      	b.n	8005ba8 <USBH_Process+0x414>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f966 	bl	8005bb8 <USBH_HandleEnum>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 814f 	bne.w	8005b92 <USBH_Process+0x3fe>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 80058f4:	4877      	ldr	r0, [pc, #476]	@ (8005ad4 <USBH_Process+0x340>)
 80058f6:	f001 fd37 	bl	8007368 <iprintf>
 80058fa:	200a      	movs	r0, #10
 80058fc:	f001 fd46 	bl	800738c <putchar>

        phost->device.current_interface = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800590e:	2b01      	cmp	r3, #1
 8005910:	d109      	bne.n	8005926 <USBH_Process+0x192>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8005912:	4871      	ldr	r0, [pc, #452]	@ (8005ad8 <USBH_Process+0x344>)
 8005914:	f001 fd28 	bl	8007368 <iprintf>
 8005918:	200a      	movs	r0, #10
 800591a:	f001 fd37 	bl	800738c <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2208      	movs	r2, #8
 8005922:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8005924:	e135      	b.n	8005b92 <USBH_Process+0x3fe>
          phost->gState = HOST_INPUT;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2207      	movs	r2, #7
 800592a:	701a      	strb	r2, [r3, #0]
      break;
 800592c:	e131      	b.n	8005b92 <USBH_Process+0x3fe>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 812e 	beq.w	8005b96 <USBH_Process+0x402>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005940:	2101      	movs	r1, #1
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2208      	movs	r2, #8
 800594a:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800594c:	e123      	b.n	8005b96 <USBH_Process+0x402>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 333b 	ldrb.w	r3, [r3, #827]	@ 0x33b
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fc02 	bl	8006160 <USBH_SetCfg>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 811b 	bne.w	8005b9a <USBH_Process+0x406>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2209      	movs	r2, #9
 8005968:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800596a:	485c      	ldr	r0, [pc, #368]	@ (8005adc <USBH_Process+0x348>)
 800596c:	f001 fcfc 	bl	8007368 <iprintf>
 8005970:	200a      	movs	r0, #10
 8005972:	f001 fd0b 	bl	800738c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005976:	e110      	b.n	8005b9a <USBH_Process+0x406>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d011      	beq.n	80059aa <USBH_Process+0x216>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005986:	2101      	movs	r1, #1
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fc0c 	bl	80061a6 <USBH_SetFeature>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	f040 8104 	bne.w	8005b9e <USBH_Process+0x40a>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8005996:	4852      	ldr	r0, [pc, #328]	@ (8005ae0 <USBH_Process+0x34c>)
 8005998:	f001 fce6 	bl	8007368 <iprintf>
 800599c:	200a      	movs	r0, #10
 800599e:	f001 fcf5 	bl	800738c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	220a      	movs	r2, #10
 80059a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80059a8:	e0f9      	b.n	8005b9e <USBH_Process+0x40a>
        phost->gState = HOST_CHECK_CLASS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	220a      	movs	r2, #10
 80059ae:	701a      	strb	r2, [r3, #0]
      break;
 80059b0:	e0f5      	b.n	8005b9e <USBH_Process+0x40a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <USBH_Process+0x236>
      {
        USBH_UsrLog("No Class has been registered.");
 80059bc:	4849      	ldr	r0, [pc, #292]	@ (8005ae4 <USBH_Process+0x350>)
 80059be:	f001 fcd3 	bl	8007368 <iprintf>
 80059c2:	200a      	movs	r0, #10
 80059c4:	f001 fce2 	bl	800738c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80059c8:	e0ee      	b.n	8005ba8 <USBH_Process+0x414>
        phost->pActiveClass = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e017      	b.n	8005a08 <USBH_Process+0x274>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	33dc      	adds	r3, #220	@ 0xdc
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	791a      	ldrb	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3345 	ldrb.w	r3, [r3, #837]	@ 0x345
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d108      	bne.n	8005a02 <USBH_Process+0x26e>
            phost->pActiveClass = phost->pClass[idx];
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	33dc      	adds	r3, #220	@ 0xdc
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	3301      	adds	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0e4      	beq.n	80059d8 <USBH_Process+0x244>
        if (phost->pActiveClass != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02c      	beq.n	8005a72 <USBH_Process+0x2de>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d114      	bne.n	8005a54 <USBH_Process+0x2c0>
            phost->gState = HOST_CLASS_REQUEST;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2206      	movs	r2, #6
 8005a2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	482b      	ldr	r0, [pc, #172]	@ (8005ae8 <USBH_Process+0x354>)
 8005a3c:	f001 fc94 	bl	8007368 <iprintf>
 8005a40:	200a      	movs	r0, #10
 8005a42:	f001 fca3 	bl	800738c <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005a4c:	2103      	movs	r1, #3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4798      	blx	r3
      break;
 8005a52:	e0a9      	b.n	8005ba8 <USBH_Process+0x414>
            phost->gState = HOST_ABORT_STATE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	220d      	movs	r2, #13
 8005a58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4821      	ldr	r0, [pc, #132]	@ (8005aec <USBH_Process+0x358>)
 8005a66:	f001 fc7f 	bl	8007368 <iprintf>
 8005a6a:	200a      	movs	r0, #10
 8005a6c:	f001 fc8e 	bl	800738c <putchar>
      break;
 8005a70:	e09a      	b.n	8005ba8 <USBH_Process+0x414>
          phost->gState = HOST_ABORT_STATE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	220d      	movs	r2, #13
 8005a76:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8005a78:	481d      	ldr	r0, [pc, #116]	@ (8005af0 <USBH_Process+0x35c>)
 8005a7a:	f001 fc75 	bl	8007368 <iprintf>
 8005a7e:	200a      	movs	r0, #10
 8005a80:	f001 fc84 	bl	800738c <putchar>
      break;
 8005a84:	e090      	b.n	8005ba8 <USBH_Process+0x414>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <USBH_Process+0x31c>
      {
        status = phost->pActiveClass->Requests(phost);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d17c      	bne.n	8005ba2 <USBH_Process+0x40e>
        {
          phost->gState = HOST_CLASS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	220b      	movs	r2, #11
 8005aac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005aae:	e078      	b.n	8005ba2 <USBH_Process+0x40e>
        phost->gState = HOST_ABORT_STATE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	220d      	movs	r2, #13
 8005ab4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8005ab6:	480f      	ldr	r0, [pc, #60]	@ (8005af4 <USBH_Process+0x360>)
 8005ab8:	f001 fc56 	bl	8007368 <iprintf>
 8005abc:	480e      	ldr	r0, [pc, #56]	@ (8005af8 <USBH_Process+0x364>)
 8005abe:	f001 fc53 	bl	8007368 <iprintf>
 8005ac2:	200a      	movs	r0, #10
 8005ac4:	f001 fc62 	bl	800738c <putchar>
      break;
 8005ac8:	e06b      	b.n	8005ba2 <USBH_Process+0x40e>
 8005aca:	bf00      	nop
 8005acc:	080080f0 	.word	0x080080f0
 8005ad0:	08008108 	.word	0x08008108
 8005ad4:	08008124 	.word	0x08008124
 8005ad8:	08008138 	.word	0x08008138
 8005adc:	08008160 	.word	0x08008160
 8005ae0:	0800817c 	.word	0x0800817c
 8005ae4:	0800819c 	.word	0x0800819c
 8005ae8:	080081bc 	.word	0x080081bc
 8005aec:	080081d0 	.word	0x080081d0
 8005af0:	080081f0 	.word	0x080081f0
 8005af4:	08008030 	.word	0x08008030
 8005af8:	08008218 	.word	0x08008218

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d04f      	beq.n	8005ba6 <USBH_Process+0x412>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
      }
      break;
 8005b12:	e048      	b.n	8005ba6 <USBH_Process+0x412>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f

      DeInitStateMachine(phost);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fcef 	bl	8005500 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <USBH_Process+0x3ac>
      {
        phost->pActiveClass->DeInit(phost);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
      }

      if (phost->pUser != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <USBH_Process+0x3c2>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005b50:	2105      	movs	r1, #5
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8005b56:	4817      	ldr	r0, [pc, #92]	@ (8005bb4 <USBH_Process+0x420>)
 8005b58:	f001 fc06 	bl	8007368 <iprintf>
 8005b5c:	200a      	movs	r0, #10
 8005b5e:	f001 fc15 	bl	800738c <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d107      	bne.n	8005b7e <USBH_Process+0x3ea>
      {
        phost->device.is_ReEnumerated = 0U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fdfb 	bl	8005772 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005b7c:	e014      	b.n	8005ba8 <USBH_Process+0x414>
        USBH_LL_Start(phost);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 f8de 	bl	8006d40 <USBH_LL_Start>
      break;
 8005b84:	e010      	b.n	8005ba8 <USBH_Process+0x414>

    case HOST_ABORT_STATE:
    default :
      break;
 8005b86:	bf00      	nop
 8005b88:	e00e      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e00c      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e00a      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005b92:	bf00      	nop
 8005b94:	e008      	b.n	8005ba8 <USBH_Process+0x414>
    break;
 8005b96:	bf00      	nop
 8005b98:	e006      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e004      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <USBH_Process+0x414>
      break;
 8005ba6:	bf00      	nop
  }
  return USBH_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08008230 	.word	0x08008230

08005bb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af04      	add	r7, sp, #16
 8005bbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b07      	cmp	r3, #7
 8005bca:	f200 8144 	bhi.w	8005e56 <USBH_HandleEnum+0x29e>
 8005bce:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <USBH_HandleEnum+0x1c>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005c63 	.word	0x08005c63
 8005bdc:	08005ca3 	.word	0x08005ca3
 8005be0:	08005d29 	.word	0x08005d29
 8005be4:	08005d41 	.word	0x08005d41
 8005be8:	08005d5f 	.word	0x08005d5f
 8005bec:	08005db3 	.word	0x08005db3
 8005bf0:	08005e07 	.word	0x08005e07
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005bf4:	2108      	movs	r1, #8
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9e2 	bl	8005fc0 <USBH_Get_DevDesc>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 812b 	bne.w	8005e5a <USBH_HandleEnum+0x2a2>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 232b 	ldrb.w	r2, [r3, #811]	@ 0x32b
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7919      	ldrb	r1, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005c28:	9202      	str	r2, [sp, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	9201      	str	r2, [sp, #4]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	4603      	mov	r3, r0
 8005c32:	2280      	movs	r2, #128	@ 0x80
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 feeb 	bl	8006a10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7959      	ldrb	r1, [r3, #5]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005c4e:	9202      	str	r2, [sp, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	9201      	str	r2, [sp, #4]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	4603      	mov	r3, r0
 8005c58:	2200      	movs	r2, #0
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fed8 	bl	8006a10 <USBH_OpenPipe>
      }
      break;
 8005c60:	e0fb      	b.n	8005e5a <USBH_HandleEnum+0x2a2>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8005c62:	2112      	movs	r1, #18
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9ab 	bl	8005fc0 <USBH_Get_DevDesc>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 80f6 	bne.w	8005e5e <USBH_HandleEnum+0x2a6>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4882      	ldr	r0, [pc, #520]	@ (8005e84 <USBH_HandleEnum+0x2cc>)
 8005c7c:	f001 fb74 	bl	8007368 <iprintf>
 8005c80:	200a      	movs	r0, #10
 8005c82:	f001 fb83 	bl	800738c <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 332c 	ldrh.w	r3, [r3, #812]	@ 0x32c
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	487e      	ldr	r0, [pc, #504]	@ (8005e88 <USBH_HandleEnum+0x2d0>)
 8005c90:	f001 fb6a 	bl	8007368 <iprintf>
 8005c94:	200a      	movs	r0, #10
 8005c96:	f001 fb79 	bl	800738c <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	705a      	strb	r2, [r3, #1]

      }
      break;
 8005ca0:	e0dd      	b.n	8005e5e <USBH_HandleEnum+0x2a6>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa37 	bl	8006118 <USBH_SetAddress>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 80d8 	bne.w	8005e62 <USBH_HandleEnum+0x2aa>
      {
        USBH_Delay(2U);
 8005cb2:	2002      	movs	r0, #2
 8005cb4:	f001 f9a1 	bl	8006ffa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4870      	ldr	r0, [pc, #448]	@ (8005e8c <USBH_HandleEnum+0x2d4>)
 8005cca:	f001 fb4d 	bl	8007368 <iprintf>
 8005cce:	200a      	movs	r0, #10
 8005cd0:	f001 fb5c 	bl	800738c <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	7919      	ldrb	r1, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	9201      	str	r2, [sp, #4]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2280      	movs	r2, #128	@ 0x80
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fe88 	bl	8006a10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	7959      	ldrb	r1, [r3, #5]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005d14:	9202      	str	r2, [sp, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	9201      	str	r2, [sp, #4]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2200      	movs	r2, #0
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fe75 	bl	8006a10 <USBH_OpenPipe>
      }
      break;
 8005d26:	e09c      	b.n	8005e62 <USBH_HandleEnum+0x2aa>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8005d28:	2109      	movs	r1, #9
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f970 	bl	8006010 <USBH_Get_CfgDesc>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f040 8097 	bne.w	8005e66 <USBH_HandleEnum+0x2ae>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	705a      	strb	r2, [r3, #1]
      }
      break;
 8005d3e:	e092      	b.n	8005e66 <USBH_HandleEnum+0x2ae>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 3338 	ldrh.w	r3, [r3, #824]	@ 0x338
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f961 	bl	8006010 <USBH_Get_CfgDesc>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 808a 	bne.w	8005e6a <USBH_HandleEnum+0x2b2>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2205      	movs	r2, #5
 8005d5a:	705a      	strb	r2, [r3, #1]
      }
      break;
 8005d5c:	e085      	b.n	8005e6a <USBH_HandleEnum+0x2b2>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3332 	ldrb.w	r3, [r3, #818]	@ 0x332
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01a      	beq.n	8005d9e <USBH_HandleEnum+0x1e6>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 1332 	ldrb.w	r1, [r3, #818]	@ 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        if (USBH_Get_StringDesc(phost,
 8005d74:	23ff      	movs	r3, #255	@ 0xff
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f96e 	bl	8006058 <USBH_Get_StringDesc>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d175      	bne.n	8005e6e <USBH_HandleEnum+0x2b6>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4841      	ldr	r0, [pc, #260]	@ (8005e90 <USBH_HandleEnum+0x2d8>)
 8005d8c:	f001 faec 	bl	8007368 <iprintf>
 8005d90:	200a      	movs	r0, #10
 8005d92:	f001 fafb 	bl	800738c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2206      	movs	r2, #6
 8005d9a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d9c:	e067      	b.n	8005e6e <USBH_HandleEnum+0x2b6>
        USBH_UsrLog("Manufacturer : N/A");
 8005d9e:	483d      	ldr	r0, [pc, #244]	@ (8005e94 <USBH_HandleEnum+0x2dc>)
 8005da0:	f001 fae2 	bl	8007368 <iprintf>
 8005da4:	200a      	movs	r0, #10
 8005da6:	f001 faf1 	bl	800738c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2206      	movs	r2, #6
 8005dae:	705a      	strb	r2, [r3, #1]
      break;
 8005db0:	e05d      	b.n	8005e6e <USBH_HandleEnum+0x2b6>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01a      	beq.n	8005df2 <USBH_HandleEnum+0x23a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 1333 	ldrb.w	r1, [r3, #819]	@ 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        if (USBH_Get_StringDesc(phost,
 8005dc8:	23ff      	movs	r3, #255	@ 0xff
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f944 	bl	8006058 <USBH_Get_StringDesc>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d14d      	bne.n	8005e72 <USBH_HandleEnum+0x2ba>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005ddc:	4619      	mov	r1, r3
 8005dde:	482e      	ldr	r0, [pc, #184]	@ (8005e98 <USBH_HandleEnum+0x2e0>)
 8005de0:	f001 fac2 	bl	8007368 <iprintf>
 8005de4:	200a      	movs	r0, #10
 8005de6:	f001 fad1 	bl	800738c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2207      	movs	r2, #7
 8005dee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005df0:	e03f      	b.n	8005e72 <USBH_HandleEnum+0x2ba>
        USBH_UsrLog("Product : N/A");
 8005df2:	482a      	ldr	r0, [pc, #168]	@ (8005e9c <USBH_HandleEnum+0x2e4>)
 8005df4:	f001 fab8 	bl	8007368 <iprintf>
 8005df8:	200a      	movs	r0, #10
 8005dfa:	f001 fac7 	bl	800738c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2207      	movs	r2, #7
 8005e02:	705a      	strb	r2, [r3, #1]
      break;
 8005e04:	e035      	b.n	8005e72 <USBH_HandleEnum+0x2ba>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d019      	beq.n	8005e44 <USBH_HandleEnum+0x28c>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        if (USBH_Get_StringDesc(phost,
 8005e1c:	23ff      	movs	r3, #255	@ 0xff
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f91a 	bl	8006058 <USBH_Get_StringDesc>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d125      	bne.n	8005e76 <USBH_HandleEnum+0x2be>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005e30:	4619      	mov	r1, r3
 8005e32:	481b      	ldr	r0, [pc, #108]	@ (8005ea0 <USBH_HandleEnum+0x2e8>)
 8005e34:	f001 fa98 	bl	8007368 <iprintf>
 8005e38:	200a      	movs	r0, #10
 8005e3a:	f001 faa7 	bl	800738c <putchar>
          Status = USBH_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005e42:	e018      	b.n	8005e76 <USBH_HandleEnum+0x2be>
        USBH_UsrLog("Serial Number : N/A");
 8005e44:	4817      	ldr	r0, [pc, #92]	@ (8005ea4 <USBH_HandleEnum+0x2ec>)
 8005e46:	f001 fa8f 	bl	8007368 <iprintf>
 8005e4a:	200a      	movs	r0, #10
 8005e4c:	f001 fa9e 	bl	800738c <putchar>
        Status = USBH_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e00f      	b.n	8005e76 <USBH_HandleEnum+0x2be>

    default:
      break;
 8005e56:	bf00      	nop
 8005e58:	e00e      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e00c      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e00a      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e62:	bf00      	nop
 8005e64:	e008      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e66:	bf00      	nop
 8005e68:	e006      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e004      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <USBH_HandleEnum+0x2c0>
      break;
 8005e76:	bf00      	nop
  }
  return Status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	08008248 	.word	0x08008248
 8005e88:	08008254 	.word	0x08008254
 8005e8c:	08008260 	.word	0x08008260
 8005e90:	08008278 	.word	0x08008278
 8005e94:	0800828c 	.word	0x0800828c
 8005e98:	080082a0 	.word	0x080082a0
 8005e9c:	080082b0 	.word	0x080082b0
 8005ea0:	080082c0 	.word	0x080082c0
 8005ea4:	080082d4 	.word	0x080082d4

08005ea8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
  USBH_HandleSof(phost);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f804 	bl	8005ee8 <USBH_HandleSof>
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b0b      	cmp	r3, #11
 8005ef8:	d10a      	bne.n	8005f10 <USBH_HandleSof+0x28>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
  }
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005f28:	bf00      	nop
}
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr

08005f32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8005f42:	bf00      	nop
}
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
  phost->device.is_disconnected = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.is_ReEnumerated = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.is_connected = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
  phost->device.PortEnabled = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 feec 	bl	8006d76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	791b      	ldrb	r3, [r3, #4]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fd82 	bl	8006aae <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	795b      	ldrb	r3, [r3, #5]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fd7c 	bl	8006aae <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fde:	2100      	movs	r1, #0
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f864 	bl	80060ae <USBH_GetDescriptor>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	b292      	uxth	r2, r2
 8006000:	4619      	mov	r1, r3
 8006002:	f000 f918 	bl	8006236 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af02      	add	r7, sp, #8
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	331c      	adds	r3, #28
 8006020:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006022:	887b      	ldrh	r3, [r7, #2]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800602c:	2100      	movs	r1, #0
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f83d 	bl	80060ae <USBH_GetDescriptor>
 8006034:	4603      	mov	r3, r0
 8006036:	72fb      	strb	r3, [r7, #11]
 8006038:	7afb      	ldrb	r3, [r7, #11]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	68f9      	ldr	r1, [r7, #12]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f95f 	bl	800630c <USBH_ParseCfgDesc>
  }

  return status;
 800604e:	7afb      	ldrb	r3, [r7, #11]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	461a      	mov	r2, r3
 8006064:	460b      	mov	r3, r1
 8006066:	72fb      	strb	r3, [r7, #11]
 8006068:	4613      	mov	r3, r2
 800606a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800606c:	7afb      	ldrb	r3, [r7, #11]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006074:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	460b      	mov	r3, r1
 8006082:	2100      	movs	r1, #0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f812 	bl	80060ae <USBH_GetDescriptor>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800609a:	893a      	ldrh	r2, [r7, #8]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fa2e 	bl	8006500 <USBH_ParseStringDesc>
  }

  return status;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	72fb      	strb	r3, [r7, #11]
 80060bc:	4613      	mov	r3, r2
 80060be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	789b      	ldrb	r3, [r3, #2]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d11c      	bne.n	8006102 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2206      	movs	r2, #6
 80060d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	893a      	ldrh	r2, [r7, #8]
 80060de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80060e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ea:	d104      	bne.n	80060f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f240 4209 	movw	r2, #1033	@ 0x409
 80060f2:	829a      	strh	r2, [r3, #20]
 80060f4:	e002      	b.n	80060fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8b3a      	ldrh	r2, [r7, #24]
 8006100:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006102:	8b3b      	ldrh	r3, [r7, #24]
 8006104:	461a      	mov	r2, r3
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fa44 	bl	8006596 <USBH_CtlReq>
 800610e:	4603      	mov	r3, r0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	789b      	ldrb	r3, [r3, #2]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10f      	bne.n	800614c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2205      	movs	r2, #5
 8006136:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800614c:	2200      	movs	r2, #0
 800614e:	2100      	movs	r1, #0
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa20 	bl	8006596 <USBH_CtlReq>
 8006156:	4603      	mov	r3, r0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	789b      	ldrb	r3, [r3, #2]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10e      	bne.n	8006192 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2209      	movs	r2, #9
 800617e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	887a      	ldrh	r2, [r7, #2]
 8006184:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006192:	2200      	movs	r2, #0
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9fd 	bl	8006596 <USBH_CtlReq>
 800619c:	4603      	mov	r3, r0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	789b      	ldrb	r3, [r3, #2]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10f      	bne.n	80061da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2203      	movs	r2, #3
 80061c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80061da:	2200      	movs	r2, #0
 80061dc:	2100      	movs	r1, #0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9d9 	bl	8006596 <USBH_CtlReq>
 80061e4:	4603      	mov	r3, r0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	460b      	mov	r3, r1
 80061f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	789b      	ldrb	r3, [r3, #2]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d10f      	bne.n	8006222 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9b5 	bl	8006596 <USBH_CtlReq>
 800622c:	4603      	mov	r3, r0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	4613      	mov	r3, r2
 8006242:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	781a      	ldrb	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	785a      	ldrb	r2, [r3, #1]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3302      	adds	r3, #2
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3303      	adds	r3, #3
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	b29b      	uxth	r3, r3
 8006266:	4313      	orrs	r3, r2
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	791a      	ldrb	r2, [r3, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	795a      	ldrb	r2, [r3, #5]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	799a      	ldrb	r2, [r3, #6]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	79da      	ldrb	r2, [r3, #7]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d936      	bls.n	8006302 <USBH_ParseDevDesc+0xcc>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	3308      	adds	r3, #8
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	3309      	adds	r3, #9
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	330a      	adds	r3, #10
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	330b      	adds	r3, #11
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	330c      	adds	r3, #12
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	330d      	adds	r3, #13
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	b29b      	uxth	r3, r3
 80062da:	4313      	orrs	r3, r2
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	7b9a      	ldrb	r2, [r3, #14]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	7bda      	ldrb	r2, [r3, #15]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	7c1a      	ldrb	r2, [r3, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	7c5a      	ldrb	r2, [r3, #17]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	745a      	strb	r2, [r3, #17]
  }
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t                      ep_ix = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	785a      	ldrb	r2, [r3, #1]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3302      	adds	r3, #2
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3303      	adds	r3, #3
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	b29b      	uxth	r3, r3
 8006350:	4313      	orrs	r3, r2
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	791a      	ldrb	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	795a      	ldrb	r2, [r3, #5]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	799a      	ldrb	r2, [r3, #6]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	79da      	ldrb	r2, [r3, #7]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	7a1a      	ldrb	r2, [r3, #8]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	2b09      	cmp	r3, #9
 8006384:	d95f      	bls.n	8006446 <USBH_ParseCfgDesc+0x13a>
  {
    ptr = USB_LEN_CFG_DESC;
 8006386:	2309      	movs	r3, #9
 8006388:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800638e:	e051      	b.n	8006434 <USBH_ParseCfgDesc+0x128>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006390:	f107 0316 	add.w	r3, r7, #22
 8006394:	4619      	mov	r1, r3
 8006396:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006398:	f000 f8e4 	bl	8006564 <USBH_GetNextDesc>
 800639c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d146      	bne.n	8006434 <USBH_ParseCfgDesc+0x128>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80063a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063aa:	221a      	movs	r2, #26
 80063ac:	fb02 f303 	mul.w	r3, r2, r3
 80063b0:	3308      	adds	r3, #8
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	3302      	adds	r3, #2
 80063b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80063ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063bc:	69f8      	ldr	r0, [r7, #28]
 80063be:	f000 f846 	bl	800644e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80063cc:	e022      	b.n	8006414 <USBH_ParseCfgDesc+0x108>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80063ce:	f107 0316 	add.w	r3, r7, #22
 80063d2:	4619      	mov	r1, r3
 80063d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063d6:	f000 f8c5 	bl	8006564 <USBH_GetNextDesc>
 80063da:	6278      	str	r0, [r7, #36]	@ 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	d117      	bne.n	8006414 <USBH_ParseCfgDesc+0x108>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80063e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80063ec:	3201      	adds	r2, #1
 80063ee:	00d2      	lsls	r2, r2, #3
 80063f0:	211a      	movs	r1, #26
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	3308      	adds	r3, #8
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	3304      	adds	r3, #4
 8006400:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006402:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006404:	69b8      	ldr	r0, [r7, #24]
 8006406:	f000 f850 	bl	80064aa <USBH_ParseEPDesc>
            ep_ix++;
 800640a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800640e:	3301      	adds	r3, #1
 8006410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	791b      	ldrb	r3, [r3, #4]
 8006418:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800641c:	429a      	cmp	r2, r3
 800641e:	d204      	bcs.n	800642a <USBH_ParseCfgDesc+0x11e>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	885a      	ldrh	r2, [r3, #2]
 8006424:	8afb      	ldrh	r3, [r7, #22]
 8006426:	429a      	cmp	r2, r3
 8006428:	d8d1      	bhi.n	80063ce <USBH_ParseCfgDesc+0xc2>
          }
        }
        if_ix++;
 800642a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800642e:	3301      	adds	r3, #1
 8006430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006434:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006438:	2b01      	cmp	r3, #1
 800643a:	d804      	bhi.n	8006446 <USBH_ParseCfgDesc+0x13a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	885a      	ldrh	r2, [r3, #2]
 8006440:	8afb      	ldrh	r3, [r7, #22]
 8006442:	429a      	cmp	r2, r3
 8006444:	d8a4      	bhi.n	8006390 <USBH_ParseCfgDesc+0x84>
      }
    }
  }
}
 8006446:	bf00      	nop
 8006448:	3728      	adds	r7, #40	@ 0x28
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781a      	ldrb	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785a      	ldrb	r2, [r3, #1]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	789a      	ldrb	r2, [r3, #2]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	78da      	ldrb	r2, [r3, #3]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	791a      	ldrb	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	795a      	ldrb	r2, [r3, #5]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	799a      	ldrb	r2, [r3, #6]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	79da      	ldrb	r2, [r3, #7]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	7a1a      	ldrb	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	721a      	strb	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	785a      	ldrb	r2, [r3, #1]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	789a      	ldrb	r2, [r3, #2]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	78da      	ldrb	r2, [r3, #3]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	3304      	adds	r3, #4
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3305      	adds	r3, #5
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	799a      	ldrb	r2, [r3, #6]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	719a      	strb	r2, [r3, #6]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d120      	bne.n	800655a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	1e9a      	subs	r2, r3, #2
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	4293      	cmp	r3, r2
 8006522:	bf28      	it	cs
 8006524:	4613      	movcs	r3, r2
 8006526:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3302      	adds	r3, #2
 800652c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800652e:	2300      	movs	r3, #0
 8006530:	82fb      	strh	r3, [r7, #22]
 8006532:	e00b      	b.n	800654c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006534:	8afb      	ldrh	r3, [r7, #22]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3301      	adds	r3, #1
 8006544:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	3302      	adds	r3, #2
 800654a:	82fb      	strh	r3, [r7, #22]
 800654c:	8afa      	ldrh	r2, [r7, #22]
 800654e:	8abb      	ldrh	r3, [r7, #20]
 8006550:	429a      	cmp	r2, r3
 8006552:	d3ef      	bcc.n	8006534 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
  }
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	4413      	add	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4413      	add	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80065a4:	2301      	movs	r3, #1
 80065a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	789b      	ldrb	r3, [r3, #2]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d002      	beq.n	80065b6 <USBH_CtlReq+0x20>
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d00f      	beq.n	80065d4 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 80065b4:	e034      	b.n	8006620 <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2202      	movs	r2, #2
 80065cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      break;
 80065d2:	e025      	b.n	8006620 <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f829 	bl	800662c <USBH_HandleControl>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d108      	bne.n	80065f6 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	75fb      	strb	r3, [r7, #23]
      break;
 80065f4:	e013      	b.n	800661e <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d108      	bne.n	800660e <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006608:	2303      	movs	r3, #3
 800660a:	75fb      	strb	r3, [r7, #23]
      break;
 800660c:	e007      	b.n	800661e <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d104      	bne.n	800661e <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800661a:	2302      	movs	r3, #2
 800661c:	75fb      	strb	r3, [r7, #23]
      break;
 800661e:	bf00      	nop
  }
  return status;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af02      	add	r7, sp, #8
 8006632:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006638:	2300      	movs	r3, #0
 800663a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7e1b      	ldrb	r3, [r3, #24]
 8006640:	3b01      	subs	r3, #1
 8006642:	2b0a      	cmp	r3, #10
 8006644:	f200 8153 	bhi.w	80068ee <USBH_HandleControl+0x2c2>
 8006648:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <USBH_HandleControl+0x24>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	0800667d 	.word	0x0800667d
 8006654:	08006697 	.word	0x08006697
 8006658:	08006701 	.word	0x08006701
 800665c:	08006727 	.word	0x08006727
 8006660:	0800675f 	.word	0x0800675f
 8006664:	08006789 	.word	0x08006789
 8006668:	080067db 	.word	0x080067db
 800666c:	080067fd 	.word	0x080067fd
 8006670:	08006839 	.word	0x08006839
 8006674:	0800685f 	.word	0x0800685f
 8006678:	0800689d 	.word	0x0800689d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f103 0110 	add.w	r1, r3, #16
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	795b      	ldrb	r3, [r3, #5]
 8006686:	461a      	mov	r2, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f945 	bl	8006918 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	761a      	strb	r2, [r3, #24]
      break;
 8006694:	e136      	b.n	8006904 <USBH_HandleControl+0x2d8>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	795b      	ldrb	r3, [r3, #5]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc59 	bl	8006f54 <USBH_LL_GetURBState>
 80066a2:	4603      	mov	r3, r0
 80066a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d11e      	bne.n	80066ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7c1b      	ldrb	r3, [r3, #16]
 80066b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8adb      	ldrh	r3, [r3, #22]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80066be:	7b7b      	ldrb	r3, [r7, #13]
 80066c0:	2b80      	cmp	r3, #128	@ 0x80
 80066c2:	d103      	bne.n	80066cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2203      	movs	r2, #3
 80066c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80066ca:	e112      	b.n	80068f2 <USBH_HandleControl+0x2c6>
            phost->Control.state = CTRL_DATA_OUT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2205      	movs	r2, #5
 80066d0:	761a      	strb	r2, [r3, #24]
      break;
 80066d2:	e10e      	b.n	80068f2 <USBH_HandleControl+0x2c6>
          if (direction == USB_D2H)
 80066d4:	7b7b      	ldrb	r3, [r7, #13]
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d103      	bne.n	80066e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2209      	movs	r2, #9
 80066de:	761a      	strb	r2, [r3, #24]
      break;
 80066e0:	e107      	b.n	80068f2 <USBH_HandleControl+0x2c6>
            phost->Control.state = CTRL_STATUS_IN;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2207      	movs	r2, #7
 80066e6:	761a      	strb	r2, [r3, #24]
      break;
 80066e8:	e103      	b.n	80068f2 <USBH_HandleControl+0x2c6>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d003      	beq.n	80066f8 <USBH_HandleControl+0xcc>
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	f040 80fd 	bne.w	80068f2 <USBH_HandleControl+0x2c6>
          phost->Control.state = CTRL_ERROR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	220b      	movs	r2, #11
 80066fc:	761a      	strb	r2, [r3, #24]
      break;
 80066fe:	e0f8      	b.n	80068f2 <USBH_HandleControl+0x2c6>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6899      	ldr	r1, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	899a      	ldrh	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	791b      	ldrb	r3, [r3, #4]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f93c 	bl	8006996 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	761a      	strb	r2, [r3, #24]
      break;
 8006724:	e0ee      	b.n	8006904 <USBH_HandleControl+0x2d8>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	791b      	ldrb	r3, [r3, #4]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fc11 	bl	8006f54 <USBH_LL_GetURBState>
 8006732:	4603      	mov	r3, r0
 8006734:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d102      	bne.n	8006742 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2209      	movs	r2, #9
 8006740:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b05      	cmp	r3, #5
 8006746:	d102      	bne.n	800674e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006748:	2303      	movs	r3, #3
 800674a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800674c:	e0d3      	b.n	80068f6 <USBH_HandleControl+0x2ca>
        if (URB_Status == USBH_URB_ERROR)
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b04      	cmp	r3, #4
 8006752:	f040 80d0 	bne.w	80068f6 <USBH_HandleControl+0x2ca>
          phost->Control.state = CTRL_ERROR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	220b      	movs	r2, #11
 800675a:	761a      	strb	r2, [r3, #24]
      break;
 800675c:	e0cb      	b.n	80068f6 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6899      	ldr	r1, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	899a      	ldrh	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	795b      	ldrb	r3, [r3, #5]
 800676a:	2001      	movs	r0, #1
 800676c:	9000      	str	r0, [sp, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8ec 	bl	800694c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2206      	movs	r2, #6
 8006784:	761a      	strb	r2, [r3, #24]
      break;
 8006786:	e0bd      	b.n	8006904 <USBH_HandleControl+0x2d8>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	795b      	ldrb	r3, [r3, #5]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fbe0 	bl	8006f54 <USBH_LL_GetURBState>
 8006794:	4603      	mov	r3, r0
 8006796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d103      	bne.n	80067a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2207      	movs	r2, #7
 80067a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80067a4:	e0a9      	b.n	80068fa <USBH_HandleControl+0x2ce>
      else if (URB_Status == USBH_URB_STALL)
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d105      	bne.n	80067b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	220c      	movs	r2, #12
 80067b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80067b2:	2303      	movs	r3, #3
 80067b4:	73fb      	strb	r3, [r7, #15]
      break;
 80067b6:	e0a0      	b.n	80068fa <USBH_HandleControl+0x2ce>
      else if (URB_Status == USBH_URB_NOTREADY)
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d103      	bne.n	80067c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2205      	movs	r2, #5
 80067c2:	761a      	strb	r2, [r3, #24]
      break;
 80067c4:	e099      	b.n	80068fa <USBH_HandleControl+0x2ce>
        if (URB_Status == USBH_URB_ERROR)
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	f040 8096 	bne.w	80068fa <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	220b      	movs	r2, #11
 80067d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80067d4:	2302      	movs	r3, #2
 80067d6:	73fb      	strb	r3, [r7, #15]
      break;
 80067d8:	e08f      	b.n	80068fa <USBH_HandleControl+0x2ce>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	791b      	ldrb	r3, [r3, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	2100      	movs	r1, #0
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8d7 	bl	8006996 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2208      	movs	r2, #8
 80067f8:	761a      	strb	r2, [r3, #24]

      break;
 80067fa:	e083      	b.n	8006904 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	791b      	ldrb	r3, [r3, #4]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fba6 	bl	8006f54 <USBH_LL_GetURBState>
 8006808:	4603      	mov	r3, r0
 800680a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	220d      	movs	r2, #13
 8006816:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800681c:	e06f      	b.n	80068fe <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_ERROR)
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d103      	bne.n	800682c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	220b      	movs	r2, #11
 8006828:	761a      	strb	r2, [r3, #24]
      break;
 800682a:	e068      	b.n	80068fe <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_STALL)
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	2b05      	cmp	r3, #5
 8006830:	d165      	bne.n	80068fe <USBH_HandleControl+0x2d2>
          status = USBH_NOT_SUPPORTED;
 8006832:	2303      	movs	r3, #3
 8006834:	73fb      	strb	r3, [r7, #15]
      break;
 8006836:	e062      	b.n	80068fe <USBH_HandleControl+0x2d2>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	795b      	ldrb	r3, [r3, #5]
 800683c:	2201      	movs	r2, #1
 800683e:	9200      	str	r2, [sp, #0]
 8006840:	2200      	movs	r2, #0
 8006842:	2100      	movs	r1, #0
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f881 	bl	800694c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	220a      	movs	r2, #10
 800685a:	761a      	strb	r2, [r3, #24]
      break;
 800685c:	e052      	b.n	8006904 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	795b      	ldrb	r3, [r3, #5]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb75 	bl	8006f54 <USBH_LL_GetURBState>
 800686a:	4603      	mov	r3, r0
 800686c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d105      	bne.n	8006880 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	220d      	movs	r2, #13
 800687c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800687e:	e040      	b.n	8006902 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006880:	7bbb      	ldrb	r3, [r7, #14]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d103      	bne.n	800688e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2209      	movs	r2, #9
 800688a:	761a      	strb	r2, [r3, #24]
      break;
 800688c:	e039      	b.n	8006902 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d136      	bne.n	8006902 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	220b      	movs	r2, #11
 8006898:	761a      	strb	r2, [r3, #24]
      break;
 800689a:	e032      	b.n	8006902 <USBH_HandleControl+0x2d6>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7e5b      	ldrb	r3, [r3, #25]
 80068a0:	3301      	adds	r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	765a      	strb	r2, [r3, #25]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7e5b      	ldrb	r3, [r3, #25]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d806      	bhi.n	80068be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80068bc:	e022      	b.n	8006904 <USBH_HandleControl+0x2d8>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80068c4:	2106      	movs	r1, #6
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 80068d0:	480f      	ldr	r0, [pc, #60]	@ (8006910 <USBH_HandleControl+0x2e4>)
 80068d2:	f000 fd49 	bl	8007368 <iprintf>
 80068d6:	480f      	ldr	r0, [pc, #60]	@ (8006914 <USBH_HandleControl+0x2e8>)
 80068d8:	f000 fd46 	bl	8007368 <iprintf>
 80068dc:	200a      	movs	r0, #10
 80068de:	f000 fd55 	bl	800738c <putchar>
        phost->gState = HOST_IDLE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80068e8:	2302      	movs	r3, #2
 80068ea:	73fb      	strb	r3, [r7, #15]
      break;
 80068ec:	e00a      	b.n	8006904 <USBH_HandleControl+0x2d8>

    default:
      break;
 80068ee:	bf00      	nop
 80068f0:	e008      	b.n	8006904 <USBH_HandleControl+0x2d8>
      break;
 80068f2:	bf00      	nop
 80068f4:	e006      	b.n	8006904 <USBH_HandleControl+0x2d8>
      break;
 80068f6:	bf00      	nop
 80068f8:	e004      	b.n	8006904 <USBH_HandleControl+0x2d8>
      break;
 80068fa:	bf00      	nop
 80068fc:	e002      	b.n	8006904 <USBH_HandleControl+0x2d8>
      break;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <USBH_HandleControl+0x2d8>
      break;
 8006902:	bf00      	nop
  }

  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	080082e8 	.word	0x080082e8
 8006914:	080082f0 	.word	0x080082f0

08006918 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af04      	add	r7, sp, #16
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006926:	79f9      	ldrb	r1, [r7, #7]
 8006928:	2300      	movs	r3, #0
 800692a:	9303      	str	r3, [sp, #12]
 800692c:	2308      	movs	r3, #8
 800692e:	9302      	str	r3, [sp, #8]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	2300      	movs	r3, #0
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	2200      	movs	r2, #0
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fad8 	bl	8006ef2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af04      	add	r7, sp, #16
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	460b      	mov	r3, r1
 800695c:	80fb      	strh	r3, [r7, #6]
 800695e:	4613      	mov	r3, r2
 8006960:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006970:	7979      	ldrb	r1, [r7, #5]
 8006972:	7e3b      	ldrb	r3, [r7, #24]
 8006974:	9303      	str	r3, [sp, #12]
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	9302      	str	r3, [sp, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	2301      	movs	r3, #1
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	2200      	movs	r2, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fab3 	bl	8006ef2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b088      	sub	sp, #32
 800699a:	af04      	add	r7, sp, #16
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	4611      	mov	r1, r2
 80069a2:	461a      	mov	r2, r3
 80069a4:	460b      	mov	r3, r1
 80069a6:	80fb      	strh	r3, [r7, #6]
 80069a8:	4613      	mov	r3, r2
 80069aa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80069ac:	7979      	ldrb	r1, [r7, #5]
 80069ae:	2300      	movs	r3, #0
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	2301      	movs	r3, #1
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	2201      	movs	r2, #1
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fa95 	bl	8006ef2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80069c8:	2300      	movs	r3, #0

}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b088      	sub	sp, #32
 80069d6:	af04      	add	r7, sp, #16
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	4611      	mov	r1, r2
 80069de:	461a      	mov	r2, r3
 80069e0:	460b      	mov	r3, r1
 80069e2:	71fb      	strb	r3, [r7, #7]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	79b9      	ldrb	r1, [r7, #6]
 80069ee:	2200      	movs	r2, #0
 80069f0:	9203      	str	r2, [sp, #12]
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	2301      	movs	r3, #1
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	2303      	movs	r3, #3
 80069fe:	2201      	movs	r2, #1
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fa76 	bl	8006ef2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af04      	add	r7, sp, #16
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	70fb      	strb	r3, [r7, #3]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70bb      	strb	r3, [r7, #2]
 8006a26:	4613      	mov	r3, r2
 8006a28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006a2a:	7878      	ldrb	r0, [r7, #1]
 8006a2c:	78ba      	ldrb	r2, [r7, #2]
 8006a2e:	78f9      	ldrb	r1, [r7, #3]
 8006a30:	8b3b      	ldrh	r3, [r7, #24]
 8006a32:	9302      	str	r3, [sp, #8]
 8006a34:	7d3b      	ldrb	r3, [r7, #20]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	7c3b      	ldrb	r3, [r7, #16]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa09 	bl	8006e56 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa28 	bl	8006eb4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f832 	bl	8006ae4 <USBH_GetFreePipe>
 8006a80:	4603      	mov	r3, r0
 8006a82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006a84:	89fb      	ldrh	r3, [r7, #14]
 8006a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	89fa      	ldrh	r2, [r7, #14]
 8006a92:	f002 020f 	and.w	r2, r2, #15
 8006a96:	f443 4100 	orr.w	r1, r3, #32768	@ 0x8000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	32e0      	adds	r2, #224	@ 0xe0
 8006a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 8006aa2:	89fb      	ldrh	r3, [r7, #14]
 8006aa4:	b2db      	uxtb	r3, r3
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	2b0a      	cmp	r3, #10
 8006abe:	d80b      	bhi.n	8006ad8 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32e0      	adds	r2, #224	@ 0xe0
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	78fa      	ldrb	r2, [r7, #3]
 8006acc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32e0      	adds	r2, #224	@ 0xe0
 8006ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	e00e      	b.n	8006b14 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006af6:	7bfa      	ldrb	r2, [r7, #15]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	32e0      	adds	r2, #224	@ 0xe0
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	e007      	b.n	8006b1e <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	3301      	adds	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b0a      	cmp	r3, #10
 8006b18:	d9ed      	bls.n	8006af6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	490e      	ldr	r1, [pc, #56]	@ (8006b68 <MX_USB_HOST_Init+0x40>)
 8006b30:	480e      	ldr	r0, [pc, #56]	@ (8006b6c <MX_USB_HOST_Init+0x44>)
 8006b32:	f7fe fc9d 	bl	8005470 <USBH_Init>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006b3c:	f7f9 fdd0 	bl	80006e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006b40:	490b      	ldr	r1, [pc, #44]	@ (8006b70 <MX_USB_HOST_Init+0x48>)
 8006b42:	480a      	ldr	r0, [pc, #40]	@ (8006b6c <MX_USB_HOST_Init+0x44>)
 8006b44:	f7fe fd26 	bl	8005594 <USBH_RegisterClass>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006b4e:	f7f9 fdc7 	bl	80006e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006b52:	4806      	ldr	r0, [pc, #24]	@ (8006b6c <MX_USB_HOST_Init+0x44>)
 8006b54:	f7fe fe0d 	bl	8005772 <USBH_Start>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006b5e:	f7f9 fdbf 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006b62:	bf00      	nop
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	08006b89 	.word	0x08006b89
 8006b6c:	2000013c 	.word	0x2000013c
 8006b70:	2000000c 	.word	0x2000000c

08006b74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006b78:	4802      	ldr	r0, [pc, #8]	@ (8006b84 <MX_USB_HOST_Process+0x10>)
 8006b7a:	f7fe fe0b 	bl	8005794 <USBH_Process>
}
 8006b7e:	bf00      	nop
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	2000013c 	.word	0x2000013c

08006b88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d819      	bhi.n	8006bd0 <USBH_UserProcess+0x48>
 8006b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <USBH_UserProcess+0x1c>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006bc1 	.word	0x08006bc1
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bc9 	.word	0x08006bc9
 8006bb4:	08006bb9 	.word	0x08006bb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006bb8:	4b08      	ldr	r3, [pc, #32]	@ (8006bdc <USBH_UserProcess+0x54>)
 8006bba:	2203      	movs	r2, #3
 8006bbc:	701a      	strb	r2, [r3, #0]
  break;
 8006bbe:	e008      	b.n	8006bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <USBH_UserProcess+0x54>)
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	701a      	strb	r2, [r3, #0]
  break;
 8006bc6:	e004      	b.n	8006bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006bc8:	4b04      	ldr	r3, [pc, #16]	@ (8006bdc <USBH_UserProcess+0x54>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
  break;
 8006bce:	e000      	b.n	8006bd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8006bd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	2000050c 	.word	0x2000050c

08006be0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bf0:	d113      	bne.n	8006c1a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <HAL_HCD_MspInit+0x44>)
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8006c24 <HAL_HCD_MspInit+0x44>)
 8006bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006bfc:	6153      	str	r3, [r2, #20]
 8006bfe:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <HAL_HCD_MspInit+0x44>)
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	2043      	movs	r0, #67	@ 0x43
 8006c10:	f7fa f847 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c14:	2043      	movs	r0, #67	@ 0x43
 8006c16:	f7fa f860 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000

08006c28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff f944 	bl	8005ec4 <USBH_LL_IncTimer>
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff f97a 	bl	8005f4c <USBH_LL_Connect>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff f982 	bl	8005f78 <USBH_LL_Disconnect>
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff f937 	bl	8005f18 <USBH_LL_PortEnabled>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff f936 	bl	8005f32 <USBH_LL_PortDisabled>
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d127      	bne.n	8006d32 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006ce2:	4a16      	ldr	r2, [pc, #88]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
  phost->pData = &hhcd_USB_OTG_FS;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a13      	ldr	r2, [pc, #76]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006cee:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cf2:	4b12      	ldr	r3, [pc, #72]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006cf4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006cf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006cfa:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006d00:	4b0e      	ldr	r3, [pc, #56]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006d06:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006d08:	2202      	movs	r2, #2
 8006d0a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006d12:	480a      	ldr	r0, [pc, #40]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006d14:	f7fa f9b1 	bl	800107a <HAL_HCD_Init>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 8006d1e:	f7f9 fcdf 	bl	80006e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006d22:	4806      	ldr	r0, [pc, #24]	@ (8006d3c <USBH_LL_Init+0x6c>)
 8006d24:	f7fa fdc3 	bl	80018ae <HAL_HCD_GetCurrentFrame>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff f8bb 	bl	8005ea8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000510 	.word	0x20000510

08006d40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fd33 	bl	80017c2 <HAL_HCD_Start>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f954 	bl	8007010 <USBH_Get_USB_Status>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fa fd3b 	bl	8001808 <HAL_HCD_Stop>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f939 	bl	8007010 <USBH_Get_USB_Status>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fa fd83 	bl	80018ca <HAL_HCD_GetCurrentSpeed>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d00c      	beq.n	8006de4 <USBH_LL_GetSpeed+0x38>
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d80d      	bhi.n	8006dea <USBH_LL_GetSpeed+0x3e>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <USBH_LL_GetSpeed+0x2c>
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d003      	beq.n	8006dde <USBH_LL_GetSpeed+0x32>
 8006dd6:	e008      	b.n	8006dea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]
    break;
 8006ddc:	e008      	b.n	8006df0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006dde:	2301      	movs	r3, #1
 8006de0:	73fb      	strb	r3, [r7, #15]
    break;
 8006de2:	e005      	b.n	8006df0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e002      	b.n	8006df0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006dea:	2301      	movs	r3, #1
 8006dec:	73fb      	strb	r3, [r7, #15]
    break;
 8006dee:	bf00      	nop
  }
  return  speed;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fa fd16 	bl	8001842 <HAL_HCD_ResetPort>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f8f7 	bl	8007010 <USBH_Get_USB_Status>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	4611      	mov	r1, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fa fd1d 	bl	8001886 <HAL_HCD_HC_GetXferCount>
 8006e4c:	4603      	mov	r3, r0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006e56:	b590      	push	{r4, r7, lr}
 8006e58:	b089      	sub	sp, #36	@ 0x24
 8006e5a:	af04      	add	r7, sp, #16
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	4608      	mov	r0, r1
 8006e60:	4611      	mov	r1, r2
 8006e62:	461a      	mov	r2, r3
 8006e64:	4603      	mov	r3, r0
 8006e66:	70fb      	strb	r3, [r7, #3]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70bb      	strb	r3, [r7, #2]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	@ 0x3c8
 8006e7e:	787c      	ldrb	r4, [r7, #1]
 8006e80:	78ba      	ldrb	r2, [r7, #2]
 8006e82:	78f9      	ldrb	r1, [r7, #3]
 8006e84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4623      	mov	r3, r4
 8006e96:	f7fa f952 	bl	800113e <HAL_HCD_HC_Init>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f8b5 	bl	8007010 <USBH_Get_USB_Status>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd90      	pop	{r4, r7, pc}

08006eb4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fa f9d5 	bl	8001282 <HAL_HCD_HC_Halt>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f896 	bl	8007010 <USBH_Get_USB_Status>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006ef2:	b590      	push	{r4, r7, lr}
 8006ef4:	b089      	sub	sp, #36	@ 0x24
 8006ef6:	af04      	add	r7, sp, #16
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	4608      	mov	r0, r1
 8006efc:	4611      	mov	r1, r2
 8006efe:	461a      	mov	r2, r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	70fb      	strb	r3, [r7, #3]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70bb      	strb	r3, [r7, #2]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 03c8 	ldr.w	r0, [r3, #968]	@ 0x3c8
 8006f1a:	787c      	ldrb	r4, [r7, #1]
 8006f1c:	78ba      	ldrb	r2, [r7, #2]
 8006f1e:	78f9      	ldrb	r1, [r7, #3]
 8006f20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f24:	9303      	str	r3, [sp, #12]
 8006f26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f28:	9302      	str	r3, [sp, #8]
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4623      	mov	r3, r4
 8006f36:	f7fa f9c7 	bl	80012c8 <HAL_HCD_HC_SubmitRequest>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 f865 	bl	8007010 <USBH_Get_USB_Status>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd90      	pop	{r4, r7, pc}

08006f54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fa fc77 	bl	800185e <HAL_HCD_HC_GetURBState>
 8006f70:	4603      	mov	r3, r0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8006f86:	20c8      	movs	r0, #200	@ 0xc8
 8006f88:	f7f9 fd90 	bl	8000aac <HAL_Delay>
  return USBH_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006fac:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	440b      	add	r3, r1
 8006fbc:	333b      	adds	r3, #59	@ 0x3b
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	440b      	add	r3, r1
 8006fd2:	3358      	adds	r3, #88	@ 0x58
 8006fd4:	78ba      	ldrb	r2, [r7, #2]
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e009      	b.n	8006fee <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4413      	add	r3, r2
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3359      	adds	r3, #89	@ 0x59
 8006fea:	78ba      	ldrb	r2, [r7, #2]
 8006fec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7f9 fd52 	bl	8000aac <HAL_Delay>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2b03      	cmp	r3, #3
 8007022:	d817      	bhi.n	8007054 <USBH_Get_USB_Status+0x44>
 8007024:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <USBH_Get_USB_Status+0x1c>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	0800703d 	.word	0x0800703d
 8007030:	08007043 	.word	0x08007043
 8007034:	08007049 	.word	0x08007049
 8007038:	0800704f 	.word	0x0800704f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
    break;
 8007040:	e00b      	b.n	800705a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007042:	2302      	movs	r3, #2
 8007044:	73fb      	strb	r3, [r7, #15]
    break;
 8007046:	e008      	b.n	800705a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
    break;
 800704c:	e005      	b.n	800705a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800704e:	2302      	movs	r3, #2
 8007050:	73fb      	strb	r3, [r7, #15]
    break;
 8007052:	e002      	b.n	800705a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007054:	2302      	movs	r3, #2
 8007056:	73fb      	strb	r3, [r7, #15]
    break;
 8007058:	bf00      	nop
  }
  return usb_status;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop

08007068 <malloc>:
 8007068:	4b02      	ldr	r3, [pc, #8]	@ (8007074 <malloc+0xc>)
 800706a:	4601      	mov	r1, r0
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	f000 b82d 	b.w	80070cc <_malloc_r>
 8007072:	bf00      	nop
 8007074:	20000038 	.word	0x20000038

08007078 <free>:
 8007078:	4b02      	ldr	r3, [pc, #8]	@ (8007084 <free+0xc>)
 800707a:	4601      	mov	r1, r0
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	f000 ba5d 	b.w	800753c <_free_r>
 8007082:	bf00      	nop
 8007084:	20000038 	.word	0x20000038

08007088 <sbrk_aligned>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4e0f      	ldr	r6, [pc, #60]	@ (80070c8 <sbrk_aligned+0x40>)
 800708c:	460c      	mov	r4, r1
 800708e:	6831      	ldr	r1, [r6, #0]
 8007090:	4605      	mov	r5, r0
 8007092:	b911      	cbnz	r1, 800709a <sbrk_aligned+0x12>
 8007094:	f000 fa02 	bl	800749c <_sbrk_r>
 8007098:	6030      	str	r0, [r6, #0]
 800709a:	4621      	mov	r1, r4
 800709c:	4628      	mov	r0, r5
 800709e:	f000 f9fd 	bl	800749c <_sbrk_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	d103      	bne.n	80070ae <sbrk_aligned+0x26>
 80070a6:	f04f 34ff 	mov.w	r4, #4294967295
 80070aa:	4620      	mov	r0, r4
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
 80070ae:	1cc4      	adds	r4, r0, #3
 80070b0:	f024 0403 	bic.w	r4, r4, #3
 80070b4:	42a0      	cmp	r0, r4
 80070b6:	d0f8      	beq.n	80070aa <sbrk_aligned+0x22>
 80070b8:	1a21      	subs	r1, r4, r0
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f9ee 	bl	800749c <_sbrk_r>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d1f2      	bne.n	80070aa <sbrk_aligned+0x22>
 80070c4:	e7ef      	b.n	80070a6 <sbrk_aligned+0x1e>
 80070c6:	bf00      	nop
 80070c8:	20000854 	.word	0x20000854

080070cc <_malloc_r>:
 80070cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d0:	1ccd      	adds	r5, r1, #3
 80070d2:	f025 0503 	bic.w	r5, r5, #3
 80070d6:	3508      	adds	r5, #8
 80070d8:	2d0c      	cmp	r5, #12
 80070da:	bf38      	it	cc
 80070dc:	250c      	movcc	r5, #12
 80070de:	2d00      	cmp	r5, #0
 80070e0:	4606      	mov	r6, r0
 80070e2:	db01      	blt.n	80070e8 <_malloc_r+0x1c>
 80070e4:	42a9      	cmp	r1, r5
 80070e6:	d904      	bls.n	80070f2 <_malloc_r+0x26>
 80070e8:	230c      	movs	r3, #12
 80070ea:	6033      	str	r3, [r6, #0]
 80070ec:	2000      	movs	r0, #0
 80070ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071c8 <_malloc_r+0xfc>
 80070f6:	f000 f869 	bl	80071cc <__malloc_lock>
 80070fa:	f8d8 3000 	ldr.w	r3, [r8]
 80070fe:	461c      	mov	r4, r3
 8007100:	bb44      	cbnz	r4, 8007154 <_malloc_r+0x88>
 8007102:	4629      	mov	r1, r5
 8007104:	4630      	mov	r0, r6
 8007106:	f7ff ffbf 	bl	8007088 <sbrk_aligned>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	4604      	mov	r4, r0
 800710e:	d158      	bne.n	80071c2 <_malloc_r+0xf6>
 8007110:	f8d8 4000 	ldr.w	r4, [r8]
 8007114:	4627      	mov	r7, r4
 8007116:	2f00      	cmp	r7, #0
 8007118:	d143      	bne.n	80071a2 <_malloc_r+0xd6>
 800711a:	2c00      	cmp	r4, #0
 800711c:	d04b      	beq.n	80071b6 <_malloc_r+0xea>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	4639      	mov	r1, r7
 8007122:	4630      	mov	r0, r6
 8007124:	eb04 0903 	add.w	r9, r4, r3
 8007128:	f000 f9b8 	bl	800749c <_sbrk_r>
 800712c:	4581      	cmp	r9, r0
 800712e:	d142      	bne.n	80071b6 <_malloc_r+0xea>
 8007130:	6821      	ldr	r1, [r4, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	1a6d      	subs	r5, r5, r1
 8007136:	4629      	mov	r1, r5
 8007138:	f7ff ffa6 	bl	8007088 <sbrk_aligned>
 800713c:	3001      	adds	r0, #1
 800713e:	d03a      	beq.n	80071b6 <_malloc_r+0xea>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	442b      	add	r3, r5
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	f8d8 3000 	ldr.w	r3, [r8]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	bb62      	cbnz	r2, 80071a8 <_malloc_r+0xdc>
 800714e:	f8c8 7000 	str.w	r7, [r8]
 8007152:	e00f      	b.n	8007174 <_malloc_r+0xa8>
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	1b52      	subs	r2, r2, r5
 8007158:	d420      	bmi.n	800719c <_malloc_r+0xd0>
 800715a:	2a0b      	cmp	r2, #11
 800715c:	d917      	bls.n	800718e <_malloc_r+0xc2>
 800715e:	1961      	adds	r1, r4, r5
 8007160:	42a3      	cmp	r3, r4
 8007162:	6025      	str	r5, [r4, #0]
 8007164:	bf18      	it	ne
 8007166:	6059      	strne	r1, [r3, #4]
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	bf08      	it	eq
 800716c:	f8c8 1000 	streq.w	r1, [r8]
 8007170:	5162      	str	r2, [r4, r5]
 8007172:	604b      	str	r3, [r1, #4]
 8007174:	4630      	mov	r0, r6
 8007176:	f000 f82f 	bl	80071d8 <__malloc_unlock>
 800717a:	f104 000b 	add.w	r0, r4, #11
 800717e:	1d23      	adds	r3, r4, #4
 8007180:	f020 0007 	bic.w	r0, r0, #7
 8007184:	1ac2      	subs	r2, r0, r3
 8007186:	bf1c      	itt	ne
 8007188:	1a1b      	subne	r3, r3, r0
 800718a:	50a3      	strne	r3, [r4, r2]
 800718c:	e7af      	b.n	80070ee <_malloc_r+0x22>
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	42a3      	cmp	r3, r4
 8007192:	bf0c      	ite	eq
 8007194:	f8c8 2000 	streq.w	r2, [r8]
 8007198:	605a      	strne	r2, [r3, #4]
 800719a:	e7eb      	b.n	8007174 <_malloc_r+0xa8>
 800719c:	4623      	mov	r3, r4
 800719e:	6864      	ldr	r4, [r4, #4]
 80071a0:	e7ae      	b.n	8007100 <_malloc_r+0x34>
 80071a2:	463c      	mov	r4, r7
 80071a4:	687f      	ldr	r7, [r7, #4]
 80071a6:	e7b6      	b.n	8007116 <_malloc_r+0x4a>
 80071a8:	461a      	mov	r2, r3
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d1fb      	bne.n	80071a8 <_malloc_r+0xdc>
 80071b0:	2300      	movs	r3, #0
 80071b2:	6053      	str	r3, [r2, #4]
 80071b4:	e7de      	b.n	8007174 <_malloc_r+0xa8>
 80071b6:	230c      	movs	r3, #12
 80071b8:	4630      	mov	r0, r6
 80071ba:	6033      	str	r3, [r6, #0]
 80071bc:	f000 f80c 	bl	80071d8 <__malloc_unlock>
 80071c0:	e794      	b.n	80070ec <_malloc_r+0x20>
 80071c2:	6005      	str	r5, [r0, #0]
 80071c4:	e7d6      	b.n	8007174 <_malloc_r+0xa8>
 80071c6:	bf00      	nop
 80071c8:	20000858 	.word	0x20000858

080071cc <__malloc_lock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	@ (80071d4 <__malloc_lock+0x8>)
 80071ce:	f000 b9b2 	b.w	8007536 <__retarget_lock_acquire_recursive>
 80071d2:	bf00      	nop
 80071d4:	2000099c 	.word	0x2000099c

080071d8 <__malloc_unlock>:
 80071d8:	4801      	ldr	r0, [pc, #4]	@ (80071e0 <__malloc_unlock+0x8>)
 80071da:	f000 b9ad 	b.w	8007538 <__retarget_lock_release_recursive>
 80071de:	bf00      	nop
 80071e0:	2000099c 	.word	0x2000099c

080071e4 <std>:
 80071e4:	2300      	movs	r3, #0
 80071e6:	b510      	push	{r4, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	e9c0 3300 	strd	r3, r3, [r0]
 80071ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071f2:	6083      	str	r3, [r0, #8]
 80071f4:	8181      	strh	r1, [r0, #12]
 80071f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80071f8:	81c2      	strh	r2, [r0, #14]
 80071fa:	6183      	str	r3, [r0, #24]
 80071fc:	4619      	mov	r1, r3
 80071fe:	2208      	movs	r2, #8
 8007200:	305c      	adds	r0, #92	@ 0x5c
 8007202:	f000 f90e 	bl	8007422 <memset>
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <std+0x58>)
 8007208:	6224      	str	r4, [r4, #32]
 800720a:	6263      	str	r3, [r4, #36]	@ 0x24
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <std+0x5c>)
 800720e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007210:	4b0c      	ldr	r3, [pc, #48]	@ (8007244 <std+0x60>)
 8007212:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007214:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <std+0x64>)
 8007216:	6323      	str	r3, [r4, #48]	@ 0x30
 8007218:	4b0c      	ldr	r3, [pc, #48]	@ (800724c <std+0x68>)
 800721a:	429c      	cmp	r4, r3
 800721c:	d006      	beq.n	800722c <std+0x48>
 800721e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007222:	4294      	cmp	r4, r2
 8007224:	d002      	beq.n	800722c <std+0x48>
 8007226:	33d0      	adds	r3, #208	@ 0xd0
 8007228:	429c      	cmp	r4, r3
 800722a:	d105      	bne.n	8007238 <std+0x54>
 800722c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007234:	f000 b97e 	b.w	8007534 <__retarget_lock_init_recursive>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	bf00      	nop
 800723c:	0800739d 	.word	0x0800739d
 8007240:	080073bf 	.word	0x080073bf
 8007244:	080073f7 	.word	0x080073f7
 8007248:	0800741b 	.word	0x0800741b
 800724c:	2000085c 	.word	0x2000085c

08007250 <stdio_exit_handler>:
 8007250:	4a02      	ldr	r2, [pc, #8]	@ (800725c <stdio_exit_handler+0xc>)
 8007252:	4903      	ldr	r1, [pc, #12]	@ (8007260 <stdio_exit_handler+0x10>)
 8007254:	4803      	ldr	r0, [pc, #12]	@ (8007264 <stdio_exit_handler+0x14>)
 8007256:	f000 b869 	b.w	800732c <_fwalk_sglue>
 800725a:	bf00      	nop
 800725c:	2000002c 	.word	0x2000002c
 8007260:	08007c71 	.word	0x08007c71
 8007264:	2000003c 	.word	0x2000003c

08007268 <cleanup_stdio>:
 8007268:	6841      	ldr	r1, [r0, #4]
 800726a:	4b0c      	ldr	r3, [pc, #48]	@ (800729c <cleanup_stdio+0x34>)
 800726c:	b510      	push	{r4, lr}
 800726e:	4299      	cmp	r1, r3
 8007270:	4604      	mov	r4, r0
 8007272:	d001      	beq.n	8007278 <cleanup_stdio+0x10>
 8007274:	f000 fcfc 	bl	8007c70 <_fflush_r>
 8007278:	68a1      	ldr	r1, [r4, #8]
 800727a:	4b09      	ldr	r3, [pc, #36]	@ (80072a0 <cleanup_stdio+0x38>)
 800727c:	4299      	cmp	r1, r3
 800727e:	d002      	beq.n	8007286 <cleanup_stdio+0x1e>
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fcf5 	bl	8007c70 <_fflush_r>
 8007286:	68e1      	ldr	r1, [r4, #12]
 8007288:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <cleanup_stdio+0x3c>)
 800728a:	4299      	cmp	r1, r3
 800728c:	d004      	beq.n	8007298 <cleanup_stdio+0x30>
 800728e:	4620      	mov	r0, r4
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	f000 bcec 	b.w	8007c70 <_fflush_r>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	2000085c 	.word	0x2000085c
 80072a0:	200008c4 	.word	0x200008c4
 80072a4:	2000092c 	.word	0x2000092c

080072a8 <global_stdio_init.part.0>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	4b0b      	ldr	r3, [pc, #44]	@ (80072d8 <global_stdio_init.part.0+0x30>)
 80072ac:	4c0b      	ldr	r4, [pc, #44]	@ (80072dc <global_stdio_init.part.0+0x34>)
 80072ae:	4a0c      	ldr	r2, [pc, #48]	@ (80072e0 <global_stdio_init.part.0+0x38>)
 80072b0:	4620      	mov	r0, r4
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	2104      	movs	r1, #4
 80072b6:	2200      	movs	r2, #0
 80072b8:	f7ff ff94 	bl	80071e4 <std>
 80072bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072c0:	2201      	movs	r2, #1
 80072c2:	2109      	movs	r1, #9
 80072c4:	f7ff ff8e 	bl	80071e4 <std>
 80072c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072cc:	2202      	movs	r2, #2
 80072ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d2:	2112      	movs	r1, #18
 80072d4:	f7ff bf86 	b.w	80071e4 <std>
 80072d8:	20000994 	.word	0x20000994
 80072dc:	2000085c 	.word	0x2000085c
 80072e0:	08007251 	.word	0x08007251

080072e4 <__sfp_lock_acquire>:
 80072e4:	4801      	ldr	r0, [pc, #4]	@ (80072ec <__sfp_lock_acquire+0x8>)
 80072e6:	f000 b926 	b.w	8007536 <__retarget_lock_acquire_recursive>
 80072ea:	bf00      	nop
 80072ec:	2000099d 	.word	0x2000099d

080072f0 <__sfp_lock_release>:
 80072f0:	4801      	ldr	r0, [pc, #4]	@ (80072f8 <__sfp_lock_release+0x8>)
 80072f2:	f000 b921 	b.w	8007538 <__retarget_lock_release_recursive>
 80072f6:	bf00      	nop
 80072f8:	2000099d 	.word	0x2000099d

080072fc <__sinit>:
 80072fc:	b510      	push	{r4, lr}
 80072fe:	4604      	mov	r4, r0
 8007300:	f7ff fff0 	bl	80072e4 <__sfp_lock_acquire>
 8007304:	6a23      	ldr	r3, [r4, #32]
 8007306:	b11b      	cbz	r3, 8007310 <__sinit+0x14>
 8007308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800730c:	f7ff bff0 	b.w	80072f0 <__sfp_lock_release>
 8007310:	4b04      	ldr	r3, [pc, #16]	@ (8007324 <__sinit+0x28>)
 8007312:	6223      	str	r3, [r4, #32]
 8007314:	4b04      	ldr	r3, [pc, #16]	@ (8007328 <__sinit+0x2c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f5      	bne.n	8007308 <__sinit+0xc>
 800731c:	f7ff ffc4 	bl	80072a8 <global_stdio_init.part.0>
 8007320:	e7f2      	b.n	8007308 <__sinit+0xc>
 8007322:	bf00      	nop
 8007324:	08007269 	.word	0x08007269
 8007328:	20000994 	.word	0x20000994

0800732c <_fwalk_sglue>:
 800732c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007330:	4607      	mov	r7, r0
 8007332:	4688      	mov	r8, r1
 8007334:	4614      	mov	r4, r2
 8007336:	2600      	movs	r6, #0
 8007338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800733c:	f1b9 0901 	subs.w	r9, r9, #1
 8007340:	d505      	bpl.n	800734e <_fwalk_sglue+0x22>
 8007342:	6824      	ldr	r4, [r4, #0]
 8007344:	2c00      	cmp	r4, #0
 8007346:	d1f7      	bne.n	8007338 <_fwalk_sglue+0xc>
 8007348:	4630      	mov	r0, r6
 800734a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d907      	bls.n	8007364 <_fwalk_sglue+0x38>
 8007354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007358:	3301      	adds	r3, #1
 800735a:	d003      	beq.n	8007364 <_fwalk_sglue+0x38>
 800735c:	4629      	mov	r1, r5
 800735e:	4638      	mov	r0, r7
 8007360:	47c0      	blx	r8
 8007362:	4306      	orrs	r6, r0
 8007364:	3568      	adds	r5, #104	@ 0x68
 8007366:	e7e9      	b.n	800733c <_fwalk_sglue+0x10>

08007368 <iprintf>:
 8007368:	b40f      	push	{r0, r1, r2, r3}
 800736a:	b507      	push	{r0, r1, r2, lr}
 800736c:	4906      	ldr	r1, [pc, #24]	@ (8007388 <iprintf+0x20>)
 800736e:	ab04      	add	r3, sp, #16
 8007370:	6808      	ldr	r0, [r1, #0]
 8007372:	f853 2b04 	ldr.w	r2, [r3], #4
 8007376:	6881      	ldr	r1, [r0, #8]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	f000 f94f 	bl	800761c <_vfiprintf_r>
 800737e:	b003      	add	sp, #12
 8007380:	f85d eb04 	ldr.w	lr, [sp], #4
 8007384:	b004      	add	sp, #16
 8007386:	4770      	bx	lr
 8007388:	20000038 	.word	0x20000038

0800738c <putchar>:
 800738c:	4b02      	ldr	r3, [pc, #8]	@ (8007398 <putchar+0xc>)
 800738e:	4601      	mov	r1, r0
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	6882      	ldr	r2, [r0, #8]
 8007394:	f000 bc94 	b.w	8007cc0 <_putc_r>
 8007398:	20000038 	.word	0x20000038

0800739c <__sread>:
 800739c:	b510      	push	{r4, lr}
 800739e:	460c      	mov	r4, r1
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	f000 f868 	bl	8007478 <_read_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	bfab      	itete	ge
 80073ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073ae:	89a3      	ldrhlt	r3, [r4, #12]
 80073b0:	181b      	addge	r3, r3, r0
 80073b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073b6:	bfac      	ite	ge
 80073b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073ba:	81a3      	strhlt	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__swrite>:
 80073be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	461f      	mov	r7, r3
 80073c4:	898b      	ldrh	r3, [r1, #12]
 80073c6:	4605      	mov	r5, r0
 80073c8:	05db      	lsls	r3, r3, #23
 80073ca:	460c      	mov	r4, r1
 80073cc:	4616      	mov	r6, r2
 80073ce:	d505      	bpl.n	80073dc <__swrite+0x1e>
 80073d0:	2302      	movs	r3, #2
 80073d2:	2200      	movs	r2, #0
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	f000 f83c 	bl	8007454 <_lseek_r>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	4632      	mov	r2, r6
 80073e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	4628      	mov	r0, r5
 80073e8:	463b      	mov	r3, r7
 80073ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	f000 b863 	b.w	80074bc <_write_r>

080073f6 <__sseek>:
 80073f6:	b510      	push	{r4, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fe:	f000 f829 	bl	8007454 <_lseek_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	bf15      	itete	ne
 8007408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800740a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800740e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007412:	81a3      	strheq	r3, [r4, #12]
 8007414:	bf18      	it	ne
 8007416:	81a3      	strhne	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__sclose>:
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 b809 	b.w	8007434 <_close_r>

08007422 <memset>:
 8007422:	4603      	mov	r3, r0
 8007424:	4402      	add	r2, r0
 8007426:	4293      	cmp	r3, r2
 8007428:	d100      	bne.n	800742c <memset+0xa>
 800742a:	4770      	bx	lr
 800742c:	f803 1b01 	strb.w	r1, [r3], #1
 8007430:	e7f9      	b.n	8007426 <memset+0x4>
	...

08007434 <_close_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	2300      	movs	r3, #0
 8007438:	4d05      	ldr	r5, [pc, #20]	@ (8007450 <_close_r+0x1c>)
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7f9 fa3f 	bl	80008c2 <_close>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_close_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_close_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000998 	.word	0x20000998

08007454 <_lseek_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4604      	mov	r4, r0
 8007458:	4608      	mov	r0, r1
 800745a:	4611      	mov	r1, r2
 800745c:	2200      	movs	r2, #0
 800745e:	4d05      	ldr	r5, [pc, #20]	@ (8007474 <_lseek_r+0x20>)
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f7f9 fa51 	bl	800090a <_lseek>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_lseek_r+0x1e>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_lseek_r+0x1e>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000998 	.word	0x20000998

08007478 <_read_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	2200      	movs	r2, #0
 8007482:	4d05      	ldr	r5, [pc, #20]	@ (8007498 <_read_r+0x20>)
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	f7f9 f9e2 	bl	8000850 <_read>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_read_r+0x1e>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_read_r+0x1e>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20000998 	.word	0x20000998

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4d05      	ldr	r5, [pc, #20]	@ (80074b8 <_sbrk_r+0x1c>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7f9 fa3c 	bl	8000924 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20000998 	.word	0x20000998

080074bc <_write_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	4d05      	ldr	r5, [pc, #20]	@ (80074dc <_write_r+0x20>)
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7f9 f9dd 	bl	800088a <_write>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_write_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_write_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000998 	.word	0x20000998

080074e0 <__errno>:
 80074e0:	4b01      	ldr	r3, [pc, #4]	@ (80074e8 <__errno+0x8>)
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20000038 	.word	0x20000038

080074ec <__libc_init_array>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	2600      	movs	r6, #0
 80074f0:	4d0c      	ldr	r5, [pc, #48]	@ (8007524 <__libc_init_array+0x38>)
 80074f2:	4c0d      	ldr	r4, [pc, #52]	@ (8007528 <__libc_init_array+0x3c>)
 80074f4:	1b64      	subs	r4, r4, r5
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	42a6      	cmp	r6, r4
 80074fa:	d109      	bne.n	8007510 <__libc_init_array+0x24>
 80074fc:	f000 fd3a 	bl	8007f74 <_init>
 8007500:	2600      	movs	r6, #0
 8007502:	4d0a      	ldr	r5, [pc, #40]	@ (800752c <__libc_init_array+0x40>)
 8007504:	4c0a      	ldr	r4, [pc, #40]	@ (8007530 <__libc_init_array+0x44>)
 8007506:	1b64      	subs	r4, r4, r5
 8007508:	10a4      	asrs	r4, r4, #2
 800750a:	42a6      	cmp	r6, r4
 800750c:	d105      	bne.n	800751a <__libc_init_array+0x2e>
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	f855 3b04 	ldr.w	r3, [r5], #4
 8007514:	4798      	blx	r3
 8007516:	3601      	adds	r6, #1
 8007518:	e7ee      	b.n	80074f8 <__libc_init_array+0xc>
 800751a:	f855 3b04 	ldr.w	r3, [r5], #4
 800751e:	4798      	blx	r3
 8007520:	3601      	adds	r6, #1
 8007522:	e7f2      	b.n	800750a <__libc_init_array+0x1e>
 8007524:	08008734 	.word	0x08008734
 8007528:	08008734 	.word	0x08008734
 800752c:	08008734 	.word	0x08008734
 8007530:	08008738 	.word	0x08008738

08007534 <__retarget_lock_init_recursive>:
 8007534:	4770      	bx	lr

08007536 <__retarget_lock_acquire_recursive>:
 8007536:	4770      	bx	lr

08007538 <__retarget_lock_release_recursive>:
 8007538:	4770      	bx	lr
	...

0800753c <_free_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4605      	mov	r5, r0
 8007540:	2900      	cmp	r1, #0
 8007542:	d040      	beq.n	80075c6 <_free_r+0x8a>
 8007544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007548:	1f0c      	subs	r4, r1, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	bfb8      	it	lt
 800754e:	18e4      	addlt	r4, r4, r3
 8007550:	f7ff fe3c 	bl	80071cc <__malloc_lock>
 8007554:	4a1c      	ldr	r2, [pc, #112]	@ (80075c8 <_free_r+0x8c>)
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	b933      	cbnz	r3, 8007568 <_free_r+0x2c>
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	6014      	str	r4, [r2, #0]
 800755e:	4628      	mov	r0, r5
 8007560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007564:	f7ff be38 	b.w	80071d8 <__malloc_unlock>
 8007568:	42a3      	cmp	r3, r4
 800756a:	d908      	bls.n	800757e <_free_r+0x42>
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	1821      	adds	r1, r4, r0
 8007570:	428b      	cmp	r3, r1
 8007572:	bf01      	itttt	eq
 8007574:	6819      	ldreq	r1, [r3, #0]
 8007576:	685b      	ldreq	r3, [r3, #4]
 8007578:	1809      	addeq	r1, r1, r0
 800757a:	6021      	streq	r1, [r4, #0]
 800757c:	e7ed      	b.n	800755a <_free_r+0x1e>
 800757e:	461a      	mov	r2, r3
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	b10b      	cbz	r3, 8007588 <_free_r+0x4c>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d9fa      	bls.n	800757e <_free_r+0x42>
 8007588:	6811      	ldr	r1, [r2, #0]
 800758a:	1850      	adds	r0, r2, r1
 800758c:	42a0      	cmp	r0, r4
 800758e:	d10b      	bne.n	80075a8 <_free_r+0x6c>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	4401      	add	r1, r0
 8007594:	1850      	adds	r0, r2, r1
 8007596:	4283      	cmp	r3, r0
 8007598:	6011      	str	r1, [r2, #0]
 800759a:	d1e0      	bne.n	800755e <_free_r+0x22>
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4408      	add	r0, r1
 80075a2:	6010      	str	r0, [r2, #0]
 80075a4:	6053      	str	r3, [r2, #4]
 80075a6:	e7da      	b.n	800755e <_free_r+0x22>
 80075a8:	d902      	bls.n	80075b0 <_free_r+0x74>
 80075aa:	230c      	movs	r3, #12
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	e7d6      	b.n	800755e <_free_r+0x22>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf01      	itttt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	1809      	addeq	r1, r1, r0
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	6054      	str	r4, [r2, #4]
 80075c4:	e7cb      	b.n	800755e <_free_r+0x22>
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	20000858 	.word	0x20000858

080075cc <__sfputc_r>:
 80075cc:	6893      	ldr	r3, [r2, #8]
 80075ce:	b410      	push	{r4}
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	6093      	str	r3, [r2, #8]
 80075d6:	da07      	bge.n	80075e8 <__sfputc_r+0x1c>
 80075d8:	6994      	ldr	r4, [r2, #24]
 80075da:	42a3      	cmp	r3, r4
 80075dc:	db01      	blt.n	80075e2 <__sfputc_r+0x16>
 80075de:	290a      	cmp	r1, #10
 80075e0:	d102      	bne.n	80075e8 <__sfputc_r+0x1c>
 80075e2:	bc10      	pop	{r4}
 80075e4:	f000 bba0 	b.w	8007d28 <__swbuf_r>
 80075e8:	6813      	ldr	r3, [r2, #0]
 80075ea:	1c58      	adds	r0, r3, #1
 80075ec:	6010      	str	r0, [r2, #0]
 80075ee:	7019      	strb	r1, [r3, #0]
 80075f0:	4608      	mov	r0, r1
 80075f2:	bc10      	pop	{r4}
 80075f4:	4770      	bx	lr

080075f6 <__sfputs_r>:
 80075f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f8:	4606      	mov	r6, r0
 80075fa:	460f      	mov	r7, r1
 80075fc:	4614      	mov	r4, r2
 80075fe:	18d5      	adds	r5, r2, r3
 8007600:	42ac      	cmp	r4, r5
 8007602:	d101      	bne.n	8007608 <__sfputs_r+0x12>
 8007604:	2000      	movs	r0, #0
 8007606:	e007      	b.n	8007618 <__sfputs_r+0x22>
 8007608:	463a      	mov	r2, r7
 800760a:	4630      	mov	r0, r6
 800760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007610:	f7ff ffdc 	bl	80075cc <__sfputc_r>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d1f3      	bne.n	8007600 <__sfputs_r+0xa>
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800761c <_vfiprintf_r>:
 800761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	460d      	mov	r5, r1
 8007622:	4614      	mov	r4, r2
 8007624:	4698      	mov	r8, r3
 8007626:	4606      	mov	r6, r0
 8007628:	b09d      	sub	sp, #116	@ 0x74
 800762a:	b118      	cbz	r0, 8007634 <_vfiprintf_r+0x18>
 800762c:	6a03      	ldr	r3, [r0, #32]
 800762e:	b90b      	cbnz	r3, 8007634 <_vfiprintf_r+0x18>
 8007630:	f7ff fe64 	bl	80072fc <__sinit>
 8007634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007636:	07d9      	lsls	r1, r3, #31
 8007638:	d405      	bmi.n	8007646 <_vfiprintf_r+0x2a>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	059a      	lsls	r2, r3, #22
 800763e:	d402      	bmi.n	8007646 <_vfiprintf_r+0x2a>
 8007640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007642:	f7ff ff78 	bl	8007536 <__retarget_lock_acquire_recursive>
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	071b      	lsls	r3, r3, #28
 800764a:	d501      	bpl.n	8007650 <_vfiprintf_r+0x34>
 800764c:	692b      	ldr	r3, [r5, #16]
 800764e:	b99b      	cbnz	r3, 8007678 <_vfiprintf_r+0x5c>
 8007650:	4629      	mov	r1, r5
 8007652:	4630      	mov	r0, r6
 8007654:	f000 fba6 	bl	8007da4 <__swsetup_r>
 8007658:	b170      	cbz	r0, 8007678 <_vfiprintf_r+0x5c>
 800765a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800765c:	07dc      	lsls	r4, r3, #31
 800765e:	d504      	bpl.n	800766a <_vfiprintf_r+0x4e>
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	b01d      	add	sp, #116	@ 0x74
 8007666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	0598      	lsls	r0, r3, #22
 800766e:	d4f7      	bmi.n	8007660 <_vfiprintf_r+0x44>
 8007670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007672:	f7ff ff61 	bl	8007538 <__retarget_lock_release_recursive>
 8007676:	e7f3      	b.n	8007660 <_vfiprintf_r+0x44>
 8007678:	2300      	movs	r3, #0
 800767a:	9309      	str	r3, [sp, #36]	@ 0x24
 800767c:	2320      	movs	r3, #32
 800767e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007682:	2330      	movs	r3, #48	@ 0x30
 8007684:	f04f 0901 	mov.w	r9, #1
 8007688:	f8cd 800c 	str.w	r8, [sp, #12]
 800768c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007838 <_vfiprintf_r+0x21c>
 8007690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007694:	4623      	mov	r3, r4
 8007696:	469a      	mov	sl, r3
 8007698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800769c:	b10a      	cbz	r2, 80076a2 <_vfiprintf_r+0x86>
 800769e:	2a25      	cmp	r2, #37	@ 0x25
 80076a0:	d1f9      	bne.n	8007696 <_vfiprintf_r+0x7a>
 80076a2:	ebba 0b04 	subs.w	fp, sl, r4
 80076a6:	d00b      	beq.n	80076c0 <_vfiprintf_r+0xa4>
 80076a8:	465b      	mov	r3, fp
 80076aa:	4622      	mov	r2, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ffa1 	bl	80075f6 <__sfputs_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	f000 80a7 	beq.w	8007808 <_vfiprintf_r+0x1ec>
 80076ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076bc:	445a      	add	r2, fp
 80076be:	9209      	str	r2, [sp, #36]	@ 0x24
 80076c0:	f89a 3000 	ldrb.w	r3, [sl]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 809f 	beq.w	8007808 <_vfiprintf_r+0x1ec>
 80076ca:	2300      	movs	r3, #0
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d4:	f10a 0a01 	add.w	sl, sl, #1
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80076e2:	4654      	mov	r4, sl
 80076e4:	2205      	movs	r2, #5
 80076e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ea:	4853      	ldr	r0, [pc, #332]	@ (8007838 <_vfiprintf_r+0x21c>)
 80076ec:	f000 fbb0 	bl	8007e50 <memchr>
 80076f0:	9a04      	ldr	r2, [sp, #16]
 80076f2:	b9d8      	cbnz	r0, 800772c <_vfiprintf_r+0x110>
 80076f4:	06d1      	lsls	r1, r2, #27
 80076f6:	bf44      	itt	mi
 80076f8:	2320      	movmi	r3, #32
 80076fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076fe:	0713      	lsls	r3, r2, #28
 8007700:	bf44      	itt	mi
 8007702:	232b      	movmi	r3, #43	@ 0x2b
 8007704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007708:	f89a 3000 	ldrb.w	r3, [sl]
 800770c:	2b2a      	cmp	r3, #42	@ 0x2a
 800770e:	d015      	beq.n	800773c <_vfiprintf_r+0x120>
 8007710:	4654      	mov	r4, sl
 8007712:	2000      	movs	r0, #0
 8007714:	f04f 0c0a 	mov.w	ip, #10
 8007718:	9a07      	ldr	r2, [sp, #28]
 800771a:	4621      	mov	r1, r4
 800771c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007720:	3b30      	subs	r3, #48	@ 0x30
 8007722:	2b09      	cmp	r3, #9
 8007724:	d94b      	bls.n	80077be <_vfiprintf_r+0x1a2>
 8007726:	b1b0      	cbz	r0, 8007756 <_vfiprintf_r+0x13a>
 8007728:	9207      	str	r2, [sp, #28]
 800772a:	e014      	b.n	8007756 <_vfiprintf_r+0x13a>
 800772c:	eba0 0308 	sub.w	r3, r0, r8
 8007730:	fa09 f303 	lsl.w	r3, r9, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	46a2      	mov	sl, r4
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	e7d2      	b.n	80076e2 <_vfiprintf_r+0xc6>
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	1d19      	adds	r1, r3, #4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	9103      	str	r1, [sp, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfbb      	ittet	lt
 8007748:	425b      	neglt	r3, r3
 800774a:	f042 0202 	orrlt.w	r2, r2, #2
 800774e:	9307      	strge	r3, [sp, #28]
 8007750:	9307      	strlt	r3, [sp, #28]
 8007752:	bfb8      	it	lt
 8007754:	9204      	strlt	r2, [sp, #16]
 8007756:	7823      	ldrb	r3, [r4, #0]
 8007758:	2b2e      	cmp	r3, #46	@ 0x2e
 800775a:	d10a      	bne.n	8007772 <_vfiprintf_r+0x156>
 800775c:	7863      	ldrb	r3, [r4, #1]
 800775e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007760:	d132      	bne.n	80077c8 <_vfiprintf_r+0x1ac>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	3402      	adds	r4, #2
 8007766:	1d1a      	adds	r2, r3, #4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	9203      	str	r2, [sp, #12]
 800776c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800783c <_vfiprintf_r+0x220>
 8007776:	2203      	movs	r2, #3
 8007778:	4650      	mov	r0, sl
 800777a:	7821      	ldrb	r1, [r4, #0]
 800777c:	f000 fb68 	bl	8007e50 <memchr>
 8007780:	b138      	cbz	r0, 8007792 <_vfiprintf_r+0x176>
 8007782:	2240      	movs	r2, #64	@ 0x40
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	eba0 000a 	sub.w	r0, r0, sl
 800778a:	4082      	lsls	r2, r0
 800778c:	4313      	orrs	r3, r2
 800778e:	3401      	adds	r4, #1
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007796:	2206      	movs	r2, #6
 8007798:	4829      	ldr	r0, [pc, #164]	@ (8007840 <_vfiprintf_r+0x224>)
 800779a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800779e:	f000 fb57 	bl	8007e50 <memchr>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d03f      	beq.n	8007826 <_vfiprintf_r+0x20a>
 80077a6:	4b27      	ldr	r3, [pc, #156]	@ (8007844 <_vfiprintf_r+0x228>)
 80077a8:	bb1b      	cbnz	r3, 80077f2 <_vfiprintf_r+0x1d6>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	3307      	adds	r3, #7
 80077ae:	f023 0307 	bic.w	r3, r3, #7
 80077b2:	3308      	adds	r3, #8
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b8:	443b      	add	r3, r7
 80077ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80077bc:	e76a      	b.n	8007694 <_vfiprintf_r+0x78>
 80077be:	460c      	mov	r4, r1
 80077c0:	2001      	movs	r0, #1
 80077c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077c6:	e7a8      	b.n	800771a <_vfiprintf_r+0xfe>
 80077c8:	2300      	movs	r3, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4619      	mov	r1, r3
 80077d0:	3401      	adds	r4, #1
 80077d2:	9305      	str	r3, [sp, #20]
 80077d4:	4620      	mov	r0, r4
 80077d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077da:	3a30      	subs	r2, #48	@ 0x30
 80077dc:	2a09      	cmp	r2, #9
 80077de:	d903      	bls.n	80077e8 <_vfiprintf_r+0x1cc>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0c6      	beq.n	8007772 <_vfiprintf_r+0x156>
 80077e4:	9105      	str	r1, [sp, #20]
 80077e6:	e7c4      	b.n	8007772 <_vfiprintf_r+0x156>
 80077e8:	4604      	mov	r4, r0
 80077ea:	2301      	movs	r3, #1
 80077ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80077f0:	e7f0      	b.n	80077d4 <_vfiprintf_r+0x1b8>
 80077f2:	ab03      	add	r3, sp, #12
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	462a      	mov	r2, r5
 80077f8:	4630      	mov	r0, r6
 80077fa:	4b13      	ldr	r3, [pc, #76]	@ (8007848 <_vfiprintf_r+0x22c>)
 80077fc:	a904      	add	r1, sp, #16
 80077fe:	f3af 8000 	nop.w
 8007802:	4607      	mov	r7, r0
 8007804:	1c78      	adds	r0, r7, #1
 8007806:	d1d6      	bne.n	80077b6 <_vfiprintf_r+0x19a>
 8007808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800780a:	07d9      	lsls	r1, r3, #31
 800780c:	d405      	bmi.n	800781a <_vfiprintf_r+0x1fe>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	059a      	lsls	r2, r3, #22
 8007812:	d402      	bmi.n	800781a <_vfiprintf_r+0x1fe>
 8007814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007816:	f7ff fe8f 	bl	8007538 <__retarget_lock_release_recursive>
 800781a:	89ab      	ldrh	r3, [r5, #12]
 800781c:	065b      	lsls	r3, r3, #25
 800781e:	f53f af1f 	bmi.w	8007660 <_vfiprintf_r+0x44>
 8007822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007824:	e71e      	b.n	8007664 <_vfiprintf_r+0x48>
 8007826:	ab03      	add	r3, sp, #12
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	462a      	mov	r2, r5
 800782c:	4630      	mov	r0, r6
 800782e:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <_vfiprintf_r+0x22c>)
 8007830:	a904      	add	r1, sp, #16
 8007832:	f000 f87d 	bl	8007930 <_printf_i>
 8007836:	e7e4      	b.n	8007802 <_vfiprintf_r+0x1e6>
 8007838:	080086f8 	.word	0x080086f8
 800783c:	080086fe 	.word	0x080086fe
 8007840:	08008702 	.word	0x08008702
 8007844:	00000000 	.word	0x00000000
 8007848:	080075f7 	.word	0x080075f7

0800784c <_printf_common>:
 800784c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	4616      	mov	r6, r2
 8007852:	4698      	mov	r8, r3
 8007854:	688a      	ldr	r2, [r1, #8]
 8007856:	690b      	ldr	r3, [r1, #16]
 8007858:	4607      	mov	r7, r0
 800785a:	4293      	cmp	r3, r2
 800785c:	bfb8      	it	lt
 800785e:	4613      	movlt	r3, r2
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007866:	460c      	mov	r4, r1
 8007868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800786c:	b10a      	cbz	r2, 8007872 <_printf_common+0x26>
 800786e:	3301      	adds	r3, #1
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	0699      	lsls	r1, r3, #26
 8007876:	bf42      	ittt	mi
 8007878:	6833      	ldrmi	r3, [r6, #0]
 800787a:	3302      	addmi	r3, #2
 800787c:	6033      	strmi	r3, [r6, #0]
 800787e:	6825      	ldr	r5, [r4, #0]
 8007880:	f015 0506 	ands.w	r5, r5, #6
 8007884:	d106      	bne.n	8007894 <_printf_common+0x48>
 8007886:	f104 0a19 	add.w	sl, r4, #25
 800788a:	68e3      	ldr	r3, [r4, #12]
 800788c:	6832      	ldr	r2, [r6, #0]
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	42ab      	cmp	r3, r5
 8007892:	dc2b      	bgt.n	80078ec <_printf_common+0xa0>
 8007894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	3b00      	subs	r3, #0
 800789c:	bf18      	it	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	0692      	lsls	r2, r2, #26
 80078a2:	d430      	bmi.n	8007906 <_printf_common+0xba>
 80078a4:	4641      	mov	r1, r8
 80078a6:	4638      	mov	r0, r7
 80078a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078ac:	47c8      	blx	r9
 80078ae:	3001      	adds	r0, #1
 80078b0:	d023      	beq.n	80078fa <_printf_common+0xae>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	f003 0306 	and.w	r3, r3, #6
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	bf14      	ite	ne
 80078be:	2500      	movne	r5, #0
 80078c0:	6833      	ldreq	r3, [r6, #0]
 80078c2:	f04f 0600 	mov.w	r6, #0
 80078c6:	bf08      	it	eq
 80078c8:	68e5      	ldreq	r5, [r4, #12]
 80078ca:	f104 041a 	add.w	r4, r4, #26
 80078ce:	bf08      	it	eq
 80078d0:	1aed      	subeq	r5, r5, r3
 80078d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078d6:	bf08      	it	eq
 80078d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078dc:	4293      	cmp	r3, r2
 80078de:	bfc4      	itt	gt
 80078e0:	1a9b      	subgt	r3, r3, r2
 80078e2:	18ed      	addgt	r5, r5, r3
 80078e4:	42b5      	cmp	r5, r6
 80078e6:	d11a      	bne.n	800791e <_printf_common+0xd2>
 80078e8:	2000      	movs	r0, #0
 80078ea:	e008      	b.n	80078fe <_printf_common+0xb2>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4652      	mov	r2, sl
 80078f0:	4641      	mov	r1, r8
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c8      	blx	r9
 80078f6:	3001      	adds	r0, #1
 80078f8:	d103      	bne.n	8007902 <_printf_common+0xb6>
 80078fa:	f04f 30ff 	mov.w	r0, #4294967295
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	3501      	adds	r5, #1
 8007904:	e7c1      	b.n	800788a <_printf_common+0x3e>
 8007906:	2030      	movs	r0, #48	@ 0x30
 8007908:	18e1      	adds	r1, r4, r3
 800790a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007914:	4422      	add	r2, r4
 8007916:	3302      	adds	r3, #2
 8007918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800791c:	e7c2      	b.n	80078a4 <_printf_common+0x58>
 800791e:	2301      	movs	r3, #1
 8007920:	4622      	mov	r2, r4
 8007922:	4641      	mov	r1, r8
 8007924:	4638      	mov	r0, r7
 8007926:	47c8      	blx	r9
 8007928:	3001      	adds	r0, #1
 800792a:	d0e6      	beq.n	80078fa <_printf_common+0xae>
 800792c:	3601      	adds	r6, #1
 800792e:	e7d9      	b.n	80078e4 <_printf_common+0x98>

08007930 <_printf_i>:
 8007930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	7e0f      	ldrb	r7, [r1, #24]
 8007936:	4691      	mov	r9, r2
 8007938:	2f78      	cmp	r7, #120	@ 0x78
 800793a:	4680      	mov	r8, r0
 800793c:	460c      	mov	r4, r1
 800793e:	469a      	mov	sl, r3
 8007940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007946:	d807      	bhi.n	8007958 <_printf_i+0x28>
 8007948:	2f62      	cmp	r7, #98	@ 0x62
 800794a:	d80a      	bhi.n	8007962 <_printf_i+0x32>
 800794c:	2f00      	cmp	r7, #0
 800794e:	f000 80d3 	beq.w	8007af8 <_printf_i+0x1c8>
 8007952:	2f58      	cmp	r7, #88	@ 0x58
 8007954:	f000 80ba 	beq.w	8007acc <_printf_i+0x19c>
 8007958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800795c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007960:	e03a      	b.n	80079d8 <_printf_i+0xa8>
 8007962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007966:	2b15      	cmp	r3, #21
 8007968:	d8f6      	bhi.n	8007958 <_printf_i+0x28>
 800796a:	a101      	add	r1, pc, #4	@ (adr r1, 8007970 <_printf_i+0x40>)
 800796c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007970:	080079c9 	.word	0x080079c9
 8007974:	080079dd 	.word	0x080079dd
 8007978:	08007959 	.word	0x08007959
 800797c:	08007959 	.word	0x08007959
 8007980:	08007959 	.word	0x08007959
 8007984:	08007959 	.word	0x08007959
 8007988:	080079dd 	.word	0x080079dd
 800798c:	08007959 	.word	0x08007959
 8007990:	08007959 	.word	0x08007959
 8007994:	08007959 	.word	0x08007959
 8007998:	08007959 	.word	0x08007959
 800799c:	08007adf 	.word	0x08007adf
 80079a0:	08007a07 	.word	0x08007a07
 80079a4:	08007a99 	.word	0x08007a99
 80079a8:	08007959 	.word	0x08007959
 80079ac:	08007959 	.word	0x08007959
 80079b0:	08007b01 	.word	0x08007b01
 80079b4:	08007959 	.word	0x08007959
 80079b8:	08007a07 	.word	0x08007a07
 80079bc:	08007959 	.word	0x08007959
 80079c0:	08007959 	.word	0x08007959
 80079c4:	08007aa1 	.word	0x08007aa1
 80079c8:	6833      	ldr	r3, [r6, #0]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6032      	str	r2, [r6, #0]
 80079d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079d8:	2301      	movs	r3, #1
 80079da:	e09e      	b.n	8007b1a <_printf_i+0x1ea>
 80079dc:	6833      	ldr	r3, [r6, #0]
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	1d19      	adds	r1, r3, #4
 80079e2:	6031      	str	r1, [r6, #0]
 80079e4:	0606      	lsls	r6, r0, #24
 80079e6:	d501      	bpl.n	80079ec <_printf_i+0xbc>
 80079e8:	681d      	ldr	r5, [r3, #0]
 80079ea:	e003      	b.n	80079f4 <_printf_i+0xc4>
 80079ec:	0645      	lsls	r5, r0, #25
 80079ee:	d5fb      	bpl.n	80079e8 <_printf_i+0xb8>
 80079f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079f4:	2d00      	cmp	r5, #0
 80079f6:	da03      	bge.n	8007a00 <_printf_i+0xd0>
 80079f8:	232d      	movs	r3, #45	@ 0x2d
 80079fa:	426d      	negs	r5, r5
 80079fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a00:	230a      	movs	r3, #10
 8007a02:	4859      	ldr	r0, [pc, #356]	@ (8007b68 <_printf_i+0x238>)
 8007a04:	e011      	b.n	8007a2a <_printf_i+0xfa>
 8007a06:	6821      	ldr	r1, [r4, #0]
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	0608      	lsls	r0, r1, #24
 8007a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a10:	d402      	bmi.n	8007a18 <_printf_i+0xe8>
 8007a12:	0649      	lsls	r1, r1, #25
 8007a14:	bf48      	it	mi
 8007a16:	b2ad      	uxthmi	r5, r5
 8007a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	bf14      	ite	ne
 8007a1e:	230a      	movne	r3, #10
 8007a20:	2308      	moveq	r3, #8
 8007a22:	4851      	ldr	r0, [pc, #324]	@ (8007b68 <_printf_i+0x238>)
 8007a24:	2100      	movs	r1, #0
 8007a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a2a:	6866      	ldr	r6, [r4, #4]
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	bfa8      	it	ge
 8007a30:	6821      	ldrge	r1, [r4, #0]
 8007a32:	60a6      	str	r6, [r4, #8]
 8007a34:	bfa4      	itt	ge
 8007a36:	f021 0104 	bicge.w	r1, r1, #4
 8007a3a:	6021      	strge	r1, [r4, #0]
 8007a3c:	b90d      	cbnz	r5, 8007a42 <_printf_i+0x112>
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d04b      	beq.n	8007ada <_printf_i+0x1aa>
 8007a42:	4616      	mov	r6, r2
 8007a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a48:	fb03 5711 	mls	r7, r3, r1, r5
 8007a4c:	5dc7      	ldrb	r7, [r0, r7]
 8007a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a52:	462f      	mov	r7, r5
 8007a54:	42bb      	cmp	r3, r7
 8007a56:	460d      	mov	r5, r1
 8007a58:	d9f4      	bls.n	8007a44 <_printf_i+0x114>
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d10b      	bne.n	8007a76 <_printf_i+0x146>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	07df      	lsls	r7, r3, #31
 8007a62:	d508      	bpl.n	8007a76 <_printf_i+0x146>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	6861      	ldr	r1, [r4, #4]
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	bfde      	ittt	le
 8007a6c:	2330      	movle	r3, #48	@ 0x30
 8007a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a76:	1b92      	subs	r2, r2, r6
 8007a78:	6122      	str	r2, [r4, #16]
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f8cd a000 	str.w	sl, [sp]
 8007a84:	aa03      	add	r2, sp, #12
 8007a86:	f7ff fee1 	bl	800784c <_printf_common>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d14a      	bne.n	8007b24 <_printf_i+0x1f4>
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	b004      	add	sp, #16
 8007a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	f043 0320 	orr.w	r3, r3, #32
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	2778      	movs	r7, #120	@ 0x78
 8007aa2:	4832      	ldr	r0, [pc, #200]	@ (8007b6c <_printf_i+0x23c>)
 8007aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	6831      	ldr	r1, [r6, #0]
 8007aac:	061f      	lsls	r7, r3, #24
 8007aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ab2:	d402      	bmi.n	8007aba <_printf_i+0x18a>
 8007ab4:	065f      	lsls	r7, r3, #25
 8007ab6:	bf48      	it	mi
 8007ab8:	b2ad      	uxthmi	r5, r5
 8007aba:	6031      	str	r1, [r6, #0]
 8007abc:	07d9      	lsls	r1, r3, #31
 8007abe:	bf44      	itt	mi
 8007ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac4:	6023      	strmi	r3, [r4, #0]
 8007ac6:	b11d      	cbz	r5, 8007ad0 <_printf_i+0x1a0>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	e7ab      	b.n	8007a24 <_printf_i+0xf4>
 8007acc:	4826      	ldr	r0, [pc, #152]	@ (8007b68 <_printf_i+0x238>)
 8007ace:	e7e9      	b.n	8007aa4 <_printf_i+0x174>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	f023 0320 	bic.w	r3, r3, #32
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	e7f6      	b.n	8007ac8 <_printf_i+0x198>
 8007ada:	4616      	mov	r6, r2
 8007adc:	e7bd      	b.n	8007a5a <_printf_i+0x12a>
 8007ade:	6833      	ldr	r3, [r6, #0]
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	1d18      	adds	r0, r3, #4
 8007ae4:	6961      	ldr	r1, [r4, #20]
 8007ae6:	6030      	str	r0, [r6, #0]
 8007ae8:	062e      	lsls	r6, r5, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	d501      	bpl.n	8007af2 <_printf_i+0x1c2>
 8007aee:	6019      	str	r1, [r3, #0]
 8007af0:	e002      	b.n	8007af8 <_printf_i+0x1c8>
 8007af2:	0668      	lsls	r0, r5, #25
 8007af4:	d5fb      	bpl.n	8007aee <_printf_i+0x1be>
 8007af6:	8019      	strh	r1, [r3, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	4616      	mov	r6, r2
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	e7bc      	b.n	8007a7a <_printf_i+0x14a>
 8007b00:	6833      	ldr	r3, [r6, #0]
 8007b02:	2100      	movs	r1, #0
 8007b04:	1d1a      	adds	r2, r3, #4
 8007b06:	6032      	str	r2, [r6, #0]
 8007b08:	681e      	ldr	r6, [r3, #0]
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f000 f99f 	bl	8007e50 <memchr>
 8007b12:	b108      	cbz	r0, 8007b18 <_printf_i+0x1e8>
 8007b14:	1b80      	subs	r0, r0, r6
 8007b16:	6060      	str	r0, [r4, #4]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b22:	e7aa      	b.n	8007a7a <_printf_i+0x14a>
 8007b24:	4632      	mov	r2, r6
 8007b26:	4649      	mov	r1, r9
 8007b28:	4640      	mov	r0, r8
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	47d0      	blx	sl
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0ad      	beq.n	8007a8e <_printf_i+0x15e>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	079b      	lsls	r3, r3, #30
 8007b36:	d413      	bmi.n	8007b60 <_printf_i+0x230>
 8007b38:	68e0      	ldr	r0, [r4, #12]
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	4298      	cmp	r0, r3
 8007b3e:	bfb8      	it	lt
 8007b40:	4618      	movlt	r0, r3
 8007b42:	e7a6      	b.n	8007a92 <_printf_i+0x162>
 8007b44:	2301      	movs	r3, #1
 8007b46:	4632      	mov	r2, r6
 8007b48:	4649      	mov	r1, r9
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	47d0      	blx	sl
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d09d      	beq.n	8007a8e <_printf_i+0x15e>
 8007b52:	3501      	adds	r5, #1
 8007b54:	68e3      	ldr	r3, [r4, #12]
 8007b56:	9903      	ldr	r1, [sp, #12]
 8007b58:	1a5b      	subs	r3, r3, r1
 8007b5a:	42ab      	cmp	r3, r5
 8007b5c:	dcf2      	bgt.n	8007b44 <_printf_i+0x214>
 8007b5e:	e7eb      	b.n	8007b38 <_printf_i+0x208>
 8007b60:	2500      	movs	r5, #0
 8007b62:	f104 0619 	add.w	r6, r4, #25
 8007b66:	e7f5      	b.n	8007b54 <_printf_i+0x224>
 8007b68:	08008709 	.word	0x08008709
 8007b6c:	0800871a 	.word	0x0800871a

08007b70 <__sflush_r>:
 8007b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	0716      	lsls	r6, r2, #28
 8007b78:	4605      	mov	r5, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	d454      	bmi.n	8007c28 <__sflush_r+0xb8>
 8007b7e:	684b      	ldr	r3, [r1, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dc02      	bgt.n	8007b8a <__sflush_r+0x1a>
 8007b84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dd48      	ble.n	8007c1c <__sflush_r+0xac>
 8007b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	d045      	beq.n	8007c1c <__sflush_r+0xac>
 8007b90:	2300      	movs	r3, #0
 8007b92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b96:	682f      	ldr	r7, [r5, #0]
 8007b98:	6a21      	ldr	r1, [r4, #32]
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	d030      	beq.n	8007c00 <__sflush_r+0x90>
 8007b9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	0759      	lsls	r1, r3, #29
 8007ba4:	d505      	bpl.n	8007bb2 <__sflush_r+0x42>
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	1ad2      	subs	r2, r2, r3
 8007baa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bac:	b10b      	cbz	r3, 8007bb2 <__sflush_r+0x42>
 8007bae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bb8:	6a21      	ldr	r1, [r4, #32]
 8007bba:	47b0      	blx	r6
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	d106      	bne.n	8007bd0 <__sflush_r+0x60>
 8007bc2:	6829      	ldr	r1, [r5, #0]
 8007bc4:	291d      	cmp	r1, #29
 8007bc6:	d82b      	bhi.n	8007c20 <__sflush_r+0xb0>
 8007bc8:	4a28      	ldr	r2, [pc, #160]	@ (8007c6c <__sflush_r+0xfc>)
 8007bca:	410a      	asrs	r2, r1
 8007bcc:	07d6      	lsls	r6, r2, #31
 8007bce:	d427      	bmi.n	8007c20 <__sflush_r+0xb0>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	6062      	str	r2, [r4, #4]
 8007bd4:	6922      	ldr	r2, [r4, #16]
 8007bd6:	04d9      	lsls	r1, r3, #19
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	d504      	bpl.n	8007be6 <__sflush_r+0x76>
 8007bdc:	1c42      	adds	r2, r0, #1
 8007bde:	d101      	bne.n	8007be4 <__sflush_r+0x74>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b903      	cbnz	r3, 8007be6 <__sflush_r+0x76>
 8007be4:	6560      	str	r0, [r4, #84]	@ 0x54
 8007be6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007be8:	602f      	str	r7, [r5, #0]
 8007bea:	b1b9      	cbz	r1, 8007c1c <__sflush_r+0xac>
 8007bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__sflush_r+0x8a>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7ff fca1 	bl	800753c <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bfe:	e00d      	b.n	8007c1c <__sflush_r+0xac>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b0      	blx	r6
 8007c06:	4602      	mov	r2, r0
 8007c08:	1c50      	adds	r0, r2, #1
 8007c0a:	d1c9      	bne.n	8007ba0 <__sflush_r+0x30>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0c6      	beq.n	8007ba0 <__sflush_r+0x30>
 8007c12:	2b1d      	cmp	r3, #29
 8007c14:	d001      	beq.n	8007c1a <__sflush_r+0xaa>
 8007c16:	2b16      	cmp	r3, #22
 8007c18:	d11d      	bne.n	8007c56 <__sflush_r+0xe6>
 8007c1a:	602f      	str	r7, [r5, #0]
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	e021      	b.n	8007c64 <__sflush_r+0xf4>
 8007c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c24:	b21b      	sxth	r3, r3
 8007c26:	e01a      	b.n	8007c5e <__sflush_r+0xee>
 8007c28:	690f      	ldr	r7, [r1, #16]
 8007c2a:	2f00      	cmp	r7, #0
 8007c2c:	d0f6      	beq.n	8007c1c <__sflush_r+0xac>
 8007c2e:	0793      	lsls	r3, r2, #30
 8007c30:	bf18      	it	ne
 8007c32:	2300      	movne	r3, #0
 8007c34:	680e      	ldr	r6, [r1, #0]
 8007c36:	bf08      	it	eq
 8007c38:	694b      	ldreq	r3, [r1, #20]
 8007c3a:	1bf6      	subs	r6, r6, r7
 8007c3c:	600f      	str	r7, [r1, #0]
 8007c3e:	608b      	str	r3, [r1, #8]
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	ddeb      	ble.n	8007c1c <__sflush_r+0xac>
 8007c44:	4633      	mov	r3, r6
 8007c46:	463a      	mov	r2, r7
 8007c48:	4628      	mov	r0, r5
 8007c4a:	6a21      	ldr	r1, [r4, #32]
 8007c4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c50:	47e0      	blx	ip
 8007c52:	2800      	cmp	r0, #0
 8007c54:	dc07      	bgt.n	8007c66 <__sflush_r+0xf6>
 8007c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c66:	4407      	add	r7, r0
 8007c68:	1a36      	subs	r6, r6, r0
 8007c6a:	e7e9      	b.n	8007c40 <__sflush_r+0xd0>
 8007c6c:	dfbffffe 	.word	0xdfbffffe

08007c70 <_fflush_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	690b      	ldr	r3, [r1, #16]
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	b913      	cbnz	r3, 8007c80 <_fflush_r+0x10>
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	b118      	cbz	r0, 8007c8a <_fflush_r+0x1a>
 8007c82:	6a03      	ldr	r3, [r0, #32]
 8007c84:	b90b      	cbnz	r3, 8007c8a <_fflush_r+0x1a>
 8007c86:	f7ff fb39 	bl	80072fc <__sinit>
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f3      	beq.n	8007c7a <_fflush_r+0xa>
 8007c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c94:	07d0      	lsls	r0, r2, #31
 8007c96:	d404      	bmi.n	8007ca2 <_fflush_r+0x32>
 8007c98:	0599      	lsls	r1, r3, #22
 8007c9a:	d402      	bmi.n	8007ca2 <_fflush_r+0x32>
 8007c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c9e:	f7ff fc4a 	bl	8007536 <__retarget_lock_acquire_recursive>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7ff ff63 	bl	8007b70 <__sflush_r>
 8007caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cac:	4605      	mov	r5, r0
 8007cae:	07da      	lsls	r2, r3, #31
 8007cb0:	d4e4      	bmi.n	8007c7c <_fflush_r+0xc>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	059b      	lsls	r3, r3, #22
 8007cb6:	d4e1      	bmi.n	8007c7c <_fflush_r+0xc>
 8007cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cba:	f7ff fc3d 	bl	8007538 <__retarget_lock_release_recursive>
 8007cbe:	e7dd      	b.n	8007c7c <_fflush_r+0xc>

08007cc0 <_putc_r>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	460d      	mov	r5, r1
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	b118      	cbz	r0, 8007cd2 <_putc_r+0x12>
 8007cca:	6a03      	ldr	r3, [r0, #32]
 8007ccc:	b90b      	cbnz	r3, 8007cd2 <_putc_r+0x12>
 8007cce:	f7ff fb15 	bl	80072fc <__sinit>
 8007cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cd4:	07d8      	lsls	r0, r3, #31
 8007cd6:	d405      	bmi.n	8007ce4 <_putc_r+0x24>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	0599      	lsls	r1, r3, #22
 8007cdc:	d402      	bmi.n	8007ce4 <_putc_r+0x24>
 8007cde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce0:	f7ff fc29 	bl	8007536 <__retarget_lock_acquire_recursive>
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	60a3      	str	r3, [r4, #8]
 8007cec:	da05      	bge.n	8007cfa <_putc_r+0x3a>
 8007cee:	69a2      	ldr	r2, [r4, #24]
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	db12      	blt.n	8007d1a <_putc_r+0x5a>
 8007cf4:	b2eb      	uxtb	r3, r5
 8007cf6:	2b0a      	cmp	r3, #10
 8007cf8:	d00f      	beq.n	8007d1a <_putc_r+0x5a>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	6022      	str	r2, [r4, #0]
 8007d00:	701d      	strb	r5, [r3, #0]
 8007d02:	b2ed      	uxtb	r5, r5
 8007d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d06:	07da      	lsls	r2, r3, #31
 8007d08:	d405      	bmi.n	8007d16 <_putc_r+0x56>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	059b      	lsls	r3, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_putc_r+0x56>
 8007d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d12:	f7ff fc11 	bl	8007538 <__retarget_lock_release_recursive>
 8007d16:	4628      	mov	r0, r5
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f000 f802 	bl	8007d28 <__swbuf_r>
 8007d24:	4605      	mov	r5, r0
 8007d26:	e7ed      	b.n	8007d04 <_putc_r+0x44>

08007d28 <__swbuf_r>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	4605      	mov	r5, r0
 8007d30:	b118      	cbz	r0, 8007d3a <__swbuf_r+0x12>
 8007d32:	6a03      	ldr	r3, [r0, #32]
 8007d34:	b90b      	cbnz	r3, 8007d3a <__swbuf_r+0x12>
 8007d36:	f7ff fae1 	bl	80072fc <__sinit>
 8007d3a:	69a3      	ldr	r3, [r4, #24]
 8007d3c:	60a3      	str	r3, [r4, #8]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	071a      	lsls	r2, r3, #28
 8007d42:	d501      	bpl.n	8007d48 <__swbuf_r+0x20>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	b943      	cbnz	r3, 8007d5a <__swbuf_r+0x32>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 f82a 	bl	8007da4 <__swsetup_r>
 8007d50:	b118      	cbz	r0, 8007d5a <__swbuf_r+0x32>
 8007d52:	f04f 37ff 	mov.w	r7, #4294967295
 8007d56:	4638      	mov	r0, r7
 8007d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	6922      	ldr	r2, [r4, #16]
 8007d5e:	b2f6      	uxtb	r6, r6
 8007d60:	1a98      	subs	r0, r3, r2
 8007d62:	6963      	ldr	r3, [r4, #20]
 8007d64:	4637      	mov	r7, r6
 8007d66:	4283      	cmp	r3, r0
 8007d68:	dc05      	bgt.n	8007d76 <__swbuf_r+0x4e>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f7ff ff7f 	bl	8007c70 <_fflush_r>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d1ed      	bne.n	8007d52 <__swbuf_r+0x2a>
 8007d76:	68a3      	ldr	r3, [r4, #8]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	60a3      	str	r3, [r4, #8]
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	6022      	str	r2, [r4, #0]
 8007d82:	701e      	strb	r6, [r3, #0]
 8007d84:	6962      	ldr	r2, [r4, #20]
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d004      	beq.n	8007d96 <__swbuf_r+0x6e>
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	07db      	lsls	r3, r3, #31
 8007d90:	d5e1      	bpl.n	8007d56 <__swbuf_r+0x2e>
 8007d92:	2e0a      	cmp	r6, #10
 8007d94:	d1df      	bne.n	8007d56 <__swbuf_r+0x2e>
 8007d96:	4621      	mov	r1, r4
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7ff ff69 	bl	8007c70 <_fflush_r>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d0d9      	beq.n	8007d56 <__swbuf_r+0x2e>
 8007da2:	e7d6      	b.n	8007d52 <__swbuf_r+0x2a>

08007da4 <__swsetup_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4b29      	ldr	r3, [pc, #164]	@ (8007e4c <__swsetup_r+0xa8>)
 8007da8:	4605      	mov	r5, r0
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	460c      	mov	r4, r1
 8007dae:	b118      	cbz	r0, 8007db8 <__swsetup_r+0x14>
 8007db0:	6a03      	ldr	r3, [r0, #32]
 8007db2:	b90b      	cbnz	r3, 8007db8 <__swsetup_r+0x14>
 8007db4:	f7ff faa2 	bl	80072fc <__sinit>
 8007db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dbc:	0719      	lsls	r1, r3, #28
 8007dbe:	d422      	bmi.n	8007e06 <__swsetup_r+0x62>
 8007dc0:	06da      	lsls	r2, r3, #27
 8007dc2:	d407      	bmi.n	8007dd4 <__swsetup_r+0x30>
 8007dc4:	2209      	movs	r2, #9
 8007dc6:	602a      	str	r2, [r5, #0]
 8007dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e033      	b.n	8007e3c <__swsetup_r+0x98>
 8007dd4:	0758      	lsls	r0, r3, #29
 8007dd6:	d512      	bpl.n	8007dfe <__swsetup_r+0x5a>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dda:	b141      	cbz	r1, 8007dee <__swsetup_r+0x4a>
 8007ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <__swsetup_r+0x46>
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff fba9 	bl	800753c <_free_r>
 8007dea:	2300      	movs	r3, #0
 8007dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	b94b      	cbnz	r3, 8007e1e <__swsetup_r+0x7a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e14:	d003      	beq.n	8007e1e <__swsetup_r+0x7a>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 f84c 	bl	8007eb6 <__smakebuf_r>
 8007e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e22:	f013 0201 	ands.w	r2, r3, #1
 8007e26:	d00a      	beq.n	8007e3e <__swsetup_r+0x9a>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	60a2      	str	r2, [r4, #8]
 8007e2c:	6962      	ldr	r2, [r4, #20]
 8007e2e:	4252      	negs	r2, r2
 8007e30:	61a2      	str	r2, [r4, #24]
 8007e32:	6922      	ldr	r2, [r4, #16]
 8007e34:	b942      	cbnz	r2, 8007e48 <__swsetup_r+0xa4>
 8007e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e3a:	d1c5      	bne.n	8007dc8 <__swsetup_r+0x24>
 8007e3c:	bd38      	pop	{r3, r4, r5, pc}
 8007e3e:	0799      	lsls	r1, r3, #30
 8007e40:	bf58      	it	pl
 8007e42:	6962      	ldrpl	r2, [r4, #20]
 8007e44:	60a2      	str	r2, [r4, #8]
 8007e46:	e7f4      	b.n	8007e32 <__swsetup_r+0x8e>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e7f7      	b.n	8007e3c <__swsetup_r+0x98>
 8007e4c:	20000038 	.word	0x20000038

08007e50 <memchr>:
 8007e50:	4603      	mov	r3, r0
 8007e52:	b510      	push	{r4, lr}
 8007e54:	b2c9      	uxtb	r1, r1
 8007e56:	4402      	add	r2, r0
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	d101      	bne.n	8007e62 <memchr+0x12>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e003      	b.n	8007e6a <memchr+0x1a>
 8007e62:	7804      	ldrb	r4, [r0, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	428c      	cmp	r4, r1
 8007e68:	d1f6      	bne.n	8007e58 <memchr+0x8>
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <__swhatbuf_r>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e74:	4615      	mov	r5, r2
 8007e76:	2900      	cmp	r1, #0
 8007e78:	461e      	mov	r6, r3
 8007e7a:	b096      	sub	sp, #88	@ 0x58
 8007e7c:	da0c      	bge.n	8007e98 <__swhatbuf_r+0x2c>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	2100      	movs	r1, #0
 8007e82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e86:	bf14      	ite	ne
 8007e88:	2340      	movne	r3, #64	@ 0x40
 8007e8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e8e:	2000      	movs	r0, #0
 8007e90:	6031      	str	r1, [r6, #0]
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	b016      	add	sp, #88	@ 0x58
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	466a      	mov	r2, sp
 8007e9a:	f000 f849 	bl	8007f30 <_fstat_r>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	dbed      	blt.n	8007e7e <__swhatbuf_r+0x12>
 8007ea2:	9901      	ldr	r1, [sp, #4]
 8007ea4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ea8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007eac:	4259      	negs	r1, r3
 8007eae:	4159      	adcs	r1, r3
 8007eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eb4:	e7eb      	b.n	8007e8e <__swhatbuf_r+0x22>

08007eb6 <__smakebuf_r>:
 8007eb6:	898b      	ldrh	r3, [r1, #12]
 8007eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eba:	079d      	lsls	r5, r3, #30
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	d507      	bpl.n	8007ed2 <__smakebuf_r+0x1c>
 8007ec2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	6123      	str	r3, [r4, #16]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	6163      	str	r3, [r4, #20]
 8007ece:	b003      	add	sp, #12
 8007ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed2:	466a      	mov	r2, sp
 8007ed4:	ab01      	add	r3, sp, #4
 8007ed6:	f7ff ffc9 	bl	8007e6c <__swhatbuf_r>
 8007eda:	9f00      	ldr	r7, [sp, #0]
 8007edc:	4605      	mov	r5, r0
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff f8f3 	bl	80070cc <_malloc_r>
 8007ee6:	b948      	cbnz	r0, 8007efc <__smakebuf_r+0x46>
 8007ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eec:	059a      	lsls	r2, r3, #22
 8007eee:	d4ee      	bmi.n	8007ece <__smakebuf_r+0x18>
 8007ef0:	f023 0303 	bic.w	r3, r3, #3
 8007ef4:	f043 0302 	orr.w	r3, r3, #2
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	e7e2      	b.n	8007ec2 <__smakebuf_r+0xc>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	6020      	str	r0, [r4, #0]
 8007f0c:	b15b      	cbz	r3, 8007f26 <__smakebuf_r+0x70>
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f14:	f000 f81e 	bl	8007f54 <_isatty_r>
 8007f18:	b128      	cbz	r0, 8007f26 <__smakebuf_r+0x70>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f023 0303 	bic.w	r3, r3, #3
 8007f20:	f043 0301 	orr.w	r3, r3, #1
 8007f24:	81a3      	strh	r3, [r4, #12]
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	431d      	orrs	r5, r3
 8007f2a:	81a5      	strh	r5, [r4, #12]
 8007f2c:	e7cf      	b.n	8007ece <__smakebuf_r+0x18>
	...

08007f30 <_fstat_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	2300      	movs	r3, #0
 8007f34:	4d06      	ldr	r5, [pc, #24]	@ (8007f50 <_fstat_r+0x20>)
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f7f8 fccb 	bl	80008d8 <_fstat>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d102      	bne.n	8007f4c <_fstat_r+0x1c>
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	b103      	cbz	r3, 8007f4c <_fstat_r+0x1c>
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000998 	.word	0x20000998

08007f54 <_isatty_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	2300      	movs	r3, #0
 8007f58:	4d05      	ldr	r5, [pc, #20]	@ (8007f70 <_isatty_r+0x1c>)
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	f7f8 fcc9 	bl	80008f6 <_isatty>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_isatty_r+0x1a>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_isatty_r+0x1a>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20000998 	.word	0x20000998

08007f74 <_init>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr

08007f80 <_fini>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr
